
12864B-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003280  08003280  00004280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800331c  0800331c  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  0800331c  0800331c  0000431c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003324  08003324  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003324  08003324  00004324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003328  08003328  00004328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800332c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003338  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003338  000050c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afa9  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cce  00000000  00000000  0000ffdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  00011cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e4  00000000  00000000  00012590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017059  00000000  00000000  00012c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc59  00000000  00000000  00029ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000930ba  00000000  00000000  00035926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c89e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eac  00000000  00000000  000c8a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ca8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003268 	.word	0x08003268

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003268 	.word	0x08003268

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <GDreadDataPort>:
uint8_t GDgraphicsDisplayed;
uint8_t GDleftByte, GDrightByte;
uint8_t GDprevYaddr, GDprevXaddr;

// Function to read data port (DB0-DB7 connected to various GPIO ports)
uint8_t GDreadDataPort(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]

    // Set GPIOs to input mode
    GPIOA->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3 | GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
 8000628:	23a0      	movs	r3, #160	@ 0xa0
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	23a0      	movs	r3, #160	@ 0xa0
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	4950      	ldr	r1, [pc, #320]	@ (8000774 <GDreadDataPort+0x158>)
 8000634:	400a      	ands	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
    GPIOB->MODER &= ~(GPIO_MODER_MODE3 | GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE14);
 8000638:	4b4f      	ldr	r3, [pc, #316]	@ (8000778 <GDreadDataPort+0x15c>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b4e      	ldr	r3, [pc, #312]	@ (8000778 <GDreadDataPort+0x15c>)
 800063e:	494f      	ldr	r1, [pc, #316]	@ (800077c <GDreadDataPort+0x160>)
 8000640:	400a      	ands	r2, r1
 8000642:	601a      	str	r2, [r3, #0]
    GPIOC->MODER &= ~(GPIO_MODER_MODE7);
 8000644:	4b4e      	ldr	r3, [pc, #312]	@ (8000780 <GDreadDataPort+0x164>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b4d      	ldr	r3, [pc, #308]	@ (8000780 <GDreadDataPort+0x164>)
 800064a:	494e      	ldr	r1, [pc, #312]	@ (8000784 <GDreadDataPort+0x168>)
 800064c:	400a      	ands	r2, r1
 800064e:	601a      	str	r2, [r3, #0]

    GD_RW_HIGH;
 8000650:	23a0      	movs	r3, #160	@ 0xa0
 8000652:	05db      	lsls	r3, r3, #23
 8000654:	2201      	movs	r2, #1
 8000656:	2180      	movs	r1, #128	@ 0x80
 8000658:	0018      	movs	r0, r3
 800065a:	f001 f892 	bl	8001782 <HAL_GPIO_WritePin>
    GD_E_HIGH;
 800065e:	23a0      	movs	r3, #160	@ 0xa0
 8000660:	05db      	lsls	r3, r3, #23
 8000662:	2201      	movs	r2, #1
 8000664:	2140      	movs	r1, #64	@ 0x40
 8000666:	0018      	movs	r0, r3
 8000668:	f001 f88b 	bl	8001782 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Short delay
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fe2f 	bl	80012d0 <HAL_Delay>

    if (HAL_GPIO_ReadPin(DB0_GPIO_Port, DB0_Pin)) data |= (1 << 0);
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	00da      	lsls	r2, r3, #3
 8000676:	23a0      	movs	r3, #160	@ 0xa0
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f001 f863 	bl	8001748 <HAL_GPIO_ReadPin>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d005      	beq.n	8000692 <GDreadDataPort+0x76>
 8000686:	1dfb      	adds	r3, r7, #7
 8000688:	1dfa      	adds	r2, r7, #7
 800068a:	7812      	ldrb	r2, [r2, #0]
 800068c:	2101      	movs	r1, #1
 800068e:	430a      	orrs	r2, r1
 8000690:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(DB1_GPIO_Port, DB1_Pin)) data |= (1 << 1);
 8000692:	4b39      	ldr	r3, [pc, #228]	@ (8000778 <GDreadDataPort+0x15c>)
 8000694:	2108      	movs	r1, #8
 8000696:	0018      	movs	r0, r3
 8000698:	f001 f856 	bl	8001748 <HAL_GPIO_ReadPin>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d005      	beq.n	80006ac <GDreadDataPort+0x90>
 80006a0:	1dfb      	adds	r3, r7, #7
 80006a2:	1dfa      	adds	r2, r7, #7
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	2102      	movs	r1, #2
 80006a8:	430a      	orrs	r2, r1
 80006aa:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(DB2_GPIO_Port, DB2_Pin)) data |= (1 << 2);
 80006ac:	4b32      	ldr	r3, [pc, #200]	@ (8000778 <GDreadDataPort+0x15c>)
 80006ae:	2120      	movs	r1, #32
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 f849 	bl	8001748 <HAL_GPIO_ReadPin>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d005      	beq.n	80006c6 <GDreadDataPort+0xaa>
 80006ba:	1dfb      	adds	r3, r7, #7
 80006bc:	1dfa      	adds	r2, r7, #7
 80006be:	7812      	ldrb	r2, [r2, #0]
 80006c0:	2104      	movs	r1, #4
 80006c2:	430a      	orrs	r2, r1
 80006c4:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(DB3_GPIO_Port, DB3_Pin)) data |= (1 << 3);
 80006c6:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <GDreadDataPort+0x15c>)
 80006c8:	2110      	movs	r1, #16
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f83c 	bl	8001748 <HAL_GPIO_ReadPin>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d005      	beq.n	80006e0 <GDreadDataPort+0xc4>
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	1dfa      	adds	r2, r7, #7
 80006d8:	7812      	ldrb	r2, [r2, #0]
 80006da:	2108      	movs	r1, #8
 80006dc:	430a      	orrs	r2, r1
 80006de:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(DB4_GPIO_Port, DB4_Pin)) data |= (1 << 4);
 80006e0:	2380      	movs	r3, #128	@ 0x80
 80006e2:	01db      	lsls	r3, r3, #7
 80006e4:	4a24      	ldr	r2, [pc, #144]	@ (8000778 <GDreadDataPort+0x15c>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	0010      	movs	r0, r2
 80006ea:	f001 f82d 	bl	8001748 <HAL_GPIO_ReadPin>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d005      	beq.n	80006fe <GDreadDataPort+0xe2>
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	1dfa      	adds	r2, r7, #7
 80006f6:	7812      	ldrb	r2, [r2, #0]
 80006f8:	2110      	movs	r1, #16
 80006fa:	430a      	orrs	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(DB5_GPIO_Port, DB5_Pin)) data |= (1 << 5);
 80006fe:	2380      	movs	r3, #128	@ 0x80
 8000700:	005a      	lsls	r2, r3, #1
 8000702:	23a0      	movs	r3, #160	@ 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 f81d 	bl	8001748 <HAL_GPIO_ReadPin>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d005      	beq.n	800071e <GDreadDataPort+0x102>
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	1dfa      	adds	r2, r7, #7
 8000716:	7812      	ldrb	r2, [r2, #0]
 8000718:	2120      	movs	r1, #32
 800071a:	430a      	orrs	r2, r1
 800071c:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(DB6_GPIO_Port, DB6_Pin)) data |= (1 << 6);
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	009a      	lsls	r2, r3, #2
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f001 f80d 	bl	8001748 <HAL_GPIO_ReadPin>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d005      	beq.n	800073e <GDreadDataPort+0x122>
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	1dfa      	adds	r2, r7, #7
 8000736:	7812      	ldrb	r2, [r2, #0]
 8000738:	2140      	movs	r1, #64	@ 0x40
 800073a:	430a      	orrs	r2, r1
 800073c:	701a      	strb	r2, [r3, #0]
    if (HAL_GPIO_ReadPin(DB7_GPIO_Port, DB7_Pin)) data |= (1 << 7);
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <GDreadDataPort+0x164>)
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	0018      	movs	r0, r3
 8000744:	f001 f800 	bl	8001748 <HAL_GPIO_ReadPin>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d006      	beq.n	800075a <GDreadDataPort+0x13e>
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	1dfa      	adds	r2, r7, #7
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	2180      	movs	r1, #128	@ 0x80
 8000754:	4249      	negs	r1, r1
 8000756:	430a      	orrs	r2, r1
 8000758:	701a      	strb	r2, [r3, #0]

    GD_E_LOW;
 800075a:	23a0      	movs	r3, #160	@ 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2200      	movs	r2, #0
 8000760:	2140      	movs	r1, #64	@ 0x40
 8000762:	0018      	movs	r0, r3
 8000764:	f001 f80d 	bl	8001782 <HAL_GPIO_WritePin>
    return data;
 8000768:	1dfb      	adds	r3, r7, #7
 800076a:	781b      	ldrb	r3, [r3, #0]
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	b002      	add	sp, #8
 8000772:	bd80      	pop	{r7, pc}
 8000774:	ffc0ff0f 	.word	0xffc0ff0f
 8000778:	50000400 	.word	0x50000400
 800077c:	cffff03f 	.word	0xcffff03f
 8000780:	50000800 	.word	0x50000800
 8000784:	ffff3fff 	.word	0xffff3fff

08000788 <GDwriteDataPort>:

// Function to write data port (DB0-DB7 connected to various GPIO ports)
void GDwriteDataPort(uint8_t b) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	0002      	movs	r2, r0
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	701a      	strb	r2, [r3, #0]
    GD_E_HIGH;
 8000794:	23a0      	movs	r3, #160	@ 0xa0
 8000796:	05db      	lsls	r3, r3, #23
 8000798:	2201      	movs	r2, #1
 800079a:	2140      	movs	r1, #64	@ 0x40
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fff0 	bl	8001782 <HAL_GPIO_WritePin>

    // Set GPIOs to output mode
    GPIOA->MODER |= (GPIO_MODER_MODE10_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0 | GPIO_MODER_MODE8_0 | GPIO_MODER_MODE9_0);
 80007a2:	23a0      	movs	r3, #160	@ 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	23a0      	movs	r3, #160	@ 0xa0
 80007aa:	05db      	lsls	r3, r3, #23
 80007ac:	493e      	ldr	r1, [pc, #248]	@ (80008a8 <GDwriteDataPort+0x120>)
 80007ae:	430a      	orrs	r2, r1
 80007b0:	601a      	str	r2, [r3, #0]
    GPIOB->MODER |= (GPIO_MODER_MODE3_0 | GPIO_MODER_MODE4_0 | GPIO_MODER_MODE5_0 | GPIO_MODER_MODE14_0);
 80007b2:	4b3e      	ldr	r3, [pc, #248]	@ (80008ac <GDwriteDataPort+0x124>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b3d      	ldr	r3, [pc, #244]	@ (80008ac <GDwriteDataPort+0x124>)
 80007b8:	493d      	ldr	r1, [pc, #244]	@ (80008b0 <GDwriteDataPort+0x128>)
 80007ba:	430a      	orrs	r2, r1
 80007bc:	601a      	str	r2, [r3, #0]
    GPIOC->MODER |= (GPIO_MODER_MODE7_0);
 80007be:	4b3d      	ldr	r3, [pc, #244]	@ (80008b4 <GDwriteDataPort+0x12c>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4b3c      	ldr	r3, [pc, #240]	@ (80008b4 <GDwriteDataPort+0x12c>)
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	01c9      	lsls	r1, r1, #7
 80007c8:	430a      	orrs	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (b & (1 << 0)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4013      	ands	r3, r2
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	2380      	movs	r3, #128	@ 0x80
 80007d8:	00d9      	lsls	r1, r3, #3
 80007da:	23a0      	movs	r3, #160	@ 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 ffcf 	bl	8001782 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (b & (1 << 1)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007e4:	1dfb      	adds	r3, r7, #7
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	105b      	asrs	r3, r3, #1
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	482e      	ldr	r0, [pc, #184]	@ (80008ac <GDwriteDataPort+0x124>)
 80007f4:	001a      	movs	r2, r3
 80007f6:	2108      	movs	r1, #8
 80007f8:	f000 ffc3 	bl	8001782 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (b & (1 << 2)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	109b      	asrs	r3, r3, #2
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2201      	movs	r2, #1
 8000806:	4013      	ands	r3, r2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	4828      	ldr	r0, [pc, #160]	@ (80008ac <GDwriteDataPort+0x124>)
 800080c:	001a      	movs	r2, r3
 800080e:	2120      	movs	r1, #32
 8000810:	f000 ffb7 	bl	8001782 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (b & (1 << 3)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	10db      	asrs	r3, r3, #3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2201      	movs	r2, #1
 800081e:	4013      	ands	r3, r2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4822      	ldr	r0, [pc, #136]	@ (80008ac <GDwriteDataPort+0x124>)
 8000824:	001a      	movs	r2, r3
 8000826:	2110      	movs	r1, #16
 8000828:	f000 ffab 	bl	8001782 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DB4_GPIO_Port, DB4_Pin, (b & (1 << 4)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	111b      	asrs	r3, r3, #4
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2201      	movs	r2, #1
 8000836:	4013      	ands	r3, r2
 8000838:	b2da      	uxtb	r2, r3
 800083a:	2380      	movs	r3, #128	@ 0x80
 800083c:	01db      	lsls	r3, r3, #7
 800083e:	481b      	ldr	r0, [pc, #108]	@ (80008ac <GDwriteDataPort+0x124>)
 8000840:	0019      	movs	r1, r3
 8000842:	f000 ff9e 	bl	8001782 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DB5_GPIO_Port, DB5_Pin, (b & (1 << 5)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	115b      	asrs	r3, r3, #5
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2201      	movs	r2, #1
 8000850:	4013      	ands	r3, r2
 8000852:	b2da      	uxtb	r2, r3
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	0059      	lsls	r1, r3, #1
 8000858:	23a0      	movs	r3, #160	@ 0xa0
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	0018      	movs	r0, r3
 800085e:	f000 ff90 	bl	8001782 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DB6_GPIO_Port, DB6_Pin, (b & (1 << 6)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	119b      	asrs	r3, r3, #6
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	b2da      	uxtb	r2, r3
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	0099      	lsls	r1, r3, #2
 8000874:	23a0      	movs	r3, #160	@ 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	0018      	movs	r0, r3
 800087a:	f000 ff82 	bl	8001782 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, (b & (1 << 7)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	09db      	lsrs	r3, r3, #7
 8000884:	b2db      	uxtb	r3, r3
 8000886:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <GDwriteDataPort+0x12c>)
 8000888:	001a      	movs	r2, r3
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	f000 ff79 	bl	8001782 <HAL_GPIO_WritePin>

    GD_E_LOW;
 8000890:	23a0      	movs	r3, #160	@ 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	2200      	movs	r2, #0
 8000896:	2140      	movs	r1, #64	@ 0x40
 8000898:	0018      	movs	r0, r3
 800089a:	f000 ff72 	bl	8001782 <HAL_GPIO_WritePin>
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	00150050 	.word	0x00150050
 80008ac:	50000400 	.word	0x50000400
 80008b0:	10000540 	.word	0x10000540
 80008b4:	50000800 	.word	0x50000800

080008b8 <GDwaitWhileBusy>:

// Function to wait while busy
void GDwaitWhileBusy(void) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
    GD_RS_LOW;
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <GDwaitWhileBusy+0x2c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	2101      	movs	r1, #1
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 ff5d 	bl	8001782 <HAL_GPIO_WritePin>
    while (GDreadDataPort() & 0x80) {
 80008c8:	e002      	b.n	80008d0 <GDwaitWhileBusy+0x18>
        HAL_Delay(1); // Short delay
 80008ca:	2001      	movs	r0, #1
 80008cc:	f000 fd00 	bl	80012d0 <HAL_Delay>
    while (GDreadDataPort() & 0x80) {
 80008d0:	f7ff fea4 	bl	800061c <GDreadDataPort>
 80008d4:	0003      	movs	r3, r0
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	2b00      	cmp	r3, #0
 80008da:	dbf6      	blt.n	80008ca <GDwaitWhileBusy+0x12>
    }
}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	50000400 	.word	0x50000400

080008e8 <GDramWrite>:

// Function to write RAM
void GDramWrite(uint8_t b) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
    GDwaitWhileBusy();
 80008f4:	f7ff ffe0 	bl	80008b8 <GDwaitWhileBusy>
    GD_RS_HIGH;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <GDramWrite+0x3c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	2101      	movs	r1, #1
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 ff3f 	bl	8001782 <HAL_GPIO_WritePin>
    GD_RW_LOW;
 8000904:	23a0      	movs	r3, #160	@ 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	@ 0x80
 800090c:	0018      	movs	r0, r3
 800090e:	f000 ff38 	bl	8001782 <HAL_GPIO_WritePin>
    GDwriteDataPort(b);
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff ff36 	bl	8000788 <GDwriteDataPort>
}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}
 8000924:	50000400 	.word	0x50000400

08000928 <GDinsWrite>:

// Function to write instruction
void GDinsWrite(uint8_t b) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	0002      	movs	r2, r0
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	701a      	strb	r2, [r3, #0]
    GDwaitWhileBusy();
 8000934:	f7ff ffc0 	bl	80008b8 <GDwaitWhileBusy>
    GD_RW_LOW;
 8000938:	23a0      	movs	r3, #160	@ 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	2200      	movs	r2, #0
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	0018      	movs	r0, r3
 8000942:	f000 ff1e 	bl	8001782 <HAL_GPIO_WritePin>
    GDwriteDataPort(b);
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff ff1c 	bl	8000788 <GDwriteDataPort>
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}

08000958 <GDgClear>:

// Function to clear graphics display
void GDgClear(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
    GDinsWrite(GDgraphicsDisplayed ? 0x36 : 0x34);
 800095e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <GDgClear+0xc4>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <GDgClear+0x12>
 8000966:	2336      	movs	r3, #54	@ 0x36
 8000968:	e000      	b.n	800096c <GDgClear+0x14>
 800096a:	2334      	movs	r3, #52	@ 0x34
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ffdb 	bl	8000928 <GDinsWrite>
    GDinsWrite(0b00000010);
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff ffd8 	bl	8000928 <GDinsWrite>
    uint8_t rowStart = GDcurrentBank ? 32 : 0;
 8000978:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <GDgClear+0xc8>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <GDgClear+0x2c>
 8000980:	2220      	movs	r2, #32
 8000982:	e000      	b.n	8000986 <GDgClear+0x2e>
 8000984:	2200      	movs	r2, #0
 8000986:	1d7b      	adds	r3, r7, #5
 8000988:	701a      	strb	r2, [r3, #0]
    uint8_t rowFinish = GDcurrentBank ? 64 : 32;
 800098a:	4b25      	ldr	r3, [pc, #148]	@ (8000a20 <GDgClear+0xc8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <GDgClear+0x3e>
 8000992:	2240      	movs	r2, #64	@ 0x40
 8000994:	e000      	b.n	8000998 <GDgClear+0x40>
 8000996:	2220      	movs	r2, #32
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	701a      	strb	r2, [r3, #0]
    for (uint8_t row = rowStart; row < rowFinish; row++) {
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	1d7a      	adds	r2, r7, #5
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	e023      	b.n	80009ee <GDgClear+0x96>
        GDinsWrite(0b10000000 | row);
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	4252      	negs	r2, r2
 80009ae:	4313      	orrs	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff ffb8 	bl	8000928 <GDinsWrite>
        GDinsWrite(0b10000000 | 0);
 80009b8:	2080      	movs	r0, #128	@ 0x80
 80009ba:	f7ff ffb5 	bl	8000928 <GDinsWrite>
        for (uint8_t i = 0; i < 16; i++) {
 80009be:	1dbb      	adds	r3, r7, #6
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
 80009c4:	e00a      	b.n	80009dc <GDgClear+0x84>
            GDramWrite(0x00);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff ff8e 	bl	80008e8 <GDramWrite>
            GDramWrite(0x00);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f7ff ff8b 	bl	80008e8 <GDramWrite>
        for (uint8_t i = 0; i < 16; i++) {
 80009d2:	1dbb      	adds	r3, r7, #6
 80009d4:	781a      	ldrb	r2, [r3, #0]
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	3201      	adds	r2, #1
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	1dbb      	adds	r3, r7, #6
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d9f0      	bls.n	80009c6 <GDgClear+0x6e>
    for (uint8_t row = rowStart; row < rowFinish; row++) {
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	3201      	adds	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	1dfa      	adds	r2, r7, #7
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d3d5      	bcc.n	80009a6 <GDgClear+0x4e>
        }
    }
    GDinsWrite(GDgraphicsDisplayed ? 0x32 : 0x30);
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <GDgClear+0xc4>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <GDgClear+0xae>
 8000a02:	2332      	movs	r3, #50	@ 0x32
 8000a04:	e000      	b.n	8000a08 <GDgClear+0xb0>
 8000a06:	2330      	movs	r3, #48	@ 0x30
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ff8d 	bl	8000928 <GDinsWrite>
    GDprevXaddr = 0x10;
 8000a0e:	4b05      	ldr	r3, [pc, #20]	@ (8000a24 <GDgClear+0xcc>)
 8000a10:	2210      	movs	r2, #16
 8000a12:	701a      	strb	r2, [r3, #0]
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b002      	add	sp, #8
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000002a 	.word	0x2000002a
 8000a20:	20000029 	.word	0x20000029
 8000a24:	2000002d 	.word	0x2000002d

08000a28 <GDinit>:

// Initialization function
void GDinit(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
    GD_RS_LOW;
 8000a2c:	4b20      	ldr	r3, [pc, #128]	@ (8000ab0 <GDinit+0x88>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2101      	movs	r1, #1
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fea5 	bl	8001782 <HAL_GPIO_WritePin>
    GD_RW_HIGH;
 8000a38:	23a0      	movs	r3, #160	@ 0xa0
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2180      	movs	r1, #128	@ 0x80
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 fe9e 	bl	8001782 <HAL_GPIO_WritePin>
    GD_E_LOW;
 8000a46:	23a0      	movs	r3, #160	@ 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2140      	movs	r1, #64	@ 0x40
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fe97 	bl	8001782 <HAL_GPIO_WritePin>
    HAL_Delay(40);
 8000a54:	2028      	movs	r0, #40	@ 0x28
 8000a56:	f000 fc3b 	bl	80012d0 <HAL_Delay>
    GDinsWrite(0x30);
 8000a5a:	2030      	movs	r0, #48	@ 0x30
 8000a5c:	f7ff ff64 	bl	8000928 <GDinsWrite>
    GDinsWrite(0x34);
 8000a60:	2034      	movs	r0, #52	@ 0x34
 8000a62:	f7ff ff61 	bl	8000928 <GDinsWrite>
    GDinsWrite(0x34);
 8000a66:	2034      	movs	r0, #52	@ 0x34
 8000a68:	f7ff ff5e 	bl	8000928 <GDinsWrite>
    GDgraphicsDisplayed = 0;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <GDinit+0x8c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
    GDinsWrite(0x30);
 8000a72:	2030      	movs	r0, #48	@ 0x30
 8000a74:	f7ff ff58 	bl	8000928 <GDinsWrite>
    GDinsWrite(0x84);
 8000a78:	2084      	movs	r0, #132	@ 0x84
 8000a7a:	f7ff ff55 	bl	8000928 <GDinsWrite>
    GDinsWrite(0x01);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff ff52 	bl	8000928 <GDinsWrite>
    GDinsWrite(0x06);
 8000a84:	2006      	movs	r0, #6
 8000a86:	f7ff ff4f 	bl	8000928 <GDinsWrite>
    GDcurrentBank = 0;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab8 <GDinit+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	701a      	strb	r2, [r3, #0]
    GDgClear();
 8000a90:	f7ff ff62 	bl	8000958 <GDgClear>
    GDcurrentBank = 1;
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <GDinit+0x90>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
    GDgClear();
 8000a9a:	f7ff ff5d 	bl	8000958 <GDgClear>
    GDdisplayedBank = 0;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	@ (8000abc <GDinit+0x94>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
    GDprevXaddr = 0x10;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <GDinit+0x98>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	701a      	strb	r2, [r3, #0]
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	50000400 	.word	0x50000400
 8000ab4:	2000002a 	.word	0x2000002a
 8000ab8:	20000029 	.word	0x20000029
 8000abc:	20000028 	.word	0x20000028
 8000ac0:	2000002d 	.word	0x2000002d

08000ac4 <GDflushGraphicsPixelBuffer>:

// Continue adapting the rest of the functions similarly

void GDflushGraphicsPixelBuffer(void) {
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
    if (GDprevXaddr & 0x20) {
 8000ac8:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <GDflushGraphicsPixelBuffer+0x48>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	001a      	movs	r2, r3
 8000ace:	2320      	movs	r3, #32
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	d017      	beq.n	8000b04 <GDflushGraphicsPixelBuffer+0x40>
        GDramWrite(GDleftByte);
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <GDflushGraphicsPixelBuffer+0x4c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f7ff ff05 	bl	80008e8 <GDramWrite>
        GDramWrite(GDrightByte);
 8000ade:	4b0d      	ldr	r3, [pc, #52]	@ (8000b14 <GDflushGraphicsPixelBuffer+0x50>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f7ff ff00 	bl	80008e8 <GDramWrite>
        GDprevXaddr |= 0x10;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <GDflushGraphicsPixelBuffer+0x48>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2210      	movs	r2, #16
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <GDflushGraphicsPixelBuffer+0x48>)
 8000af4:	701a      	strb	r2, [r3, #0]
        GDprevXaddr &= ~0x20;
 8000af6:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <GDflushGraphicsPixelBuffer+0x48>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2220      	movs	r2, #32
 8000afc:	4393      	bics	r3, r2
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <GDflushGraphicsPixelBuffer+0x48>)
 8000b02:	701a      	strb	r2, [r3, #0]
    }
}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	2000002d 	.word	0x2000002d
 8000b10:	2000002b 	.word	0x2000002b
 8000b14:	2000002c 	.word	0x2000002c

08000b18 <GDsetDDaddress>:

void GDsetDDaddress(uint8_t addr) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	0002      	movs	r2, r0
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	701a      	strb	r2, [r3, #0]
    GDflushGraphicsPixelBuffer();
 8000b24:	f7ff ffce 	bl	8000ac4 <GDflushGraphicsPixelBuffer>
    if (GDcurrentBank) {
 8000b28:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <GDsetDDaddress+0x48>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d009      	beq.n	8000b44 <GDsetDDaddress+0x2c>
        GDinsWrite(0xA0 | addr);
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2260      	movs	r2, #96	@ 0x60
 8000b36:	4252      	negs	r2, r2
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f7ff fef3 	bl	8000928 <GDinsWrite>
    } else {
        GDinsWrite(0x80 | addr);
    }
}
 8000b42:	e008      	b.n	8000b56 <GDsetDDaddress+0x3e>
        GDinsWrite(0x80 | addr);
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2280      	movs	r2, #128	@ 0x80
 8000b4a:	4252      	negs	r2, r2
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff fee9 	bl	8000928 <GDinsWrite>
}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	20000029 	.word	0x20000029

08000b64 <GDreadRam>:

uint8_t GDreadRam(void) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    GDwaitWhileBusy();
 8000b68:	f7ff fea6 	bl	80008b8 <GDwaitWhileBusy>
    GD_RS_HIGH;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <GDreadRam+0x20>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2101      	movs	r1, #1
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 fe05 	bl	8001782 <HAL_GPIO_WritePin>
    return GDreadDataPort();
 8000b78:	f7ff fd50 	bl	800061c <GDreadDataPort>
 8000b7c:	0003      	movs	r3, r0
}
 8000b7e:	0018      	movs	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	50000400 	.word	0x50000400

08000b88 <GDread16bits>:

void GDread16bits(void) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    GDleftByte = GDreadRam();
 8000b8c:	f7ff ffea 	bl	8000b64 <GDreadRam>
 8000b90:	0003      	movs	r3, r0
 8000b92:	001a      	movs	r2, r3
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <GDread16bits+0x24>)
 8000b96:	701a      	strb	r2, [r3, #0]
    GDrightByte = GDreadRam();
 8000b98:	f7ff ffe4 	bl	8000b64 <GDreadRam>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	4b03      	ldr	r3, [pc, #12]	@ (8000bb0 <GDread16bits+0x28>)
 8000ba2:	701a      	strb	r2, [r3, #0]
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	2000002b 	.word	0x2000002b
 8000bb0:	2000002c 	.word	0x2000002c

08000bb4 <GDtWrite>:

void GDtWrite(uint8_t *text, uint8_t row, uint8_t col) {
 8000bb4:	b5b0      	push	{r4, r5, r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	0008      	movs	r0, r1
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	1cfb      	adds	r3, r7, #3
 8000bc2:	1c02      	adds	r2, r0, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	1cbb      	adds	r3, r7, #2
 8000bc8:	1c0a      	adds	r2, r1, #0
 8000bca:	701a      	strb	r2, [r3, #0]
    if (!*text) return;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d100      	bne.n	8000bd6 <GDtWrite+0x22>
 8000bd4:	e08b      	b.n	8000cee <GDtWrite+0x13a>
    if (row > 3) row = 3;
 8000bd6:	1cfb      	adds	r3, r7, #3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d902      	bls.n	8000be4 <GDtWrite+0x30>
 8000bde:	1cfb      	adds	r3, r7, #3
 8000be0:	2203      	movs	r2, #3
 8000be2:	701a      	strb	r2, [r3, #0]
    if (col > 15) col = 15;
 8000be4:	1cbb      	adds	r3, r7, #2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d902      	bls.n	8000bf2 <GDtWrite+0x3e>
 8000bec:	1cbb      	adds	r3, r7, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	701a      	strb	r2, [r3, #0]
    uint8_t addr = col >> 1;
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	1cba      	adds	r2, r7, #2
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	0852      	lsrs	r2, r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
    if (row & 0x01) addr += 16;
 8000bfe:	1cfb      	adds	r3, r7, #3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4013      	ands	r3, r2
 8000c06:	d004      	beq.n	8000c12 <GDtWrite+0x5e>
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	187a      	adds	r2, r7, r1
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	3210      	adds	r2, #16
 8000c10:	701a      	strb	r2, [r3, #0]
    if (row > 1) addr += 8;
 8000c12:	1cfb      	adds	r3, r7, #3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d905      	bls.n	8000c26 <GDtWrite+0x72>
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	18bb      	adds	r3, r7, r2
 8000c1e:	18ba      	adds	r2, r7, r2
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	3208      	adds	r2, #8
 8000c24:	701a      	strb	r2, [r3, #0]
    GDsetDDaddress(addr);
 8000c26:	240f      	movs	r4, #15
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff ff73 	bl	8000b18 <GDsetDDaddress>
    uint8_t c1;
    if (col & 0x01) {
 8000c32:	1cbb      	adds	r3, r7, #2
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2201      	movs	r2, #1
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d00e      	beq.n	8000c5a <GDtWrite+0xa6>
        GDreadRam();
 8000c3c:	f7ff ff92 	bl	8000b64 <GDreadRam>
        GDread16bits();
 8000c40:	f7ff ffa2 	bl	8000b88 <GDread16bits>
        c1 = GDleftByte;
 8000c44:	230e      	movs	r3, #14
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	4a2c      	ldr	r2, [pc, #176]	@ (8000cfc <GDtWrite+0x148>)
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	701a      	strb	r2, [r3, #0]
        GDsetDDaddress(addr);
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff ff60 	bl	8000b18 <GDsetDDaddress>
 8000c58:	e043      	b.n	8000ce2 <GDtWrite+0x12e>
    } else {
        c1 = *text++;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	220e      	movs	r2, #14
 8000c62:	18ba      	adds	r2, r7, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	7013      	strb	r3, [r2, #0]
    }
    while (addr < 32) {
 8000c68:	e03b      	b.n	8000ce2 <GDtWrite+0x12e>
        uint8_t c2 = *text;
 8000c6a:	240d      	movs	r4, #13
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	701a      	strb	r2, [r3, #0]
        if (!c2) {
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d113      	bne.n	8000ca4 <GDtWrite+0xf0>
            GDsetDDaddress(addr);
 8000c7c:	250f      	movs	r5, #15
 8000c7e:	197b      	adds	r3, r7, r5
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff ff48 	bl	8000b18 <GDsetDDaddress>
            GDreadRam();
 8000c88:	f7ff ff6c 	bl	8000b64 <GDreadRam>
            GDread16bits();
 8000c8c:	f7ff ff7c 	bl	8000b88 <GDread16bits>
            c2 = GDrightByte;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	4a1b      	ldr	r2, [pc, #108]	@ (8000d00 <GDtWrite+0x14c>)
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	701a      	strb	r2, [r3, #0]
            GDsetDDaddress(addr);
 8000c98:	197b      	adds	r3, r7, r5
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f7ff ff3b 	bl	8000b18 <GDsetDDaddress>
 8000ca2:	e002      	b.n	8000caa <GDtWrite+0xf6>
        } else {
            text++;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
        }
        GDramWrite(c1);
 8000caa:	240e      	movs	r4, #14
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff fe19 	bl	80008e8 <GDramWrite>
        GDramWrite(c2);
 8000cb6:	230d      	movs	r3, #13
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff fe13 	bl	80008e8 <GDramWrite>
        c1 = *text++;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	193a      	adds	r2, r7, r4
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	7013      	strb	r3, [r2, #0]
        if (!c1) break;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00d      	beq.n	8000cf2 <GDtWrite+0x13e>
        addr++;
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	3201      	adds	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
    while (addr < 32) {
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b1f      	cmp	r3, #31
 8000cea:	d9be      	bls.n	8000c6a <GDtWrite+0xb6>
 8000cec:	e002      	b.n	8000cf4 <GDtWrite+0x140>
    if (!*text) return;
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	e000      	b.n	8000cf4 <GDtWrite+0x140>
        if (!c1) break;
 8000cf2:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b004      	add	sp, #16
 8000cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	2000002b 	.word	0x2000002b
 8000d00:	2000002c 	.word	0x2000002c

08000d04 <GDtClear>:
        GDramWrite(GDleftByte);
        GDramWrite(GDrightByte);
    }
}

void GDtClear(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
    GDtWrite("  ", 0, 0);
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <GDtClear+0x3c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ff4f 	bl	8000bb4 <GDtWrite>
    for (uint8_t i = 0; i < 62; i++) {
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e007      	b.n	8000d2e <GDtClear+0x2a>
        GDramWrite(' ');
 8000d1e:	2020      	movs	r0, #32
 8000d20:	f7ff fde2 	bl	80008e8 <GDramWrite>
    for (uint8_t i = 0; i < 62; i++) {
 8000d24:	1dfb      	adds	r3, r7, #7
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	3201      	adds	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b3d      	cmp	r3, #61	@ 0x3d
 8000d34:	d9f3      	bls.n	8000d1e <GDtClear+0x1a>
    }
}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	08003280 	.word	0x08003280

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f000 fa3b 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f827 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d52:	f000 f8bb 	bl	8000ecc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d56:	f000 f86b 	bl	8000e30 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the LCD
      GDinit();
 8000d5a:	f7ff fe65 	bl	8000a28 <GDinit>

  // Clear the display
  GDtClear();
 8000d5e:	f7ff ffd1 	bl	8000d04 <GDtClear>

  // Print "Hello" on the first line, starting at column 0
  uint8_t text1[] = "Hello";
 8000d62:	2008      	movs	r0, #8
 8000d64:	183b      	adds	r3, r7, r0
 8000d66:	4a0c      	ldr	r2, [pc, #48]	@ (8000d98 <main+0x54>)
 8000d68:	6811      	ldr	r1, [r2, #0]
 8000d6a:	6019      	str	r1, [r3, #0]
 8000d6c:	8892      	ldrh	r2, [r2, #4]
 8000d6e:	809a      	strh	r2, [r3, #4]
  GDtWrite(text1, 0, 0);
 8000d70:	183b      	adds	r3, r7, r0
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff ff1c 	bl	8000bb4 <GDtWrite>

  // Print "World" on the second line, starting at column 0
  uint8_t text2[] = "World";
 8000d7c:	003b      	movs	r3, r7
 8000d7e:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <main+0x58>)
 8000d80:	6811      	ldr	r1, [r2, #0]
 8000d82:	6019      	str	r1, [r3, #0]
 8000d84:	8892      	ldrh	r2, [r2, #4]
 8000d86:	809a      	strh	r2, [r3, #4]
  GDtWrite(text2, 1, 0);
 8000d88:	003b      	movs	r3, r7
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff ff10 	bl	8000bb4 <GDtWrite>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	e7fd      	b.n	8000d94 <main+0x50>
 8000d98:	08003284 	.word	0x08003284
 8000d9c:	0800328c 	.word	0x0800328c

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b093      	sub	sp, #76	@ 0x4c
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	2410      	movs	r4, #16
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	0018      	movs	r0, r3
 8000dac:	2338      	movs	r3, #56	@ 0x38
 8000dae:	001a      	movs	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	f002 fa2d 	bl	8003210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db6:	003b      	movs	r3, r7
 8000db8:	0018      	movs	r0, r3
 8000dba:	2310      	movs	r3, #16
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f002 fa26 	bl	8003210 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc4:	2380      	movs	r3, #128	@ 0x80
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 fcf7 	bl	80017bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	2280      	movs	r2, #128	@ 0x80
 8000dd8:	0052      	lsls	r2, r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	2240      	movs	r2, #64	@ 0x40
 8000de6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	0018      	movs	r0, r3
 8000df2:	f000 fd2f 	bl	8001854 <HAL_RCC_OscConfig>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000dfa:	f000 f911 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfe:	003b      	movs	r3, r7
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e04:	003b      	movs	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e10:	003b      	movs	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e16:	003b      	movs	r3, r7
 8000e18:	2100      	movs	r1, #0
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f001 f834 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e24:	f000 f8fc 	bl	8001020 <Error_Handler>
  }
}
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b013      	add	sp, #76	@ 0x4c
 8000e2e:	bd90      	pop	{r4, r7, pc}

08000e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e36:	4a24      	ldr	r2, [pc, #144]	@ (8000ec8 <MX_USART2_UART_Init+0x98>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e3c:	22e1      	movs	r2, #225	@ 0xe1
 8000e3e:	0252      	lsls	r2, r2, #9
 8000e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e72:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f001 fb66 	bl	800254c <HAL_UART_Init>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e84:	f000 f8cc 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e88:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f002 f8df 	bl	8003050 <HAL_UARTEx_SetTxFifoThreshold>
 8000e92:	1e03      	subs	r3, r0, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e96:	f000 f8c3 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f002 f916 	bl	80030d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ea8:	f000 f8ba 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <MX_USART2_UART_Init+0x94>)
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f002 f894 	bl	8002fdc <HAL_UARTEx_DisableFifoMode>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000eb8:	f000 f8b2 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	20000030 	.word	0x20000030
 8000ec8:	40004400 	.word	0x40004400

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b08b      	sub	sp, #44	@ 0x2c
 8000ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	2414      	movs	r4, #20
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2314      	movs	r3, #20
 8000eda:	001a      	movs	r2, r3
 8000edc:	2100      	movs	r1, #0
 8000ede:	f002 f997 	bl	8003210 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000ee8:	2104      	movs	r1, #4
 8000eea:	430a      	orrs	r2, r1
 8000eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eee:	4b48      	ldr	r3, [pc, #288]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efa:	4b45      	ldr	r3, [pc, #276]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000efe:	4b44      	ldr	r3, [pc, #272]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000f00:	2120      	movs	r1, #32
 8000f02:	430a      	orrs	r2, r1
 8000f04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f06:	4b42      	ldr	r3, [pc, #264]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	4b3f      	ldr	r3, [pc, #252]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f16:	4b3e      	ldr	r3, [pc, #248]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000f18:	2101      	movs	r1, #1
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f22:	2201      	movs	r2, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b39      	ldr	r3, [pc, #228]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f2e:	4b38      	ldr	r3, [pc, #224]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000f30:	2102      	movs	r1, #2
 8000f32:	430a      	orrs	r2, r1
 8000f34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f36:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <MX_GPIO_Init+0x144>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|E_Pin|RW_Pin|DB5_Pin
 8000f42:	23fc      	movs	r3, #252	@ 0xfc
 8000f44:	00d9      	lsls	r1, r3, #3
 8000f46:	23a0      	movs	r3, #160	@ 0xa0
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f000 fc18 	bl	8001782 <HAL_GPIO_WritePin>
                          |DB6_Pin|DB0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|DB4_Pin|DB1_Pin|DB3_Pin
 8000f52:	4930      	ldr	r1, [pc, #192]	@ (8001014 <MX_GPIO_Init+0x148>)
 8000f54:	4b30      	ldr	r3, [pc, #192]	@ (8001018 <MX_GPIO_Init+0x14c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 fc12 	bl	8001782 <HAL_GPIO_WritePin>
                          |DB2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, GPIO_PIN_RESET);
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <MX_GPIO_Init+0x150>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fc0c 	bl	8001782 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	2220      	movs	r2, #32
 8000f6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	193b      	adds	r3, r7, r4
 8000f72:	2201      	movs	r2, #1
 8000f74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	2202      	movs	r2, #2
 8000f80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000f82:	193a      	adds	r2, r7, r4
 8000f84:	23a0      	movs	r3, #160	@ 0xa0
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 fa78 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin RW_Pin DB5_Pin DB6_Pin
                           DB0_Pin */
  GPIO_InitStruct.Pin = E_Pin|RW_Pin|DB5_Pin|DB6_Pin
 8000f90:	0021      	movs	r1, r4
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	22f8      	movs	r2, #248	@ 0xf8
 8000f96:	00d2      	lsls	r2, r2, #3
 8000f98:	601a      	str	r2, [r3, #0]
                          |DB0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	000c      	movs	r4, r1
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	193a      	adds	r2, r7, r4
 8000fb0:	23a0      	movs	r3, #160	@ 0xa0
 8000fb2:	05db      	lsls	r3, r3, #23
 8000fb4:	0011      	movs	r1, r2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 fa62 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin DB4_Pin DB1_Pin DB3_Pin
                           DB2_Pin */
  GPIO_InitStruct.Pin = RS_Pin|DB4_Pin|DB1_Pin|DB3_Pin
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <MX_GPIO_Init+0x148>)
 8000fc0:	601a      	str	r2, [r3, #0]
                          |DB2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	193b      	adds	r3, r7, r4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <MX_GPIO_Init+0x14c>)
 8000fd8:	0019      	movs	r1, r3
 8000fda:	0010      	movs	r0, r2
 8000fdc:	f000 fa50 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : DB7_Pin */
  GPIO_InitStruct.Pin = DB7_Pin;
 8000fe0:	0021      	movs	r1, r4
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2280      	movs	r2, #128	@ 0x80
 8000fe6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2201      	movs	r2, #1
 8000fec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DB7_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	4a07      	ldr	r2, [pc, #28]	@ (800101c <MX_GPIO_Init+0x150>)
 8000ffe:	0019      	movs	r1, r3
 8001000:	0010      	movs	r0, r2
 8001002:	f000 fa3d 	bl	8001480 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b00b      	add	sp, #44	@ 0x2c
 800100c:	bd90      	pop	{r4, r7, pc}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	40021000 	.word	0x40021000
 8001014:	00004039 	.word	0x00004039
 8001018:	50000400 	.word	0x50000400
 800101c:	50000800 	.word	0x50000800

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	e7fd      	b.n	8001028 <Error_Handler+0x8>

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	@ (8001070 <HAL_MspInit+0x44>)
 8001034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_MspInit+0x44>)
 8001038:	2101      	movs	r1, #1
 800103a:	430a      	orrs	r2, r1
 800103c:	641a      	str	r2, [r3, #64]	@ 0x40
 800103e:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <HAL_MspInit+0x44>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	2201      	movs	r2, #1
 8001044:	4013      	ands	r3, r2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_MspInit+0x44>)
 800104c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_MspInit+0x44>)
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	0549      	lsls	r1, r1, #21
 8001054:	430a      	orrs	r2, r1
 8001056:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001058:	4b05      	ldr	r3, [pc, #20]	@ (8001070 <HAL_MspInit+0x44>)
 800105a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	055b      	lsls	r3, r3, #21
 8001060:	4013      	ands	r3, r2
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b097      	sub	sp, #92	@ 0x5c
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	2344      	movs	r3, #68	@ 0x44
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	0018      	movs	r0, r3
 8001082:	2314      	movs	r3, #20
 8001084:	001a      	movs	r2, r3
 8001086:	2100      	movs	r1, #0
 8001088:	f002 f8c2 	bl	8003210 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800108c:	2410      	movs	r4, #16
 800108e:	193b      	adds	r3, r7, r4
 8001090:	0018      	movs	r0, r3
 8001092:	2334      	movs	r3, #52	@ 0x34
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f002 f8ba 	bl	8003210 <memset>
  if(huart->Instance==USART2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a22      	ldr	r2, [pc, #136]	@ (800112c <HAL_UART_MspInit+0xb8>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d13e      	bne.n	8001124 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	2202      	movs	r2, #2
 80010aa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	0018      	movs	r0, r3
 80010b6:	f001 f891 	bl	80021dc <HAL_RCCEx_PeriphCLKConfig>
 80010ba:	1e03      	subs	r3, r0, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010be:	f7ff ffaf 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <HAL_UART_MspInit+0xbc>)
 80010c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <HAL_UART_MspInit+0xbc>)
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	0289      	lsls	r1, r1, #10
 80010cc:	430a      	orrs	r2, r1
 80010ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <HAL_UART_MspInit+0xbc>)
 80010d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010d4:	2380      	movs	r3, #128	@ 0x80
 80010d6:	029b      	lsls	r3, r3, #10
 80010d8:	4013      	ands	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <HAL_UART_MspInit+0xbc>)
 80010e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <HAL_UART_MspInit+0xbc>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_UART_MspInit+0xbc>)
 80010ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ee:	2201      	movs	r2, #1
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80010f6:	2144      	movs	r1, #68	@ 0x44
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2202      	movs	r2, #2
 8001102:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2201      	movs	r2, #1
 8001108:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2201      	movs	r2, #1
 8001114:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	187a      	adds	r2, r7, r1
 8001118:	23a0      	movs	r3, #160	@ 0xa0
 800111a:	05db      	lsls	r3, r3, #23
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f9ae 	bl	8001480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001124:	46c0      	nop			@ (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b017      	add	sp, #92	@ 0x5c
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	40004400 	.word	0x40004400
 8001130:	40021000 	.word	0x40021000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	e7fd      	b.n	8001138 <NMI_Handler+0x4>

0800113c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001140:	46c0      	nop			@ (mov r8, r8)
 8001142:	e7fd      	b.n	8001140 <HardFault_Handler+0x4>

08001144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f89c 	bl	8001298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800116a:	46c0      	nop			@ (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001170:	480d      	ldr	r0, [pc, #52]	@ (80011a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001172:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001174:	f7ff fff7 	bl	8001166 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <LoopForever+0x6>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	@ (80011b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <LoopForever+0xe>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	@ (80011bc <LoopForever+0x16>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800119e:	f002 f83f 	bl	8003220 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011a2:	f7ff fdcf 	bl	8000d44 <main>

080011a6 <LoopForever>:

LoopForever:
  b LoopForever
 80011a6:	e7fe      	b.n	80011a6 <LoopForever>
  ldr   r0, =_estack
 80011a8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011b4:	0800332c 	.word	0x0800332c
  ldr r2, =_sbss
 80011b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011bc:	200000c8 	.word	0x200000c8

080011c0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_COMP_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_Init+0x3c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <HAL_Init+0x3c>)
 80011d6:	2180      	movs	r1, #128	@ 0x80
 80011d8:	0049      	lsls	r1, r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f810 	bl	8001204 <HAL_InitTick>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
 80011ee:	e001      	b.n	80011f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f7ff ff1c 	bl	800102c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001214:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_InitTick+0x88>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d02b      	beq.n	8001274 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800121c:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <HAL_InitTick+0x8c>)
 800121e:	681c      	ldr	r4, [r3, #0]
 8001220:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <HAL_InitTick+0x88>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	0019      	movs	r1, r3
 8001226:	23fa      	movs	r3, #250	@ 0xfa
 8001228:	0098      	lsls	r0, r3, #2
 800122a:	f7fe ff6b 	bl	8000104 <__udivsi3>
 800122e:	0003      	movs	r3, r0
 8001230:	0019      	movs	r1, r3
 8001232:	0020      	movs	r0, r4
 8001234:	f7fe ff66 	bl	8000104 <__udivsi3>
 8001238:	0003      	movs	r3, r0
 800123a:	0018      	movs	r0, r3
 800123c:	f000 f913 	bl	8001466 <HAL_SYSTICK_Config>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d112      	bne.n	800126a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b03      	cmp	r3, #3
 8001248:	d80a      	bhi.n	8001260 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	2301      	movs	r3, #1
 800124e:	425b      	negs	r3, r3
 8001250:	2200      	movs	r2, #0
 8001252:	0018      	movs	r0, r3
 8001254:	f000 f8f2 	bl	800143c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_InitTick+0x90>)
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e00d      	b.n	800127c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001260:	230f      	movs	r3, #15
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e008      	b.n	800127c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800126a:	230f      	movs	r3, #15
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	e003      	b.n	800127c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001274:	230f      	movs	r3, #15
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	2201      	movs	r2, #1
 800127a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800127c:	230f      	movs	r3, #15
 800127e:	18fb      	adds	r3, r7, r3
 8001280:	781b      	ldrb	r3, [r3, #0]
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b005      	add	sp, #20
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	20000008 	.word	0x20000008
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_IncTick+0x1c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	001a      	movs	r2, r3
 80012a2:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_IncTick+0x20>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	18d2      	adds	r2, r2, r3
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HAL_IncTick+0x20>)
 80012aa:	601a      	str	r2, [r3, #0]
}
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	20000008 	.word	0x20000008
 80012b8:	200000c4 	.word	0x200000c4

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b02      	ldr	r3, [pc, #8]	@ (80012cc <HAL_GetTick+0x10>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	200000c4 	.word	0x200000c4

080012d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff fff0 	bl	80012bc <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3301      	adds	r3, #1
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	001a      	movs	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	189b      	adds	r3, r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	f7ff ffe0 	bl	80012bc <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46c0      	nop			@ (mov r8, r8)
 800130c:	46bd      	mov	sp, r7
 800130e:	b004      	add	sp, #16
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	20000008 	.word	0x20000008

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	0002      	movs	r2, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b7f      	cmp	r3, #127	@ 0x7f
 800132c:	d828      	bhi.n	8001380 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800132e:	4a2f      	ldr	r2, [pc, #188]	@ (80013ec <__NVIC_SetPriority+0xd4>)
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b25b      	sxtb	r3, r3
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	33c0      	adds	r3, #192	@ 0xc0
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	589b      	ldr	r3, [r3, r2]
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	7812      	ldrb	r2, [r2, #0]
 8001342:	0011      	movs	r1, r2
 8001344:	2203      	movs	r2, #3
 8001346:	400a      	ands	r2, r1
 8001348:	00d2      	lsls	r2, r2, #3
 800134a:	21ff      	movs	r1, #255	@ 0xff
 800134c:	4091      	lsls	r1, r2
 800134e:	000a      	movs	r2, r1
 8001350:	43d2      	mvns	r2, r2
 8001352:	401a      	ands	r2, r3
 8001354:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	019b      	lsls	r3, r3, #6
 800135a:	22ff      	movs	r2, #255	@ 0xff
 800135c:	401a      	ands	r2, r3
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	0018      	movs	r0, r3
 8001364:	2303      	movs	r3, #3
 8001366:	4003      	ands	r3, r0
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800136c:	481f      	ldr	r0, [pc, #124]	@ (80013ec <__NVIC_SetPriority+0xd4>)
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b25b      	sxtb	r3, r3
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	430a      	orrs	r2, r1
 8001378:	33c0      	adds	r3, #192	@ 0xc0
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800137e:	e031      	b.n	80013e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001380:	4a1b      	ldr	r2, [pc, #108]	@ (80013f0 <__NVIC_SetPriority+0xd8>)
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	0019      	movs	r1, r3
 8001388:	230f      	movs	r3, #15
 800138a:	400b      	ands	r3, r1
 800138c:	3b08      	subs	r3, #8
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3306      	adds	r3, #6
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	18d3      	adds	r3, r2, r3
 8001396:	3304      	adds	r3, #4
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	1dfa      	adds	r2, r7, #7
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	0011      	movs	r1, r2
 80013a0:	2203      	movs	r2, #3
 80013a2:	400a      	ands	r2, r1
 80013a4:	00d2      	lsls	r2, r2, #3
 80013a6:	21ff      	movs	r1, #255	@ 0xff
 80013a8:	4091      	lsls	r1, r2
 80013aa:	000a      	movs	r2, r1
 80013ac:	43d2      	mvns	r2, r2
 80013ae:	401a      	ands	r2, r3
 80013b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	019b      	lsls	r3, r3, #6
 80013b6:	22ff      	movs	r2, #255	@ 0xff
 80013b8:	401a      	ands	r2, r3
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	0018      	movs	r0, r3
 80013c0:	2303      	movs	r3, #3
 80013c2:	4003      	ands	r3, r0
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c8:	4809      	ldr	r0, [pc, #36]	@ (80013f0 <__NVIC_SetPriority+0xd8>)
 80013ca:	1dfb      	adds	r3, r7, #7
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	001c      	movs	r4, r3
 80013d0:	230f      	movs	r3, #15
 80013d2:	4023      	ands	r3, r4
 80013d4:	3b08      	subs	r3, #8
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	430a      	orrs	r2, r1
 80013da:	3306      	adds	r3, #6
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	18c3      	adds	r3, r0, r3
 80013e0:	3304      	adds	r3, #4
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	46c0      	nop			@ (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b003      	add	sp, #12
 80013ea:	bd90      	pop	{r4, r7, pc}
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1e5a      	subs	r2, r3, #1
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	045b      	lsls	r3, r3, #17
 8001404:	429a      	cmp	r2, r3
 8001406:	d301      	bcc.n	800140c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001408:	2301      	movs	r3, #1
 800140a:	e010      	b.n	800142e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <SysTick_Config+0x44>)
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	3a01      	subs	r2, #1
 8001412:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001414:	2301      	movs	r3, #1
 8001416:	425b      	negs	r3, r3
 8001418:	2103      	movs	r1, #3
 800141a:	0018      	movs	r0, r3
 800141c:	f7ff ff7c 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <SysTick_Config+0x44>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <SysTick_Config+0x44>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	210f      	movs	r1, #15
 8001448:	187b      	adds	r3, r7, r1
 800144a:	1c02      	adds	r2, r0, #0
 800144c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	187b      	adds	r3, r7, r1
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b25b      	sxtb	r3, r3
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff ff5d 	bl	8001318 <__NVIC_SetPriority>
}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff ffbf 	bl	80013f4 <SysTick_Config>
 8001476:	0003      	movs	r3, r0
}
 8001478:	0018      	movs	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	b002      	add	sp, #8
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148e:	e147      	b.n	8001720 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2101      	movs	r1, #1
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4091      	lsls	r1, r2
 800149a:	000a      	movs	r2, r1
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d100      	bne.n	80014a8 <HAL_GPIO_Init+0x28>
 80014a6:	e138      	b.n	800171a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2203      	movs	r2, #3
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d005      	beq.n	80014c0 <HAL_GPIO_Init+0x40>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2203      	movs	r2, #3
 80014ba:	4013      	ands	r3, r2
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d130      	bne.n	8001522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	409a      	lsls	r2, r3
 80014ce:	0013      	movs	r3, r2
 80014d0:	43da      	mvns	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	409a      	lsls	r2, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014f6:	2201      	movs	r2, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	409a      	lsls	r2, r3
 80014fc:	0013      	movs	r3, r2
 80014fe:	43da      	mvns	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4013      	ands	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	2201      	movs	r2, #1
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2203      	movs	r2, #3
 8001528:	4013      	ands	r3, r2
 800152a:	2b03      	cmp	r3, #3
 800152c:	d017      	beq.n	800155e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	43da      	mvns	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	4013      	ands	r3, r2
 8001566:	2b02      	cmp	r3, #2
 8001568:	d123      	bne.n	80015b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	58d3      	ldr	r3, [r2, r3]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2207      	movs	r2, #7
 800157c:	4013      	ands	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	220f      	movs	r2, #15
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	43da      	mvns	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	691a      	ldr	r2, [r3, #16]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2107      	movs	r1, #7
 8001596:	400b      	ands	r3, r1
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	409a      	lsls	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	08da      	lsrs	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3208      	adds	r2, #8
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	6939      	ldr	r1, [r7, #16]
 80015b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	2203      	movs	r2, #3
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	43da      	mvns	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2203      	movs	r2, #3
 80015d0:	401a      	ands	r2, r3
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	23c0      	movs	r3, #192	@ 0xc0
 80015ec:	029b      	lsls	r3, r3, #10
 80015ee:	4013      	ands	r3, r2
 80015f0:	d100      	bne.n	80015f4 <HAL_GPIO_Init+0x174>
 80015f2:	e092      	b.n	800171a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015f4:	4a50      	ldr	r2, [pc, #320]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3318      	adds	r3, #24
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	589b      	ldr	r3, [r3, r2]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2203      	movs	r2, #3
 8001606:	4013      	ands	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	220f      	movs	r2, #15
 800160c:	409a      	lsls	r2, r3
 800160e:	0013      	movs	r3, r2
 8001610:	43da      	mvns	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	23a0      	movs	r3, #160	@ 0xa0
 800161c:	05db      	lsls	r3, r3, #23
 800161e:	429a      	cmp	r2, r3
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0x1ca>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a45      	ldr	r2, [pc, #276]	@ (800173c <HAL_GPIO_Init+0x2bc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00d      	beq.n	8001646 <HAL_GPIO_Init+0x1c6>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a44      	ldr	r2, [pc, #272]	@ (8001740 <HAL_GPIO_Init+0x2c0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x1c2>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a43      	ldr	r2, [pc, #268]	@ (8001744 <HAL_GPIO_Init+0x2c4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_GPIO_Init+0x1be>
 800163a:	2303      	movs	r3, #3
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x1cc>
 800163e:	2305      	movs	r3, #5
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x1cc>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x1cc>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x1cc>
 800164a:	2300      	movs	r3, #0
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	2103      	movs	r1, #3
 8001650:	400a      	ands	r2, r1
 8001652:	00d2      	lsls	r2, r2, #3
 8001654:	4093      	lsls	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800165c:	4936      	ldr	r1, [pc, #216]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3318      	adds	r3, #24
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166a:	4b33      	ldr	r3, [pc, #204]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43da      	mvns	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	2380      	movs	r3, #128	@ 0x80
 8001680:	035b      	lsls	r3, r3, #13
 8001682:	4013      	ands	r3, r2
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800168e:	4b2a      	ldr	r3, [pc, #168]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001694:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43da      	mvns	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	039b      	lsls	r3, r3, #14
 80016ac:	4013      	ands	r3, r2
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016be:	4a1e      	ldr	r2, [pc, #120]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 80016c0:	2384      	movs	r3, #132	@ 0x84
 80016c2:	58d3      	ldr	r3, [r2, r3]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43da      	mvns	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	029b      	lsls	r3, r3, #10
 80016d8:	4013      	ands	r3, r2
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e4:	4914      	ldr	r1, [pc, #80]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 80016e6:	2284      	movs	r2, #132	@ 0x84
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016ec:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 80016ee:	2380      	movs	r3, #128	@ 0x80
 80016f0:	58d3      	ldr	r3, [r2, r3]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43da      	mvns	r2, r3
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	025b      	lsls	r3, r3, #9
 8001706:	4013      	ands	r3, r2
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001712:	4909      	ldr	r1, [pc, #36]	@ (8001738 <HAL_GPIO_Init+0x2b8>)
 8001714:	2280      	movs	r2, #128	@ 0x80
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	40da      	lsrs	r2, r3
 8001728:	1e13      	subs	r3, r2, #0
 800172a:	d000      	beq.n	800172e <HAL_GPIO_Init+0x2ae>
 800172c:	e6b0      	b.n	8001490 <HAL_GPIO_Init+0x10>
  }
}
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	46c0      	nop			@ (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b006      	add	sp, #24
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021800 	.word	0x40021800
 800173c:	50000400 	.word	0x50000400
 8001740:	50000800 	.word	0x50000800
 8001744:	50000c00 	.word	0x50000c00

08001748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	000a      	movs	r2, r1
 8001752:	1cbb      	adds	r3, r7, #2
 8001754:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	1cba      	adds	r2, r7, #2
 800175c:	8812      	ldrh	r2, [r2, #0]
 800175e:	4013      	ands	r3, r2
 8001760:	d004      	beq.n	800176c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001762:	230f      	movs	r3, #15
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e003      	b.n	8001774 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800176c:	230f      	movs	r3, #15
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001774:	230f      	movs	r3, #15
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	781b      	ldrb	r3, [r3, #0]
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	0008      	movs	r0, r1
 800178c:	0011      	movs	r1, r2
 800178e:	1cbb      	adds	r3, r7, #2
 8001790:	1c02      	adds	r2, r0, #0
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	1c7b      	adds	r3, r7, #1
 8001796:	1c0a      	adds	r2, r1, #0
 8001798:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179a:	1c7b      	adds	r3, r7, #1
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d004      	beq.n	80017ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a2:	1cbb      	adds	r3, r7, #2
 80017a4:	881a      	ldrh	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017aa:	e003      	b.n	80017b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ac:	1cbb      	adds	r3, r7, #2
 80017ae:	881a      	ldrh	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017b4:	46c0      	nop			@ (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b002      	add	sp, #8
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80017c4:	4b19      	ldr	r3, [pc, #100]	@ (800182c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	2380      	movs	r3, #128	@ 0x80
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d11f      	bne.n	8001820 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80017e0:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	0013      	movs	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	189b      	adds	r3, r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4912      	ldr	r1, [pc, #72]	@ (8001838 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80017ee:	0018      	movs	r0, r3
 80017f0:	f7fe fc88 	bl	8000104 <__udivsi3>
 80017f4:	0003      	movs	r3, r0
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017fa:	e008      	b.n	800180e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3b01      	subs	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e001      	b.n	800180e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e009      	b.n	8001822 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800180e:	4b07      	ldr	r3, [pc, #28]	@ (800182c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	2380      	movs	r3, #128	@ 0x80
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	401a      	ands	r2, r3
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	429a      	cmp	r2, r3
 800181e:	d0ed      	beq.n	80017fc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b004      	add	sp, #16
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	40007000 	.word	0x40007000
 8001830:	fffff9ff 	.word	0xfffff9ff
 8001834:	20000000 	.word	0x20000000
 8001838:	000f4240 	.word	0x000f4240

0800183c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001840:	4b03      	ldr	r3, [pc, #12]	@ (8001850 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	23e0      	movs	r3, #224	@ 0xe0
 8001846:	01db      	lsls	r3, r3, #7
 8001848:	4013      	ands	r3, r2
}
 800184a:	0018      	movs	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e2fe      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	4013      	ands	r3, r2
 800186e:	d100      	bne.n	8001872 <HAL_RCC_OscConfig+0x1e>
 8001870:	e07c      	b.n	800196c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001872:	4bc3      	ldr	r3, [pc, #780]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2238      	movs	r2, #56	@ 0x38
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800187c:	4bc0      	ldr	r3, [pc, #768]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2203      	movs	r2, #3
 8001882:	4013      	ands	r3, r2
 8001884:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2b10      	cmp	r3, #16
 800188a:	d102      	bne.n	8001892 <HAL_RCC_OscConfig+0x3e>
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d002      	beq.n	8001898 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b08      	cmp	r3, #8
 8001896:	d10b      	bne.n	80018b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	4bb9      	ldr	r3, [pc, #740]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2380      	movs	r3, #128	@ 0x80
 800189e:	029b      	lsls	r3, r3, #10
 80018a0:	4013      	ands	r3, r2
 80018a2:	d062      	beq.n	800196a <HAL_RCC_OscConfig+0x116>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d15e      	bne.n	800196a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e2d9      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_OscConfig+0x78>
 80018bc:	4bb0      	ldr	r3, [pc, #704]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4baf      	ldr	r3, [pc, #700]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	0249      	lsls	r1, r1, #9
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e020      	b.n	800190e <HAL_RCC_OscConfig+0xba>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	23a0      	movs	r3, #160	@ 0xa0
 80018d2:	02db      	lsls	r3, r3, #11
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10e      	bne.n	80018f6 <HAL_RCC_OscConfig+0xa2>
 80018d8:	4ba9      	ldr	r3, [pc, #676]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4ba8      	ldr	r3, [pc, #672]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80018de:	2180      	movs	r1, #128	@ 0x80
 80018e0:	02c9      	lsls	r1, r1, #11
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	4ba6      	ldr	r3, [pc, #664]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4ba5      	ldr	r3, [pc, #660]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	2180      	movs	r1, #128	@ 0x80
 80018ee:	0249      	lsls	r1, r1, #9
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e00b      	b.n	800190e <HAL_RCC_OscConfig+0xba>
 80018f6:	4ba2      	ldr	r3, [pc, #648]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4ba1      	ldr	r3, [pc, #644]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80018fc:	49a1      	ldr	r1, [pc, #644]	@ (8001b84 <HAL_RCC_OscConfig+0x330>)
 80018fe:	400a      	ands	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	4b9f      	ldr	r3, [pc, #636]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4b9e      	ldr	r3, [pc, #632]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001908:	499f      	ldr	r1, [pc, #636]	@ (8001b88 <HAL_RCC_OscConfig+0x334>)
 800190a:	400a      	ands	r2, r1
 800190c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d014      	beq.n	8001940 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fcd1 	bl	80012bc <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff fccc 	bl	80012bc <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	@ 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e298      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001932:	4b93      	ldr	r3, [pc, #588]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	@ 0x80
 8001938:	029b      	lsls	r3, r3, #10
 800193a:	4013      	ands	r3, r2
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0xcc>
 800193e:	e015      	b.n	800196c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fcbc 	bl	80012bc <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194a:	f7ff fcb7 	bl	80012bc <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b64      	cmp	r3, #100	@ 0x64
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e283      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800195c:	4b88      	ldr	r3, [pc, #544]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	4013      	ands	r3, r2
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0xf6>
 8001968:	e000      	b.n	800196c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d100      	bne.n	8001978 <HAL_RCC_OscConfig+0x124>
 8001976:	e099      	b.n	8001aac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001978:	4b81      	ldr	r3, [pc, #516]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2238      	movs	r2, #56	@ 0x38
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001982:	4b7f      	ldr	r3, [pc, #508]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2203      	movs	r2, #3
 8001988:	4013      	ands	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b10      	cmp	r3, #16
 8001990:	d102      	bne.n	8001998 <HAL_RCC_OscConfig+0x144>
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d002      	beq.n	800199e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d135      	bne.n	8001a0a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199e:	4b78      	ldr	r3, [pc, #480]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4013      	ands	r3, r2
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x162>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e256      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b72      	ldr	r3, [pc, #456]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a74      	ldr	r2, [pc, #464]	@ (8001b8c <HAL_RCC_OscConfig+0x338>)
 80019bc:	4013      	ands	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	021a      	lsls	r2, r3, #8
 80019c6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d112      	bne.n	80019f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80019d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001b90 <HAL_RCC_OscConfig+0x33c>)
 80019d8:	4013      	ands	r3, r2
 80019da:	0019      	movs	r1, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	4b67      	ldr	r3, [pc, #412]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80019e2:	430a      	orrs	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80019e6:	4b66      	ldr	r3, [pc, #408]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	0adb      	lsrs	r3, r3, #11
 80019ec:	2207      	movs	r2, #7
 80019ee:	4013      	ands	r3, r2
 80019f0:	4a68      	ldr	r2, [pc, #416]	@ (8001b94 <HAL_RCC_OscConfig+0x340>)
 80019f2:	40da      	lsrs	r2, r3
 80019f4:	4b68      	ldr	r3, [pc, #416]	@ (8001b98 <HAL_RCC_OscConfig+0x344>)
 80019f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019f8:	4b68      	ldr	r3, [pc, #416]	@ (8001b9c <HAL_RCC_OscConfig+0x348>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff fc01 	bl	8001204 <HAL_InitTick>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d051      	beq.n	8001aaa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e22c      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d030      	beq.n	8001a74 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a12:	4b5b      	ldr	r3, [pc, #364]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5e      	ldr	r2, [pc, #376]	@ (8001b90 <HAL_RCC_OscConfig+0x33c>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	4b57      	ldr	r3, [pc, #348]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001a26:	4b56      	ldr	r3, [pc, #344]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b55      	ldr	r3, [pc, #340]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	2180      	movs	r1, #128	@ 0x80
 8001a2e:	0049      	lsls	r1, r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc42 	bl	80012bc <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fc3d 	bl	80012bc <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e209      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a50:	4b4b      	ldr	r3, [pc, #300]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b48      	ldr	r3, [pc, #288]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a4a      	ldr	r2, [pc, #296]	@ (8001b8c <HAL_RCC_OscConfig+0x338>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	0019      	movs	r1, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	021a      	lsls	r2, r3, #8
 8001a6c:	4b44      	ldr	r3, [pc, #272]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	e01b      	b.n	8001aac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001a74:	4b42      	ldr	r3, [pc, #264]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4b41      	ldr	r3, [pc, #260]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	4949      	ldr	r1, [pc, #292]	@ (8001ba0 <HAL_RCC_OscConfig+0x34c>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff fc1c 	bl	80012bc <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fc17 	bl	80012bc <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e1e3      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a9c:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	@ 0x80
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x236>
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aaa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d047      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ab6:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2238      	movs	r2, #56	@ 0x38
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b18      	cmp	r3, #24
 8001ac0:	d10a      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d03c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2f2>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d138      	bne.n	8001b46 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e1c5      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d019      	beq.n	8001b14 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ae0:	4b27      	ldr	r3, [pc, #156]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fbe6 	bl	80012bc <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af6:	f7ff fbe1 	bl	80012bc <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e1ad      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b08:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d0f1      	beq.n	8001af6 <HAL_RCC_OscConfig+0x2a2>
 8001b12:	e018      	b.n	8001b46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b14:	4b1a      	ldr	r3, [pc, #104]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b18:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	438a      	bics	r2, r1
 8001b1e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fbcc 	bl	80012bc <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7ff fbc7 	bl	80012bc <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e193      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b3c:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b40:	2202      	movs	r2, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1f1      	bne.n	8001b2a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d100      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2fe>
 8001b50:	e0c6      	b.n	8001ce0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b52:	231f      	movs	r3, #31
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2238      	movs	r2, #56	@ 0x38
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b20      	cmp	r3, #32
 8001b64:	d11e      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_RCC_OscConfig+0x32c>)
 8001b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <HAL_RCC_OscConfig+0x31e>
 8001b70:	e0b6      	b.n	8001ce0 <HAL_RCC_OscConfig+0x48c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d000      	beq.n	8001b7c <HAL_RCC_OscConfig+0x328>
 8001b7a:	e0b1      	b.n	8001ce0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e171      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
 8001b80:	40021000 	.word	0x40021000
 8001b84:	fffeffff 	.word	0xfffeffff
 8001b88:	fffbffff 	.word	0xfffbffff
 8001b8c:	ffff80ff 	.word	0xffff80ff
 8001b90:	ffffc7ff 	.word	0xffffc7ff
 8001b94:	00f42400 	.word	0x00f42400
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ba4:	4bb1      	ldr	r3, [pc, #708]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001ba6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ba8:	2380      	movs	r3, #128	@ 0x80
 8001baa:	055b      	lsls	r3, r3, #21
 8001bac:	4013      	ands	r3, r2
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x360>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x362>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d011      	beq.n	8001bde <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	4bac      	ldr	r3, [pc, #688]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001bbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bbe:	4bab      	ldr	r3, [pc, #684]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001bc0:	2180      	movs	r1, #128	@ 0x80
 8001bc2:	0549      	lsls	r1, r1, #21
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bc8:	4ba8      	ldr	r3, [pc, #672]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001bca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	055b      	lsls	r3, r3, #21
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001bd6:	231f      	movs	r3, #31
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bde:	4ba4      	ldr	r3, [pc, #656]	@ (8001e70 <HAL_RCC_OscConfig+0x61c>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	@ 0x80
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	d11a      	bne.n	8001c20 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bea:	4ba1      	ldr	r3, [pc, #644]	@ (8001e70 <HAL_RCC_OscConfig+0x61c>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	4ba0      	ldr	r3, [pc, #640]	@ (8001e70 <HAL_RCC_OscConfig+0x61c>)
 8001bf0:	2180      	movs	r1, #128	@ 0x80
 8001bf2:	0049      	lsls	r1, r1, #1
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fb60 	bl	80012bc <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c02:	f7ff fb5b 	bl	80012bc <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e127      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c14:	4b96      	ldr	r3, [pc, #600]	@ (8001e70 <HAL_RCC_OscConfig+0x61c>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3e2>
 8001c28:	4b90      	ldr	r3, [pc, #576]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c34:	e01c      	b.n	8001c70 <HAL_RCC_OscConfig+0x41c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x404>
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c42:	4b8a      	ldr	r3, [pc, #552]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c44:	2104      	movs	r1, #4
 8001c46:	430a      	orrs	r2, r1
 8001c48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c4a:	4b88      	ldr	r3, [pc, #544]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c4e:	4b87      	ldr	r3, [pc, #540]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	430a      	orrs	r2, r1
 8001c54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0x41c>
 8001c58:	4b84      	ldr	r3, [pc, #528]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c5c:	4b83      	ldr	r3, [pc, #524]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	438a      	bics	r2, r1
 8001c62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c64:	4b81      	ldr	r3, [pc, #516]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c68:	4b80      	ldr	r3, [pc, #512]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d014      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fb20 	bl	80012bc <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c80:	e009      	b.n	8001c96 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff fb1b 	bl	80012bc <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4a79      	ldr	r2, [pc, #484]	@ (8001e74 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e0e6      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c96:	4b75      	ldr	r3, [pc, #468]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x42e>
 8001ca0:	e013      	b.n	8001cca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fb0b 	bl	80012bc <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001caa:	e009      	b.n	8001cc0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7ff fb06 	bl	80012bc <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	4a6f      	ldr	r2, [pc, #444]	@ (8001e74 <HAL_RCC_OscConfig+0x620>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e0d1      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001cca:	231f      	movs	r3, #31
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cd4:	4b65      	ldr	r3, [pc, #404]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001cd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cd8:	4b64      	ldr	r3, [pc, #400]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001cda:	4967      	ldr	r1, [pc, #412]	@ (8001e78 <HAL_RCC_OscConfig+0x624>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d100      	bne.n	8001cea <HAL_RCC_OscConfig+0x496>
 8001ce8:	e0bb      	b.n	8001e62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cea:	4b60      	ldr	r3, [pc, #384]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2238      	movs	r2, #56	@ 0x38
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d100      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x4a4>
 8001cf6:	e07b      	b.n	8001df0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d156      	bne.n	8001dae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d00:	4b5a      	ldr	r3, [pc, #360]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001d06:	495d      	ldr	r1, [pc, #372]	@ (8001e7c <HAL_RCC_OscConfig+0x628>)
 8001d08:	400a      	ands	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fad6 	bl	80012bc <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff fad1 	bl	80012bc <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e09d      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	4b50      	ldr	r3, [pc, #320]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	049b      	lsls	r3, r3, #18
 8001d30:	4013      	ands	r3, r2
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d34:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4a51      	ldr	r2, [pc, #324]	@ (8001e80 <HAL_RCC_OscConfig+0x62c>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1a      	ldr	r2, [r3, #32]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d60:	431a      	orrs	r2, r3
 8001d62:	4b42      	ldr	r3, [pc, #264]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b40      	ldr	r3, [pc, #256]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001d6e:	2180      	movs	r1, #128	@ 0x80
 8001d70:	0449      	lsls	r1, r1, #17
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001d76:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001d7c:	2180      	movs	r1, #128	@ 0x80
 8001d7e:	0549      	lsls	r1, r1, #21
 8001d80:	430a      	orrs	r2, r1
 8001d82:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff fa9a 	bl	80012bc <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff fa95 	bl	80012bc <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e061      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da0:	4b32      	ldr	r3, [pc, #200]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	049b      	lsls	r3, r3, #18
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x53a>
 8001dac:	e059      	b.n	8001e62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001db4:	4931      	ldr	r1, [pc, #196]	@ (8001e7c <HAL_RCC_OscConfig+0x628>)
 8001db6:	400a      	ands	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff fa7f 	bl	80012bc <HAL_GetTick>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff fa7a 	bl	80012bc <HAL_GetTick>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e046      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd6:	4b25      	ldr	r3, [pc, #148]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	@ 0x80
 8001ddc:	049b      	lsls	r3, r3, #18
 8001dde:	4013      	ands	r3, r2
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001de2:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001de8:	4926      	ldr	r1, [pc, #152]	@ (8001e84 <HAL_RCC_OscConfig+0x630>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	e038      	b.n	8001e62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e033      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e6c <HAL_RCC_OscConfig+0x618>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2203      	movs	r2, #3
 8001e06:	401a      	ands	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d126      	bne.n	8001e5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2270      	movs	r2, #112	@ 0x70
 8001e14:	401a      	ands	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d11f      	bne.n	8001e5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	23fe      	movs	r3, #254	@ 0xfe
 8001e22:	01db      	lsls	r3, r3, #7
 8001e24:	401a      	ands	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d116      	bne.n	8001e5e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	23f8      	movs	r3, #248	@ 0xf8
 8001e34:	039b      	lsls	r3, r3, #14
 8001e36:	401a      	ands	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d10e      	bne.n	8001e5e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	23e0      	movs	r3, #224	@ 0xe0
 8001e44:	051b      	lsls	r3, r3, #20
 8001e46:	401a      	ands	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	0f5b      	lsrs	r3, r3, #29
 8001e54:	075a      	lsls	r2, r3, #29
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	0018      	movs	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b008      	add	sp, #32
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	00001388 	.word	0x00001388
 8001e78:	efffffff 	.word	0xefffffff
 8001e7c:	feffffff 	.word	0xfeffffff
 8001e80:	11c1808c 	.word	0x11c1808c
 8001e84:	eefefffc 	.word	0xeefefffc

08001e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0e9      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b76      	ldr	r3, [pc, #472]	@ (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d91e      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b73      	ldr	r3, [pc, #460]	@ (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2207      	movs	r2, #7
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	4b70      	ldr	r3, [pc, #448]	@ (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ebc:	f7ff f9fe 	bl	80012bc <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ec4:	e009      	b.n	8001eda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec6:	f7ff f9f9 	bl	80012bc <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	4a6a      	ldr	r2, [pc, #424]	@ (800207c <HAL_RCC_ClockConfig+0x1f4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0ca      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eda:	4b67      	ldr	r3, [pc, #412]	@ (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2207      	movs	r2, #7
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1ee      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2202      	movs	r2, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d015      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d006      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001efc:	4b60      	ldr	r3, [pc, #384]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b5f      	ldr	r3, [pc, #380]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001f02:	21e0      	movs	r1, #224	@ 0xe0
 8001f04:	01c9      	lsls	r1, r1, #7
 8001f06:	430a      	orrs	r2, r1
 8001f08:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002084 <HAL_RCC_ClockConfig+0x1fc>)
 8001f10:	4013      	ands	r3, r2
 8001f12:	0019      	movs	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	4b59      	ldr	r3, [pc, #356]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	4013      	ands	r3, r2
 8001f26:	d057      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f30:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	029b      	lsls	r3, r3, #10
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d12b      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e097      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f48:	4b4d      	ldr	r3, [pc, #308]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	2380      	movs	r3, #128	@ 0x80
 8001f4e:	049b      	lsls	r3, r3, #18
 8001f50:	4013      	ands	r3, r2
 8001f52:	d11f      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e08b      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f60:	4b47      	ldr	r3, [pc, #284]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d113      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e07f      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d106      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f78:	4b41      	ldr	r3, [pc, #260]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d108      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e074      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f86:	4b3e      	ldr	r3, [pc, #248]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e06d      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f94:	4b3a      	ldr	r3, [pc, #232]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2207      	movs	r2, #7
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	4b37      	ldr	r3, [pc, #220]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f988 	bl	80012bc <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb0:	e009      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb2:	f7ff f983 	bl	80012bc <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	@ (800207c <HAL_RCC_ClockConfig+0x1f4>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e054      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2238      	movs	r2, #56	@ 0x38
 8001fcc:	401a      	ands	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d1ec      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2207      	movs	r2, #7
 8001fde:	4013      	ands	r3, r2
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d21e      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2207      	movs	r2, #7
 8001fec:	4393      	bics	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ff8:	f7ff f960 	bl	80012bc <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002000:	e009      	b.n	8002016 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002002:	f7ff f95b 	bl	80012bc <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	4a1b      	ldr	r2, [pc, #108]	@ (800207c <HAL_RCC_ClockConfig+0x1f4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e02c      	b.n	8002070 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2207      	movs	r2, #7
 800201c:	4013      	ands	r3, r2
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d1ee      	bne.n	8002002 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2204      	movs	r2, #4
 800202a:	4013      	ands	r3, r2
 800202c:	d009      	beq.n	8002042 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800202e:	4b14      	ldr	r3, [pc, #80]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4a15      	ldr	r2, [pc, #84]	@ (8002088 <HAL_RCC_ClockConfig+0x200>)
 8002034:	4013      	ands	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 800203e:	430a      	orrs	r2, r1
 8002040:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002042:	f000 f829 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002046:	0001      	movs	r1, r0
 8002048:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <HAL_RCC_ClockConfig+0x1f8>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	220f      	movs	r2, #15
 8002050:	401a      	ands	r2, r3
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <HAL_RCC_ClockConfig+0x204>)
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	58d3      	ldr	r3, [r2, r3]
 8002058:	221f      	movs	r2, #31
 800205a:	4013      	ands	r3, r2
 800205c:	000a      	movs	r2, r1
 800205e:	40da      	lsrs	r2, r3
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_RCC_ClockConfig+0x208>)
 8002062:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_ClockConfig+0x20c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff f8cb 	bl	8001204 <HAL_InitTick>
 800206e:	0003      	movs	r3, r0
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b004      	add	sp, #16
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40022000 	.word	0x40022000
 800207c:	00001388 	.word	0x00001388
 8002080:	40021000 	.word	0x40021000
 8002084:	fffff0ff 	.word	0xfffff0ff
 8002088:	ffff8fff 	.word	0xffff8fff
 800208c:	08003294 	.word	0x08003294
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800209e:	4b3c      	ldr	r3, [pc, #240]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2238      	movs	r2, #56	@ 0x38
 80020a4:	4013      	ands	r3, r2
 80020a6:	d10f      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020a8:	4b39      	ldr	r3, [pc, #228]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	0adb      	lsrs	r3, r3, #11
 80020ae:	2207      	movs	r2, #7
 80020b0:	4013      	ands	r3, r2
 80020b2:	2201      	movs	r2, #1
 80020b4:	409a      	lsls	r2, r3
 80020b6:	0013      	movs	r3, r2
 80020b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	4835      	ldr	r0, [pc, #212]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020be:	f7fe f821 	bl	8000104 <__udivsi3>
 80020c2:	0003      	movs	r3, r0
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e05d      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c8:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2238      	movs	r2, #56	@ 0x38
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d102      	bne.n	80020da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020d4:	4b30      	ldr	r3, [pc, #192]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x100>)
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	e054      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020da:	4b2d      	ldr	r3, [pc, #180]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2238      	movs	r2, #56	@ 0x38
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d138      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2203      	movs	r2, #3
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020f0:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	2207      	movs	r2, #7
 80020f8:	4013      	ands	r3, r2
 80020fa:	3301      	adds	r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d10d      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	4824      	ldr	r0, [pc, #144]	@ (8002198 <HAL_RCC_GetSysClockFreq+0x100>)
 8002108:	f7fd fffc 	bl	8000104 <__udivsi3>
 800210c:	0003      	movs	r3, r0
 800210e:	0019      	movs	r1, r3
 8002110:	4b1f      	ldr	r3, [pc, #124]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	227f      	movs	r2, #127	@ 0x7f
 8002118:	4013      	ands	r3, r2
 800211a:	434b      	muls	r3, r1
 800211c:	617b      	str	r3, [r7, #20]
        break;
 800211e:	e00d      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	481c      	ldr	r0, [pc, #112]	@ (8002194 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002124:	f7fd ffee 	bl	8000104 <__udivsi3>
 8002128:	0003      	movs	r3, r0
 800212a:	0019      	movs	r1, r3
 800212c:	4b18      	ldr	r3, [pc, #96]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	227f      	movs	r2, #127	@ 0x7f
 8002134:	4013      	ands	r3, r2
 8002136:	434b      	muls	r3, r1
 8002138:	617b      	str	r3, [r7, #20]
        break;
 800213a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800213c:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	0f5b      	lsrs	r3, r3, #29
 8002142:	2207      	movs	r2, #7
 8002144:	4013      	ands	r3, r2
 8002146:	3301      	adds	r3, #1
 8002148:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	6978      	ldr	r0, [r7, #20]
 800214e:	f7fd ffd9 	bl	8000104 <__udivsi3>
 8002152:	0003      	movs	r3, r0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	e015      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002158:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2238      	movs	r2, #56	@ 0x38
 800215e:	4013      	ands	r3, r2
 8002160:	2b20      	cmp	r3, #32
 8002162:	d103      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800216c:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <HAL_RCC_GetSysClockFreq+0xf8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2238      	movs	r2, #56	@ 0x38
 8002172:	4013      	ands	r3, r2
 8002174:	2b18      	cmp	r3, #24
 8002176:	d103      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002178:	23fa      	movs	r3, #250	@ 0xfa
 800217a:	01db      	lsls	r3, r3, #7
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e001      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002184:	693b      	ldr	r3, [r7, #16]
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b006      	add	sp, #24
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	40021000 	.word	0x40021000
 8002194:	00f42400 	.word	0x00f42400
 8002198:	007a1200 	.word	0x007a1200

0800219c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a0:	4b02      	ldr	r3, [pc, #8]	@ (80021ac <HAL_RCC_GetHCLKFreq+0x10>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	20000000 	.word	0x20000000

080021b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b0:	b5b0      	push	{r4, r5, r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80021b4:	f7ff fff2 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021b8:	0004      	movs	r4, r0
 80021ba:	f7ff fb3f 	bl	800183c <LL_RCC_GetAPB1Prescaler>
 80021be:	0003      	movs	r3, r0
 80021c0:	0b1a      	lsrs	r2, r3, #12
 80021c2:	4b05      	ldr	r3, [pc, #20]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021c4:	0092      	lsls	r2, r2, #2
 80021c6:	58d3      	ldr	r3, [r2, r3]
 80021c8:	221f      	movs	r2, #31
 80021ca:	4013      	ands	r3, r2
 80021cc:	40dc      	lsrs	r4, r3
 80021ce:	0023      	movs	r3, r4
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bdb0      	pop	{r4, r5, r7, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	080032d4 	.word	0x080032d4

080021dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80021e4:	2313      	movs	r3, #19
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021ec:	2312      	movs	r3, #18
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	029b      	lsls	r3, r3, #10
 80021fc:	4013      	ands	r3, r2
 80021fe:	d100      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002200:	e0a3      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2011      	movs	r0, #17
 8002204:	183b      	adds	r3, r7, r0
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4bc3      	ldr	r3, [pc, #780]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800220c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	055b      	lsls	r3, r3, #21
 8002212:	4013      	ands	r3, r2
 8002214:	d110      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4bc0      	ldr	r3, [pc, #768]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002218:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800221a:	4bbf      	ldr	r3, [pc, #764]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	0549      	lsls	r1, r1, #21
 8002220:	430a      	orrs	r2, r1
 8002222:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002224:	4bbc      	ldr	r3, [pc, #752]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002228:	2380      	movs	r3, #128	@ 0x80
 800222a:	055b      	lsls	r3, r3, #21
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002232:	183b      	adds	r3, r7, r0
 8002234:	2201      	movs	r2, #1
 8002236:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002238:	4bb8      	ldr	r3, [pc, #736]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4bb7      	ldr	r3, [pc, #732]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800223e:	2180      	movs	r1, #128	@ 0x80
 8002240:	0049      	lsls	r1, r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002246:	f7ff f839 	bl	80012bc <HAL_GetTick>
 800224a:	0003      	movs	r3, r0
 800224c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800224e:	e00b      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002250:	f7ff f834 	bl	80012bc <HAL_GetTick>
 8002254:	0002      	movs	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d904      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800225e:	2313      	movs	r3, #19
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2203      	movs	r2, #3
 8002264:	701a      	strb	r2, [r3, #0]
        break;
 8002266:	e005      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002268:	4bac      	ldr	r3, [pc, #688]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	@ 0x80
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4013      	ands	r3, r2
 8002272:	d0ed      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002274:	2313      	movs	r3, #19
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d154      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800227e:	4ba6      	ldr	r3, [pc, #664]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002280:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002282:	23c0      	movs	r3, #192	@ 0xc0
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4013      	ands	r3, r2
 8002288:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d019      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	429a      	cmp	r2, r3
 8002298:	d014      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800229a:	4b9f      	ldr	r3, [pc, #636]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	4aa0      	ldr	r2, [pc, #640]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022a8:	4b9b      	ldr	r3, [pc, #620]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022aa:	2180      	movs	r1, #128	@ 0x80
 80022ac:	0249      	lsls	r1, r1, #9
 80022ae:	430a      	orrs	r2, r1
 80022b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022b2:	4b99      	ldr	r3, [pc, #612]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022b6:	4b98      	ldr	r3, [pc, #608]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b8:	499a      	ldr	r1, [pc, #616]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022be:	4b96      	ldr	r3, [pc, #600]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d016      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe fff6 	bl	80012bc <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d4:	e00c      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d6:	f7fe fff1 	bl	80012bc <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	4a91      	ldr	r2, [pc, #580]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d904      	bls.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80022e6:	2313      	movs	r3, #19
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	2203      	movs	r2, #3
 80022ec:	701a      	strb	r2, [r3, #0]
            break;
 80022ee:	e004      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f0:	4b89      	ldr	r3, [pc, #548]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f4:	2202      	movs	r2, #2
 80022f6:	4013      	ands	r3, r2
 80022f8:	d0ed      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80022fa:	2313      	movs	r3, #19
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002304:	4b84      	ldr	r3, [pc, #528]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002308:	4a85      	ldr	r2, [pc, #532]	@ (8002520 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800230a:	4013      	ands	r3, r2
 800230c:	0019      	movs	r1, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002312:	4b81      	ldr	r3, [pc, #516]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002314:	430a      	orrs	r2, r1
 8002316:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002318:	e00c      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800231a:	2312      	movs	r3, #18
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2213      	movs	r2, #19
 8002320:	18ba      	adds	r2, r7, r2
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e005      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002328:	2312      	movs	r3, #18
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	2213      	movs	r2, #19
 800232e:	18ba      	adds	r2, r7, r2
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002334:	2311      	movs	r3, #17
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b76      	ldr	r3, [pc, #472]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002342:	4b75      	ldr	r3, [pc, #468]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002344:	4979      	ldr	r1, [pc, #484]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002346:	400a      	ands	r2, r1
 8002348:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d009      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002354:	4b70      	ldr	r3, [pc, #448]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002358:	2203      	movs	r2, #3
 800235a:	4393      	bics	r3, r2
 800235c:	0019      	movs	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	4b6d      	ldr	r3, [pc, #436]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002364:	430a      	orrs	r2, r1
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	d009      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002372:	4b69      	ldr	r3, [pc, #420]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	220c      	movs	r2, #12
 8002378:	4393      	bics	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	4b65      	ldr	r3, [pc, #404]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002382:	430a      	orrs	r2, r1
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2210      	movs	r2, #16
 800238c:	4013      	ands	r3, r2
 800238e:	d009      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002390:	4b61      	ldr	r3, [pc, #388]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002394:	4a66      	ldr	r2, [pc, #408]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002396:	4013      	ands	r3, r2
 8002398:	0019      	movs	r1, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	4b5e      	ldr	r3, [pc, #376]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a0:	430a      	orrs	r2, r1
 80023a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	d009      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023b0:	4b59      	ldr	r3, [pc, #356]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	4a5f      	ldr	r2, [pc, #380]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699a      	ldr	r2, [r3, #24]
 80023be:	4b56      	ldr	r3, [pc, #344]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c0:	430a      	orrs	r2, r1
 80023c2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	2380      	movs	r3, #128	@ 0x80
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4013      	ands	r3, r2
 80023ce:	d009      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023d0:	4b51      	ldr	r3, [pc, #324]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d4:	4a58      	ldr	r2, [pc, #352]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69da      	ldr	r2, [r3, #28]
 80023de:	4b4e      	ldr	r3, [pc, #312]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e0:	430a      	orrs	r2, r1
 80023e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2220      	movs	r2, #32
 80023ea:	4013      	ands	r3, r2
 80023ec:	d009      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f2:	4a52      	ldr	r2, [pc, #328]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	0019      	movs	r1, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	4b46      	ldr	r3, [pc, #280]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023fe:	430a      	orrs	r2, r1
 8002400:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	@ 0x80
 8002408:	01db      	lsls	r3, r3, #7
 800240a:	4013      	ands	r3, r2
 800240c:	d015      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800240e:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	0899      	lsrs	r1, r3, #2
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1a      	ldr	r2, [r3, #32]
 800241a:	4b3f      	ldr	r3, [pc, #252]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241c:	430a      	orrs	r2, r1
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1a      	ldr	r2, [r3, #32]
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	05db      	lsls	r3, r3, #23
 8002428:	429a      	cmp	r2, r3
 800242a:	d106      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800242c:	4b3a      	ldr	r3, [pc, #232]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	4b39      	ldr	r3, [pc, #228]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002432:	2180      	movs	r1, #128	@ 0x80
 8002434:	0249      	lsls	r1, r1, #9
 8002436:	430a      	orrs	r2, r1
 8002438:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	031b      	lsls	r3, r3, #12
 8002442:	4013      	ands	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002446:	4b34      	ldr	r3, [pc, #208]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244a:	2240      	movs	r2, #64	@ 0x40
 800244c:	4393      	bics	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002454:	4b30      	ldr	r3, [pc, #192]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002456:	430a      	orrs	r2, r1
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	039b      	lsls	r3, r3, #14
 8002462:	4013      	ands	r3, r2
 8002464:	d016      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002466:	4b2c      	ldr	r3, [pc, #176]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800246a:	4a35      	ldr	r2, [pc, #212]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800246c:	4013      	ands	r3, r2
 800246e:	0019      	movs	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002474:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002476:	430a      	orrs	r2, r1
 8002478:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	03db      	lsls	r3, r3, #15
 8002482:	429a      	cmp	r2, r3
 8002484:	d106      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800248c:	2180      	movs	r1, #128	@ 0x80
 800248e:	0449      	lsls	r1, r1, #17
 8002490:	430a      	orrs	r2, r1
 8002492:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	03db      	lsls	r3, r3, #15
 800249c:	4013      	ands	r3, r2
 800249e:	d016      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a4:	4a27      	ldr	r2, [pc, #156]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	045b      	lsls	r3, r3, #17
 80024bc:	429a      	cmp	r2, r3
 80024be:	d106      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80024c0:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	4b14      	ldr	r3, [pc, #80]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c6:	2180      	movs	r1, #128	@ 0x80
 80024c8:	0449      	lsls	r1, r1, #17
 80024ca:	430a      	orrs	r2, r1
 80024cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	4013      	ands	r3, r2
 80024d8:	d016      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80024da:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024de:	4a1a      	ldr	r2, [pc, #104]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	0019      	movs	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	01db      	lsls	r3, r3, #7
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d106      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80024fa:	4b07      	ldr	r3, [pc, #28]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002500:	2180      	movs	r1, #128	@ 0x80
 8002502:	0249      	lsls	r1, r1, #9
 8002504:	430a      	orrs	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002508:	2312      	movs	r3, #18
 800250a:	18fb      	adds	r3, r7, r3
 800250c:	781b      	ldrb	r3, [r3, #0]
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b006      	add	sp, #24
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	40021000 	.word	0x40021000
 800251c:	40007000 	.word	0x40007000
 8002520:	fffffcff 	.word	0xfffffcff
 8002524:	fffeffff 	.word	0xfffeffff
 8002528:	00001388 	.word	0x00001388
 800252c:	efffffff 	.word	0xefffffff
 8002530:	fffff3ff 	.word	0xfffff3ff
 8002534:	fff3ffff 	.word	0xfff3ffff
 8002538:	ffcfffff 	.word	0xffcfffff
 800253c:	ffffcfff 	.word	0xffffcfff
 8002540:	ffbfffff 	.word	0xffbfffff
 8002544:	feffffff 	.word	0xfeffffff
 8002548:	ffff3fff 	.word	0xffff3fff

0800254c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e046      	b.n	80025ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2288      	movs	r2, #136	@ 0x88
 8002562:	589b      	ldr	r3, [r3, r2]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2284      	movs	r2, #132	@ 0x84
 800256c:	2100      	movs	r1, #0
 800256e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	0018      	movs	r0, r3
 8002574:	f7fe fd7e 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2288      	movs	r2, #136	@ 0x88
 800257c:	2124      	movs	r1, #36	@ 0x24
 800257e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2101      	movs	r1, #1
 800258c:	438a      	bics	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	0018      	movs	r0, r3
 800259c:	f000 faea 	bl	8002b74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0018      	movs	r0, r3
 80025a4:	f000 f828 	bl	80025f8 <UART_SetConfig>
 80025a8:	0003      	movs	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e01c      	b.n	80025ec <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	490d      	ldr	r1, [pc, #52]	@ (80025f4 <HAL_UART_Init+0xa8>)
 80025be:	400a      	ands	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	212a      	movs	r1, #42	@ 0x2a
 80025ce:	438a      	bics	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 fb79 	bl	8002cdc <UART_CheckIdleState>
 80025ea:	0003      	movs	r3, r0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	ffffb7ff 	.word	0xffffb7ff

080025f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b090      	sub	sp, #64	@ 0x40
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002600:	231a      	movs	r3, #26
 8002602:	2220      	movs	r2, #32
 8002604:	189b      	adds	r3, r3, r2
 8002606:	19db      	adds	r3, r3, r7
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	431a      	orrs	r2, r3
 8002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	431a      	orrs	r2, r3
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	4313      	orrs	r3, r2
 8002622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4aaf      	ldr	r2, [pc, #700]	@ (80028e8 <UART_SetConfig+0x2f0>)
 800262c:	4013      	ands	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002636:	430b      	orrs	r3, r1
 8002638:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4aaa      	ldr	r2, [pc, #680]	@ (80028ec <UART_SetConfig+0x2f4>)
 8002642:	4013      	ands	r3, r2
 8002644:	0018      	movs	r0, r3
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	68d9      	ldr	r1, [r3, #12]
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	0003      	movs	r3, r0
 8002650:	430b      	orrs	r3, r1
 8002652:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4aa4      	ldr	r2, [pc, #656]	@ (80028f0 <UART_SetConfig+0x2f8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800266a:	4313      	orrs	r3, r2
 800266c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a9f      	ldr	r2, [pc, #636]	@ (80028f4 <UART_SetConfig+0x2fc>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002680:	430b      	orrs	r3, r1
 8002682:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	220f      	movs	r2, #15
 800268c:	4393      	bics	r3, r2
 800268e:	0018      	movs	r0, r3
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	0003      	movs	r3, r0
 800269a:	430b      	orrs	r3, r1
 800269c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800269e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a95      	ldr	r2, [pc, #596]	@ (80028f8 <UART_SetConfig+0x300>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d131      	bne.n	800270c <UART_SetConfig+0x114>
 80026a8:	4b94      	ldr	r3, [pc, #592]	@ (80028fc <UART_SetConfig+0x304>)
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	2203      	movs	r2, #3
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d01d      	beq.n	80026f0 <UART_SetConfig+0xf8>
 80026b4:	d823      	bhi.n	80026fe <UART_SetConfig+0x106>
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d00c      	beq.n	80026d4 <UART_SetConfig+0xdc>
 80026ba:	d820      	bhi.n	80026fe <UART_SetConfig+0x106>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <UART_SetConfig+0xce>
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d00e      	beq.n	80026e2 <UART_SetConfig+0xea>
 80026c4:	e01b      	b.n	80026fe <UART_SetConfig+0x106>
 80026c6:	231b      	movs	r3, #27
 80026c8:	2220      	movs	r2, #32
 80026ca:	189b      	adds	r3, r3, r2
 80026cc:	19db      	adds	r3, r3, r7
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
 80026d2:	e0b4      	b.n	800283e <UART_SetConfig+0x246>
 80026d4:	231b      	movs	r3, #27
 80026d6:	2220      	movs	r2, #32
 80026d8:	189b      	adds	r3, r3, r2
 80026da:	19db      	adds	r3, r3, r7
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e0ad      	b.n	800283e <UART_SetConfig+0x246>
 80026e2:	231b      	movs	r3, #27
 80026e4:	2220      	movs	r2, #32
 80026e6:	189b      	adds	r3, r3, r2
 80026e8:	19db      	adds	r3, r3, r7
 80026ea:	2204      	movs	r2, #4
 80026ec:	701a      	strb	r2, [r3, #0]
 80026ee:	e0a6      	b.n	800283e <UART_SetConfig+0x246>
 80026f0:	231b      	movs	r3, #27
 80026f2:	2220      	movs	r2, #32
 80026f4:	189b      	adds	r3, r3, r2
 80026f6:	19db      	adds	r3, r3, r7
 80026f8:	2208      	movs	r2, #8
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e09f      	b.n	800283e <UART_SetConfig+0x246>
 80026fe:	231b      	movs	r3, #27
 8002700:	2220      	movs	r2, #32
 8002702:	189b      	adds	r3, r3, r2
 8002704:	19db      	adds	r3, r3, r7
 8002706:	2210      	movs	r2, #16
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	e098      	b.n	800283e <UART_SetConfig+0x246>
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a7b      	ldr	r2, [pc, #492]	@ (8002900 <UART_SetConfig+0x308>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d131      	bne.n	800277a <UART_SetConfig+0x182>
 8002716:	4b79      	ldr	r3, [pc, #484]	@ (80028fc <UART_SetConfig+0x304>)
 8002718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271a:	220c      	movs	r2, #12
 800271c:	4013      	ands	r3, r2
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d01d      	beq.n	800275e <UART_SetConfig+0x166>
 8002722:	d823      	bhi.n	800276c <UART_SetConfig+0x174>
 8002724:	2b08      	cmp	r3, #8
 8002726:	d00c      	beq.n	8002742 <UART_SetConfig+0x14a>
 8002728:	d820      	bhi.n	800276c <UART_SetConfig+0x174>
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <UART_SetConfig+0x13c>
 800272e:	2b04      	cmp	r3, #4
 8002730:	d00e      	beq.n	8002750 <UART_SetConfig+0x158>
 8002732:	e01b      	b.n	800276c <UART_SetConfig+0x174>
 8002734:	231b      	movs	r3, #27
 8002736:	2220      	movs	r2, #32
 8002738:	189b      	adds	r3, r3, r2
 800273a:	19db      	adds	r3, r3, r7
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e07d      	b.n	800283e <UART_SetConfig+0x246>
 8002742:	231b      	movs	r3, #27
 8002744:	2220      	movs	r2, #32
 8002746:	189b      	adds	r3, r3, r2
 8002748:	19db      	adds	r3, r3, r7
 800274a:	2202      	movs	r2, #2
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e076      	b.n	800283e <UART_SetConfig+0x246>
 8002750:	231b      	movs	r3, #27
 8002752:	2220      	movs	r2, #32
 8002754:	189b      	adds	r3, r3, r2
 8002756:	19db      	adds	r3, r3, r7
 8002758:	2204      	movs	r2, #4
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e06f      	b.n	800283e <UART_SetConfig+0x246>
 800275e:	231b      	movs	r3, #27
 8002760:	2220      	movs	r2, #32
 8002762:	189b      	adds	r3, r3, r2
 8002764:	19db      	adds	r3, r3, r7
 8002766:	2208      	movs	r2, #8
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e068      	b.n	800283e <UART_SetConfig+0x246>
 800276c:	231b      	movs	r3, #27
 800276e:	2220      	movs	r2, #32
 8002770:	189b      	adds	r3, r3, r2
 8002772:	19db      	adds	r3, r3, r7
 8002774:	2210      	movs	r2, #16
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e061      	b.n	800283e <UART_SetConfig+0x246>
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a61      	ldr	r2, [pc, #388]	@ (8002904 <UART_SetConfig+0x30c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d106      	bne.n	8002792 <UART_SetConfig+0x19a>
 8002784:	231b      	movs	r3, #27
 8002786:	2220      	movs	r2, #32
 8002788:	189b      	adds	r3, r3, r2
 800278a:	19db      	adds	r3, r3, r7
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e055      	b.n	800283e <UART_SetConfig+0x246>
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5c      	ldr	r2, [pc, #368]	@ (8002908 <UART_SetConfig+0x310>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d106      	bne.n	80027aa <UART_SetConfig+0x1b2>
 800279c:	231b      	movs	r3, #27
 800279e:	2220      	movs	r2, #32
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	19db      	adds	r3, r3, r7
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e049      	b.n	800283e <UART_SetConfig+0x246>
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a50      	ldr	r2, [pc, #320]	@ (80028f0 <UART_SetConfig+0x2f8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d13e      	bne.n	8002832 <UART_SetConfig+0x23a>
 80027b4:	4b51      	ldr	r3, [pc, #324]	@ (80028fc <UART_SetConfig+0x304>)
 80027b6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027b8:	23c0      	movs	r3, #192	@ 0xc0
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4013      	ands	r3, r2
 80027be:	22c0      	movs	r2, #192	@ 0xc0
 80027c0:	0112      	lsls	r2, r2, #4
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d027      	beq.n	8002816 <UART_SetConfig+0x21e>
 80027c6:	22c0      	movs	r2, #192	@ 0xc0
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d82a      	bhi.n	8002824 <UART_SetConfig+0x22c>
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d011      	beq.n	80027fa <UART_SetConfig+0x202>
 80027d6:	2280      	movs	r2, #128	@ 0x80
 80027d8:	0112      	lsls	r2, r2, #4
 80027da:	4293      	cmp	r3, r2
 80027dc:	d822      	bhi.n	8002824 <UART_SetConfig+0x22c>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <UART_SetConfig+0x1f4>
 80027e2:	2280      	movs	r2, #128	@ 0x80
 80027e4:	00d2      	lsls	r2, r2, #3
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00e      	beq.n	8002808 <UART_SetConfig+0x210>
 80027ea:	e01b      	b.n	8002824 <UART_SetConfig+0x22c>
 80027ec:	231b      	movs	r3, #27
 80027ee:	2220      	movs	r2, #32
 80027f0:	189b      	adds	r3, r3, r2
 80027f2:	19db      	adds	r3, r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	701a      	strb	r2, [r3, #0]
 80027f8:	e021      	b.n	800283e <UART_SetConfig+0x246>
 80027fa:	231b      	movs	r3, #27
 80027fc:	2220      	movs	r2, #32
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	19db      	adds	r3, r3, r7
 8002802:	2202      	movs	r2, #2
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e01a      	b.n	800283e <UART_SetConfig+0x246>
 8002808:	231b      	movs	r3, #27
 800280a:	2220      	movs	r2, #32
 800280c:	189b      	adds	r3, r3, r2
 800280e:	19db      	adds	r3, r3, r7
 8002810:	2204      	movs	r2, #4
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e013      	b.n	800283e <UART_SetConfig+0x246>
 8002816:	231b      	movs	r3, #27
 8002818:	2220      	movs	r2, #32
 800281a:	189b      	adds	r3, r3, r2
 800281c:	19db      	adds	r3, r3, r7
 800281e:	2208      	movs	r2, #8
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e00c      	b.n	800283e <UART_SetConfig+0x246>
 8002824:	231b      	movs	r3, #27
 8002826:	2220      	movs	r2, #32
 8002828:	189b      	adds	r3, r3, r2
 800282a:	19db      	adds	r3, r3, r7
 800282c:	2210      	movs	r2, #16
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e005      	b.n	800283e <UART_SetConfig+0x246>
 8002832:	231b      	movs	r3, #27
 8002834:	2220      	movs	r2, #32
 8002836:	189b      	adds	r3, r3, r2
 8002838:	19db      	adds	r3, r3, r7
 800283a:	2210      	movs	r2, #16
 800283c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2b      	ldr	r2, [pc, #172]	@ (80028f0 <UART_SetConfig+0x2f8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d000      	beq.n	800284a <UART_SetConfig+0x252>
 8002848:	e0a9      	b.n	800299e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800284a:	231b      	movs	r3, #27
 800284c:	2220      	movs	r2, #32
 800284e:	189b      	adds	r3, r3, r2
 8002850:	19db      	adds	r3, r3, r7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b08      	cmp	r3, #8
 8002856:	d015      	beq.n	8002884 <UART_SetConfig+0x28c>
 8002858:	dc18      	bgt.n	800288c <UART_SetConfig+0x294>
 800285a:	2b04      	cmp	r3, #4
 800285c:	d00d      	beq.n	800287a <UART_SetConfig+0x282>
 800285e:	dc15      	bgt.n	800288c <UART_SetConfig+0x294>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <UART_SetConfig+0x272>
 8002864:	2b02      	cmp	r3, #2
 8002866:	d005      	beq.n	8002874 <UART_SetConfig+0x27c>
 8002868:	e010      	b.n	800288c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800286a:	f7ff fca1 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 800286e:	0003      	movs	r3, r0
 8002870:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002872:	e014      	b.n	800289e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002874:	4b25      	ldr	r3, [pc, #148]	@ (800290c <UART_SetConfig+0x314>)
 8002876:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002878:	e011      	b.n	800289e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800287a:	f7ff fc0d 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 800287e:	0003      	movs	r3, r0
 8002880:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002882:	e00c      	b.n	800289e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800288a:	e008      	b.n	800289e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002890:	231a      	movs	r3, #26
 8002892:	2220      	movs	r2, #32
 8002894:	189b      	adds	r3, r3, r2
 8002896:	19db      	adds	r3, r3, r7
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
        break;
 800289c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800289e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d100      	bne.n	80028a6 <UART_SetConfig+0x2ae>
 80028a4:	e14b      	b.n	8002b3e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028aa:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <UART_SetConfig+0x318>)
 80028ac:	0052      	lsls	r2, r2, #1
 80028ae:	5ad3      	ldrh	r3, [r2, r3]
 80028b0:	0019      	movs	r1, r3
 80028b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80028b4:	f7fd fc26 	bl	8000104 <__udivsi3>
 80028b8:	0003      	movs	r3, r0
 80028ba:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	0013      	movs	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	189b      	adds	r3, r3, r2
 80028c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d305      	bcc.n	80028d8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d91d      	bls.n	8002914 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80028d8:	231a      	movs	r3, #26
 80028da:	2220      	movs	r2, #32
 80028dc:	189b      	adds	r3, r3, r2
 80028de:	19db      	adds	r3, r3, r7
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e12b      	b.n	8002b3e <UART_SetConfig+0x546>
 80028e6:	46c0      	nop			@ (mov r8, r8)
 80028e8:	cfff69f3 	.word	0xcfff69f3
 80028ec:	ffffcfff 	.word	0xffffcfff
 80028f0:	40008000 	.word	0x40008000
 80028f4:	11fff4ff 	.word	0x11fff4ff
 80028f8:	40013800 	.word	0x40013800
 80028fc:	40021000 	.word	0x40021000
 8002900:	40004400 	.word	0x40004400
 8002904:	40004800 	.word	0x40004800
 8002908:	40004c00 	.word	0x40004c00
 800290c:	00f42400 	.word	0x00f42400
 8002910:	080032f4 	.word	0x080032f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002920:	4b92      	ldr	r3, [pc, #584]	@ (8002b6c <UART_SetConfig+0x574>)
 8002922:	0052      	lsls	r2, r2, #1
 8002924:	5ad3      	ldrh	r3, [r2, r3]
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	69b8      	ldr	r0, [r7, #24]
 8002932:	69f9      	ldr	r1, [r7, #28]
 8002934:	f7fd fd5c 	bl	80003f0 <__aeabi_uldivmod>
 8002938:	0002      	movs	r2, r0
 800293a:	000b      	movs	r3, r1
 800293c:	0e11      	lsrs	r1, r2, #24
 800293e:	021d      	lsls	r5, r3, #8
 8002940:	430d      	orrs	r5, r1
 8002942:	0214      	lsls	r4, r2, #8
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68b8      	ldr	r0, [r7, #8]
 8002952:	68f9      	ldr	r1, [r7, #12]
 8002954:	1900      	adds	r0, r0, r4
 8002956:	4169      	adcs	r1, r5
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	2300      	movs	r3, #0
 8002960:	607b      	str	r3, [r7, #4]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f7fd fd43 	bl	80003f0 <__aeabi_uldivmod>
 800296a:	0002      	movs	r2, r0
 800296c:	000b      	movs	r3, r1
 800296e:	0013      	movs	r3, r2
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002972:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002974:	23c0      	movs	r3, #192	@ 0xc0
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d309      	bcc.n	8002990 <UART_SetConfig+0x398>
 800297c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	035b      	lsls	r3, r3, #13
 8002982:	429a      	cmp	r2, r3
 8002984:	d204      	bcs.n	8002990 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	e0d6      	b.n	8002b3e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002990:	231a      	movs	r3, #26
 8002992:	2220      	movs	r2, #32
 8002994:	189b      	adds	r3, r3, r2
 8002996:	19db      	adds	r3, r3, r7
 8002998:	2201      	movs	r2, #1
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e0cf      	b.n	8002b3e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800299e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d000      	beq.n	80029ac <UART_SetConfig+0x3b4>
 80029aa:	e070      	b.n	8002a8e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80029ac:	231b      	movs	r3, #27
 80029ae:	2220      	movs	r2, #32
 80029b0:	189b      	adds	r3, r3, r2
 80029b2:	19db      	adds	r3, r3, r7
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d015      	beq.n	80029e6 <UART_SetConfig+0x3ee>
 80029ba:	dc18      	bgt.n	80029ee <UART_SetConfig+0x3f6>
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00d      	beq.n	80029dc <UART_SetConfig+0x3e4>
 80029c0:	dc15      	bgt.n	80029ee <UART_SetConfig+0x3f6>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <UART_SetConfig+0x3d4>
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d005      	beq.n	80029d6 <UART_SetConfig+0x3de>
 80029ca:	e010      	b.n	80029ee <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029cc:	f7ff fbf0 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 80029d0:	0003      	movs	r3, r0
 80029d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029d4:	e014      	b.n	8002a00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029d6:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <UART_SetConfig+0x578>)
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029da:	e011      	b.n	8002a00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029dc:	f7ff fb5c 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 80029e0:	0003      	movs	r3, r0
 80029e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029e4:	e00c      	b.n	8002a00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80029ec:	e008      	b.n	8002a00 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80029f2:	231a      	movs	r3, #26
 80029f4:	2220      	movs	r2, #32
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	19db      	adds	r3, r3, r7
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
        break;
 80029fe:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d100      	bne.n	8002a08 <UART_SetConfig+0x410>
 8002a06:	e09a      	b.n	8002b3e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a0c:	4b57      	ldr	r3, [pc, #348]	@ (8002b6c <UART_SetConfig+0x574>)
 8002a0e:	0052      	lsls	r2, r2, #1
 8002a10:	5ad3      	ldrh	r3, [r2, r3]
 8002a12:	0019      	movs	r1, r3
 8002a14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a16:	f7fd fb75 	bl	8000104 <__udivsi3>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	005a      	lsls	r2, r3, #1
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	18d2      	adds	r2, r2, r3
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	0010      	movs	r0, r2
 8002a2e:	f7fd fb69 	bl	8000104 <__udivsi3>
 8002a32:	0003      	movs	r3, r0
 8002a34:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a38:	2b0f      	cmp	r3, #15
 8002a3a:	d921      	bls.n	8002a80 <UART_SetConfig+0x488>
 8002a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a3e:	2380      	movs	r3, #128	@ 0x80
 8002a40:	025b      	lsls	r3, r3, #9
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d21c      	bcs.n	8002a80 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	200e      	movs	r0, #14
 8002a4c:	2420      	movs	r4, #32
 8002a4e:	1903      	adds	r3, r0, r4
 8002a50:	19db      	adds	r3, r3, r7
 8002a52:	210f      	movs	r1, #15
 8002a54:	438a      	bics	r2, r1
 8002a56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2207      	movs	r2, #7
 8002a60:	4013      	ands	r3, r2
 8002a62:	b299      	uxth	r1, r3
 8002a64:	1903      	adds	r3, r0, r4
 8002a66:	19db      	adds	r3, r3, r7
 8002a68:	1902      	adds	r2, r0, r4
 8002a6a:	19d2      	adds	r2, r2, r7
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	1902      	adds	r2, r0, r4
 8002a78:	19d2      	adds	r2, r2, r7
 8002a7a:	8812      	ldrh	r2, [r2, #0]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	e05e      	b.n	8002b3e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002a80:	231a      	movs	r3, #26
 8002a82:	2220      	movs	r2, #32
 8002a84:	189b      	adds	r3, r3, r2
 8002a86:	19db      	adds	r3, r3, r7
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e057      	b.n	8002b3e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a8e:	231b      	movs	r3, #27
 8002a90:	2220      	movs	r2, #32
 8002a92:	189b      	adds	r3, r3, r2
 8002a94:	19db      	adds	r3, r3, r7
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d015      	beq.n	8002ac8 <UART_SetConfig+0x4d0>
 8002a9c:	dc18      	bgt.n	8002ad0 <UART_SetConfig+0x4d8>
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d00d      	beq.n	8002abe <UART_SetConfig+0x4c6>
 8002aa2:	dc15      	bgt.n	8002ad0 <UART_SetConfig+0x4d8>
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <UART_SetConfig+0x4b6>
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d005      	beq.n	8002ab8 <UART_SetConfig+0x4c0>
 8002aac:	e010      	b.n	8002ad0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aae:	f7ff fb7f 	bl	80021b0 <HAL_RCC_GetPCLK1Freq>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ab6:	e014      	b.n	8002ae2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b70 <UART_SetConfig+0x578>)
 8002aba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002abc:	e011      	b.n	8002ae2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002abe:	f7ff faeb 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ac6:	e00c      	b.n	8002ae2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ace:	e008      	b.n	8002ae2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002ad4:	231a      	movs	r3, #26
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	189b      	adds	r3, r3, r2
 8002ada:	19db      	adds	r3, r3, r7
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
        break;
 8002ae0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d02a      	beq.n	8002b3e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aec:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <UART_SetConfig+0x574>)
 8002aee:	0052      	lsls	r2, r2, #1
 8002af0:	5ad3      	ldrh	r3, [r2, r3]
 8002af2:	0019      	movs	r1, r3
 8002af4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002af6:	f7fd fb05 	bl	8000104 <__udivsi3>
 8002afa:	0003      	movs	r3, r0
 8002afc:	001a      	movs	r2, r3
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	18d2      	adds	r2, r2, r3
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f7fd faf9 	bl	8000104 <__udivsi3>
 8002b12:	0003      	movs	r3, r0
 8002b14:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	2b0f      	cmp	r3, #15
 8002b1a:	d90a      	bls.n	8002b32 <UART_SetConfig+0x53a>
 8002b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	025b      	lsls	r3, r3, #9
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d205      	bcs.n	8002b32 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	60da      	str	r2, [r3, #12]
 8002b30:	e005      	b.n	8002b3e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002b32:	231a      	movs	r3, #26
 8002b34:	2220      	movs	r2, #32
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	19db      	adds	r3, r3, r7
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	226a      	movs	r2, #106	@ 0x6a
 8002b42:	2101      	movs	r1, #1
 8002b44:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	2268      	movs	r2, #104	@ 0x68
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	2200      	movs	r2, #0
 8002b52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	2200      	movs	r2, #0
 8002b58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002b5a:	231a      	movs	r3, #26
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	189b      	adds	r3, r3, r2
 8002b60:	19db      	adds	r3, r3, r7
 8002b62:	781b      	ldrb	r3, [r3, #0]
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b010      	add	sp, #64	@ 0x40
 8002b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6c:	080032f4 	.word	0x080032f4
 8002b70:	00f42400 	.word	0x00f42400

08002b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b80:	2208      	movs	r2, #8
 8002b82:	4013      	ands	r3, r2
 8002b84:	d00b      	beq.n	8002b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb8 <UART_AdvFeatureConfig+0x144>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d00b      	beq.n	8002bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a43      	ldr	r2, [pc, #268]	@ (8002cbc <UART_AdvFeatureConfig+0x148>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d00b      	beq.n	8002be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a3b      	ldr	r2, [pc, #236]	@ (8002cc0 <UART_AdvFeatureConfig+0x14c>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be6:	2204      	movs	r2, #4
 8002be8:	4013      	ands	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a34      	ldr	r2, [pc, #208]	@ (8002cc4 <UART_AdvFeatureConfig+0x150>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	2210      	movs	r2, #16
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d00b      	beq.n	8002c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc8 <UART_AdvFeatureConfig+0x154>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4a25      	ldr	r2, [pc, #148]	@ (8002ccc <UART_AdvFeatureConfig+0x158>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4c:	2240      	movs	r2, #64	@ 0x40
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd0 <UART_AdvFeatureConfig+0x15c>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c6e:	2380      	movs	r3, #128	@ 0x80
 8002c70:	035b      	lsls	r3, r3, #13
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d10b      	bne.n	8002c8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a15      	ldr	r2, [pc, #84]	@ (8002cd4 <UART_AdvFeatureConfig+0x160>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c92:	2280      	movs	r2, #128	@ 0x80
 8002c94:	4013      	ands	r3, r2
 8002c96:	d00b      	beq.n	8002cb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002cd8 <UART_AdvFeatureConfig+0x164>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }
}
 8002cb0:	46c0      	nop			@ (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	ffff7fff 	.word	0xffff7fff
 8002cbc:	fffdffff 	.word	0xfffdffff
 8002cc0:	fffeffff 	.word	0xfffeffff
 8002cc4:	fffbffff 	.word	0xfffbffff
 8002cc8:	ffffefff 	.word	0xffffefff
 8002ccc:	ffffdfff 	.word	0xffffdfff
 8002cd0:	ffefffff 	.word	0xffefffff
 8002cd4:	ff9fffff 	.word	0xff9fffff
 8002cd8:	fff7ffff 	.word	0xfff7ffff

08002cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b092      	sub	sp, #72	@ 0x48
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2290      	movs	r2, #144	@ 0x90
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cec:	f7fe fae6 	bl	80012bc <HAL_GetTick>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d12d      	bne.n	8002d5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d04:	2280      	movs	r2, #128	@ 0x80
 8002d06:	0391      	lsls	r1, r2, #14
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4a47      	ldr	r2, [pc, #284]	@ (8002e28 <UART_CheckIdleState+0x14c>)
 8002d0c:	9200      	str	r2, [sp, #0]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f000 f88e 	bl	8002e30 <UART_WaitOnFlagUntilTimeout>
 8002d14:	1e03      	subs	r3, r0, #0
 8002d16:	d022      	beq.n	8002d5e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d18:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002d20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d22:	2301      	movs	r3, #1
 8002d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d28:	f383 8810 	msr	PRIMASK, r3
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2180      	movs	r1, #128	@ 0x80
 8002d3a:	438a      	bics	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2288      	movs	r2, #136	@ 0x88
 8002d4e:	2120      	movs	r1, #32
 8002d50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2284      	movs	r2, #132	@ 0x84
 8002d56:	2100      	movs	r1, #0
 8002d58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e060      	b.n	8002e20 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2204      	movs	r2, #4
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d146      	bne.n	8002dfa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d6e:	2280      	movs	r2, #128	@ 0x80
 8002d70:	03d1      	lsls	r1, r2, #15
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4a2c      	ldr	r2, [pc, #176]	@ (8002e28 <UART_CheckIdleState+0x14c>)
 8002d76:	9200      	str	r2, [sp, #0]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f000 f859 	bl	8002e30 <UART_WaitOnFlagUntilTimeout>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d03b      	beq.n	8002dfa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d82:	f3ef 8310 	mrs	r3, PRIMASK
 8002d86:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d88:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f383 8810 	msr	PRIMASK, r3
}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4922      	ldr	r1, [pc, #136]	@ (8002e2c <UART_CheckIdleState+0x150>)
 8002da4:	400a      	ands	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002daa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f383 8810 	msr	PRIMASK, r3
}
 8002db2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db4:	f3ef 8310 	mrs	r3, PRIMASK
 8002db8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f383 8810 	msr	PRIMASK, r3
}
 8002dc8:	46c0      	nop			@ (mov r8, r8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	228c      	movs	r2, #140	@ 0x8c
 8002dea:	2120      	movs	r1, #32
 8002dec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2284      	movs	r2, #132	@ 0x84
 8002df2:	2100      	movs	r1, #0
 8002df4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e012      	b.n	8002e20 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2288      	movs	r2, #136	@ 0x88
 8002dfe:	2120      	movs	r1, #32
 8002e00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	228c      	movs	r2, #140	@ 0x8c
 8002e06:	2120      	movs	r1, #32
 8002e08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2284      	movs	r2, #132	@ 0x84
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b010      	add	sp, #64	@ 0x40
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	01ffffff 	.word	0x01ffffff
 8002e2c:	fffffedf 	.word	0xfffffedf

08002e30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	1dfb      	adds	r3, r7, #7
 8002e3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e40:	e051      	b.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3301      	adds	r3, #1
 8002e46:	d04e      	beq.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e48:	f7fe fa38 	bl	80012bc <HAL_GetTick>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d302      	bcc.n	8002e5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e051      	b.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d03b      	beq.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b80      	cmp	r3, #128	@ 0x80
 8002e72:	d038      	beq.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b40      	cmp	r3, #64	@ 0x40
 8002e78:	d035      	beq.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	2208      	movs	r2, #8
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d111      	bne.n	8002eac <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f000 f83c 	bl	8002f10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2290      	movs	r2, #144	@ 0x90
 8002e9c:	2108      	movs	r1, #8
 8002e9e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2284      	movs	r2, #132	@ 0x84
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e02c      	b.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d112      	bne.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2280      	movs	r2, #128	@ 0x80
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 f81f 	bl	8002f10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2290      	movs	r2, #144	@ 0x90
 8002ed6:	2120      	movs	r1, #32
 8002ed8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2284      	movs	r2, #132	@ 0x84
 8002ede:	2100      	movs	r1, #0
 8002ee0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e00f      	b.n	8002f06 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	4013      	ands	r3, r2
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	425a      	negs	r2, r3
 8002ef6:	4153      	adcs	r3, r2
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	001a      	movs	r2, r3
 8002efc:	1dfb      	adds	r3, r7, #7
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d09e      	beq.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	0018      	movs	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	b004      	add	sp, #16
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08e      	sub	sp, #56	@ 0x38
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f18:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8002f1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f22:	2301      	movs	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f383 8810 	msr	PRIMASK, r3
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4926      	ldr	r1, [pc, #152]	@ (8002fd4 <UART_EndRxTransfer+0xc4>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f383 8810 	msr	PRIMASK, r3
}
 8002f48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4e:	623b      	str	r3, [r7, #32]
  return(result);
 8002f50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f52:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f54:	2301      	movs	r3, #1
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	491b      	ldr	r1, [pc, #108]	@ (8002fd8 <UART_EndRxTransfer+0xc8>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d118      	bne.n	8002fb6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f84:	f3ef 8310 	mrs	r3, PRIMASK
 8002f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f8e:	2301      	movs	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f383 8810 	msr	PRIMASK, r3
}
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2110      	movs	r1, #16
 8002fa6:	438a      	bics	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f383 8810 	msr	PRIMASK, r3
}
 8002fb4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	228c      	movs	r2, #140	@ 0x8c
 8002fba:	2120      	movs	r1, #32
 8002fbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b00e      	add	sp, #56	@ 0x38
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	fffffedf 	.word	0xfffffedf
 8002fd8:	effffffe 	.word	0xeffffffe

08002fdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2284      	movs	r2, #132	@ 0x84
 8002fe8:	5c9b      	ldrb	r3, [r3, r2]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_UARTEx_DisableFifoMode+0x16>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e027      	b.n	8003042 <HAL_UARTEx_DisableFifoMode+0x66>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2284      	movs	r2, #132	@ 0x84
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2288      	movs	r2, #136	@ 0x88
 8002ffe:	2124      	movs	r1, #36	@ 0x24
 8003000:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	438a      	bics	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4a0b      	ldr	r2, [pc, #44]	@ (800304c <HAL_UARTEx_DisableFifoMode+0x70>)
 800301e:	4013      	ands	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2288      	movs	r2, #136	@ 0x88
 8003034:	2120      	movs	r1, #32
 8003036:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2284      	movs	r2, #132	@ 0x84
 800303c:	2100      	movs	r1, #0
 800303e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	0018      	movs	r0, r3
 8003044:	46bd      	mov	sp, r7
 8003046:	b004      	add	sp, #16
 8003048:	bd80      	pop	{r7, pc}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	dfffffff 	.word	0xdfffffff

08003050 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2284      	movs	r2, #132	@ 0x84
 800305e:	5c9b      	ldrb	r3, [r3, r2]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003064:	2302      	movs	r3, #2
 8003066:	e02e      	b.n	80030c6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2284      	movs	r2, #132	@ 0x84
 800306c:	2101      	movs	r1, #1
 800306e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2288      	movs	r2, #136	@ 0x88
 8003074:	2124      	movs	r1, #36	@ 0x24
 8003076:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2101      	movs	r1, #1
 800308c:	438a      	bics	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	08d9      	lsrs	r1, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 f854 	bl	8003154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2288      	movs	r2, #136	@ 0x88
 80030b8:	2120      	movs	r1, #32
 80030ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2284      	movs	r2, #132	@ 0x84
 80030c0:	2100      	movs	r1, #0
 80030c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	0018      	movs	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b004      	add	sp, #16
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2284      	movs	r2, #132	@ 0x84
 80030de:	5c9b      	ldrb	r3, [r3, r2]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e02f      	b.n	8003148 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2284      	movs	r2, #132	@ 0x84
 80030ec:	2101      	movs	r1, #1
 80030ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2288      	movs	r2, #136	@ 0x88
 80030f4:	2124      	movs	r1, #36	@ 0x24
 80030f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	438a      	bics	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4a0e      	ldr	r2, [pc, #56]	@ (8003150 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003118:	4013      	ands	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 f813 	bl	8003154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2288      	movs	r2, #136	@ 0x88
 800313a:	2120      	movs	r1, #32
 800313c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2284      	movs	r2, #132	@ 0x84
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b004      	add	sp, #16
 800314e:	bd80      	pop	{r7, pc}
 8003150:	f1ffffff 	.word	0xf1ffffff

08003154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003160:	2b00      	cmp	r3, #0
 8003162:	d108      	bne.n	8003176 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	226a      	movs	r2, #106	@ 0x6a
 8003168:	2101      	movs	r1, #1
 800316a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2268      	movs	r2, #104	@ 0x68
 8003170:	2101      	movs	r1, #1
 8003172:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003174:	e043      	b.n	80031fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003176:	260f      	movs	r6, #15
 8003178:	19bb      	adds	r3, r7, r6
 800317a:	2208      	movs	r2, #8
 800317c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800317e:	200e      	movs	r0, #14
 8003180:	183b      	adds	r3, r7, r0
 8003182:	2208      	movs	r2, #8
 8003184:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	0e5b      	lsrs	r3, r3, #25
 800318e:	b2da      	uxtb	r2, r3
 8003190:	240d      	movs	r4, #13
 8003192:	193b      	adds	r3, r7, r4
 8003194:	2107      	movs	r1, #7
 8003196:	400a      	ands	r2, r1
 8003198:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	0f5b      	lsrs	r3, r3, #29
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	250c      	movs	r5, #12
 80031a6:	197b      	adds	r3, r7, r5
 80031a8:	2107      	movs	r1, #7
 80031aa:	400a      	ands	r2, r1
 80031ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031ae:	183b      	adds	r3, r7, r0
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	197a      	adds	r2, r7, r5
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	4914      	ldr	r1, [pc, #80]	@ (8003208 <UARTEx_SetNbDataToProcess+0xb4>)
 80031b8:	5c8a      	ldrb	r2, [r1, r2]
 80031ba:	435a      	muls	r2, r3
 80031bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80031be:	197b      	adds	r3, r7, r5
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	4a12      	ldr	r2, [pc, #72]	@ (800320c <UARTEx_SetNbDataToProcess+0xb8>)
 80031c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80031c6:	0019      	movs	r1, r3
 80031c8:	f7fd f826 	bl	8000218 <__divsi3>
 80031cc:	0003      	movs	r3, r0
 80031ce:	b299      	uxth	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	226a      	movs	r2, #106	@ 0x6a
 80031d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031d6:	19bb      	adds	r3, r7, r6
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	193a      	adds	r2, r7, r4
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	490a      	ldr	r1, [pc, #40]	@ (8003208 <UARTEx_SetNbDataToProcess+0xb4>)
 80031e0:	5c8a      	ldrb	r2, [r1, r2]
 80031e2:	435a      	muls	r2, r3
 80031e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	4a08      	ldr	r2, [pc, #32]	@ (800320c <UARTEx_SetNbDataToProcess+0xb8>)
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80031ee:	0019      	movs	r1, r3
 80031f0:	f7fd f812 	bl	8000218 <__divsi3>
 80031f4:	0003      	movs	r3, r0
 80031f6:	b299      	uxth	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2268      	movs	r2, #104	@ 0x68
 80031fc:	5299      	strh	r1, [r3, r2]
}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b005      	add	sp, #20
 8003204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	0800330c 	.word	0x0800330c
 800320c:	08003314 	.word	0x08003314

08003210 <memset>:
 8003210:	0003      	movs	r3, r0
 8003212:	1882      	adds	r2, r0, r2
 8003214:	4293      	cmp	r3, r2
 8003216:	d100      	bne.n	800321a <memset+0xa>
 8003218:	4770      	bx	lr
 800321a:	7019      	strb	r1, [r3, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	e7f9      	b.n	8003214 <memset+0x4>

08003220 <__libc_init_array>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	2600      	movs	r6, #0
 8003224:	4c0c      	ldr	r4, [pc, #48]	@ (8003258 <__libc_init_array+0x38>)
 8003226:	4d0d      	ldr	r5, [pc, #52]	@ (800325c <__libc_init_array+0x3c>)
 8003228:	1b64      	subs	r4, r4, r5
 800322a:	10a4      	asrs	r4, r4, #2
 800322c:	42a6      	cmp	r6, r4
 800322e:	d109      	bne.n	8003244 <__libc_init_array+0x24>
 8003230:	2600      	movs	r6, #0
 8003232:	f000 f819 	bl	8003268 <_init>
 8003236:	4c0a      	ldr	r4, [pc, #40]	@ (8003260 <__libc_init_array+0x40>)
 8003238:	4d0a      	ldr	r5, [pc, #40]	@ (8003264 <__libc_init_array+0x44>)
 800323a:	1b64      	subs	r4, r4, r5
 800323c:	10a4      	asrs	r4, r4, #2
 800323e:	42a6      	cmp	r6, r4
 8003240:	d105      	bne.n	800324e <__libc_init_array+0x2e>
 8003242:	bd70      	pop	{r4, r5, r6, pc}
 8003244:	00b3      	lsls	r3, r6, #2
 8003246:	58eb      	ldr	r3, [r5, r3]
 8003248:	4798      	blx	r3
 800324a:	3601      	adds	r6, #1
 800324c:	e7ee      	b.n	800322c <__libc_init_array+0xc>
 800324e:	00b3      	lsls	r3, r6, #2
 8003250:	58eb      	ldr	r3, [r5, r3]
 8003252:	4798      	blx	r3
 8003254:	3601      	adds	r6, #1
 8003256:	e7f2      	b.n	800323e <__libc_init_array+0x1e>
 8003258:	08003324 	.word	0x08003324
 800325c:	08003324 	.word	0x08003324
 8003260:	08003328 	.word	0x08003328
 8003264:	08003324 	.word	0x08003324

08003268 <_init>:
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326e:	bc08      	pop	{r3}
 8003270:	469e      	mov	lr, r3
 8003272:	4770      	bx	lr

08003274 <_fini>:
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327a:	bc08      	pop	{r3}
 800327c:	469e      	mov	lr, r3
 800327e:	4770      	bx	lr
