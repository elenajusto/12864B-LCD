
12864B-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002a94  08002a94  00003a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b1c  08002b1c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b1c  08002b1c  00003b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b24  08002b24  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b24  08002b24  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b28  08002b28  00003b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b2c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002b38  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002b38  000040c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a953  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a49  00000000  00000000  0000e987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  000103d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000648  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000016b4  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae16  00000000  00000000  000128f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ee0  00000000  00000000  0001d70a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b05ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c2c  00000000  00000000  000b0630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b225c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002a7c 	.word	0x08002a7c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002a7c 	.word	0x08002a7c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fa1a 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f806 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f89a 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f84a 	bl	80006c4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	e7fd      	b.n	8000630 <main+0x14>

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b093      	sub	sp, #76	@ 0x4c
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	2410      	movs	r4, #16
 800063c:	193b      	adds	r3, r7, r4
 800063e:	0018      	movs	r0, r3
 8000640:	2338      	movs	r3, #56	@ 0x38
 8000642:	001a      	movs	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	f002 f9ed 	bl	8002a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064a:	003b      	movs	r3, r7
 800064c:	0018      	movs	r0, r3
 800064e:	2310      	movs	r3, #16
 8000650:	001a      	movs	r2, r3
 8000652:	2100      	movs	r1, #0
 8000654:	f002 f9e6 	bl	8002a24 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fcb7 	bl	8000fd0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2202      	movs	r2, #2
 8000666:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	193b      	adds	r3, r7, r4
 800066a:	2280      	movs	r2, #128	@ 0x80
 800066c:	0052      	lsls	r2, r2, #1
 800066e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000670:	193b      	adds	r3, r7, r4
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	193b      	adds	r3, r7, r4
 8000678:	2240      	movs	r2, #64	@ 0x40
 800067a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	193b      	adds	r3, r7, r4
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fcef 	bl	8001068 <HAL_RCC_OscConfig>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800068e:	f000 f911 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	003b      	movs	r3, r7
 8000694:	2207      	movs	r2, #7
 8000696:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000698:	003b      	movs	r3, r7
 800069a:	2200      	movs	r2, #0
 800069c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	003b      	movs	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006aa:	003b      	movs	r3, r7
 80006ac:	2100      	movs	r1, #0
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fff4 	bl	800169c <HAL_RCC_ClockConfig>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006b8:	f000 f8fc 	bl	80008b4 <Error_Handler>
  }
}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b013      	add	sp, #76	@ 0x4c
 80006c2:	bd90      	pop	{r4, r7, pc}

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006ca:	4a24      	ldr	r2, [pc, #144]	@ (800075c <MX_USART2_UART_Init+0x98>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006d0:	22e1      	movs	r2, #225	@ 0xe1
 80006d2:	0252      	lsls	r2, r2, #9
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b20      	ldr	r3, [pc, #128]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fb26 	bl	8001d60 <HAL_UART_Init>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000718:	f000 f8cc 	bl	80008b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071c:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 800071e:	2100      	movs	r1, #0
 8000720:	0018      	movs	r0, r3
 8000722:	f002 f89f 	bl	8002864 <HAL_UARTEx_SetTxFifoThreshold>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800072a:	f000 f8c3 	bl	80008b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f002 f8d6 	bl	80028e4 <HAL_UARTEx_SetRxFifoThreshold>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800073c:	f000 f8ba 	bl	80008b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000740:	4b05      	ldr	r3, [pc, #20]	@ (8000758 <MX_USART2_UART_Init+0x94>)
 8000742:	0018      	movs	r0, r3
 8000744:	f002 f854 	bl	80027f0 <HAL_UARTEx_DisableFifoMode>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800074c:	f000 f8b2 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			@ (mov r8, r8)
 8000758:	20000028 	.word	0x20000028
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b08b      	sub	sp, #44	@ 0x2c
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	2414      	movs	r4, #20
 8000768:	193b      	adds	r3, r7, r4
 800076a:	0018      	movs	r0, r3
 800076c:	2314      	movs	r3, #20
 800076e:	001a      	movs	r2, r3
 8000770:	2100      	movs	r1, #0
 8000772:	f002 f957 	bl	8002a24 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b4b      	ldr	r3, [pc, #300]	@ (80008a4 <MX_GPIO_Init+0x144>)
 8000778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800077a:	4b4a      	ldr	r3, [pc, #296]	@ (80008a4 <MX_GPIO_Init+0x144>)
 800077c:	2104      	movs	r1, #4
 800077e:	430a      	orrs	r2, r1
 8000780:	635a      	str	r2, [r3, #52]	@ 0x34
 8000782:	4b48      	ldr	r3, [pc, #288]	@ (80008a4 <MX_GPIO_Init+0x144>)
 8000784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000786:	2204      	movs	r2, #4
 8000788:	4013      	ands	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078e:	4b45      	ldr	r3, [pc, #276]	@ (80008a4 <MX_GPIO_Init+0x144>)
 8000790:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000792:	4b44      	ldr	r3, [pc, #272]	@ (80008a4 <MX_GPIO_Init+0x144>)
 8000794:	2120      	movs	r1, #32
 8000796:	430a      	orrs	r2, r1
 8000798:	635a      	str	r2, [r3, #52]	@ 0x34
 800079a:	4b42      	ldr	r3, [pc, #264]	@ (80008a4 <MX_GPIO_Init+0x144>)
 800079c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800079e:	2220      	movs	r2, #32
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b3f      	ldr	r3, [pc, #252]	@ (80008a4 <MX_GPIO_Init+0x144>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007aa:	4b3e      	ldr	r3, [pc, #248]	@ (80008a4 <MX_GPIO_Init+0x144>)
 80007ac:	2101      	movs	r1, #1
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007b2:	4b3c      	ldr	r3, [pc, #240]	@ (80008a4 <MX_GPIO_Init+0x144>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007b6:	2201      	movs	r2, #1
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b39      	ldr	r3, [pc, #228]	@ (80008a4 <MX_GPIO_Init+0x144>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c2:	4b38      	ldr	r3, [pc, #224]	@ (80008a4 <MX_GPIO_Init+0x144>)
 80007c4:	2102      	movs	r1, #2
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ca:	4b36      	ldr	r3, [pc, #216]	@ (80008a4 <MX_GPIO_Init+0x144>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ce:	2202      	movs	r2, #2
 80007d0:	4013      	ands	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|E_Pin|RW_Pin|DB5_Pin
 80007d6:	23fc      	movs	r3, #252	@ 0xfc
 80007d8:	00d9      	lsls	r1, r3, #3
 80007da:	23a0      	movs	r3, #160	@ 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2200      	movs	r2, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fbd7 	bl	8000f94 <HAL_GPIO_WritePin>
                          |DB6_Pin|DB0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|DB4_Pin|DB1_Pin|DB3_Pin
 80007e6:	4930      	ldr	r1, [pc, #192]	@ (80008a8 <MX_GPIO_Init+0x148>)
 80007e8:	4b30      	ldr	r3, [pc, #192]	@ (80008ac <MX_GPIO_Init+0x14c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fbd1 	bl	8000f94 <HAL_GPIO_WritePin>
                          |DB2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB7_GPIO_Port, DB7_Pin, GPIO_PIN_RESET);
 80007f2:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <MX_GPIO_Init+0x150>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	2180      	movs	r1, #128	@ 0x80
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fbcb 	bl	8000f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2220      	movs	r2, #32
 8000802:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2201      	movs	r2, #1
 8000808:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2202      	movs	r2, #2
 8000814:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000816:	193a      	adds	r2, r7, r4
 8000818:	23a0      	movs	r3, #160	@ 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fa54 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Pin RW_Pin DB5_Pin DB6_Pin
                           DB0_Pin */
  GPIO_InitStruct.Pin = E_Pin|RW_Pin|DB5_Pin|DB6_Pin
 8000824:	0021      	movs	r1, r4
 8000826:	187b      	adds	r3, r7, r1
 8000828:	22f8      	movs	r2, #248	@ 0xf8
 800082a:	00d2      	lsls	r2, r2, #3
 800082c:	601a      	str	r2, [r3, #0]
                          |DB0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	000c      	movs	r4, r1
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2201      	movs	r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	193a      	adds	r2, r7, r4
 8000844:	23a0      	movs	r3, #160	@ 0xa0
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fa3e 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin DB4_Pin DB1_Pin DB3_Pin
                           DB2_Pin */
  GPIO_InitStruct.Pin = RS_Pin|DB4_Pin|DB1_Pin|DB3_Pin
 8000850:	193b      	adds	r3, r7, r4
 8000852:	4a15      	ldr	r2, [pc, #84]	@ (80008a8 <MX_GPIO_Init+0x148>)
 8000854:	601a      	str	r2, [r3, #0]
                          |DB2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	193b      	adds	r3, r7, r4
 8000858:	2201      	movs	r2, #1
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	193b      	adds	r3, r7, r4
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	193b      	adds	r3, r7, r4
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <MX_GPIO_Init+0x14c>)
 800086c:	0019      	movs	r1, r3
 800086e:	0010      	movs	r0, r2
 8000870:	f000 fa2c 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : DB7_Pin */
  GPIO_InitStruct.Pin = DB7_Pin;
 8000874:	0021      	movs	r1, r4
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2201      	movs	r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DB7_GPIO_Port, &GPIO_InitStruct);
 800088e:	187b      	adds	r3, r7, r1
 8000890:	4a07      	ldr	r2, [pc, #28]	@ (80008b0 <MX_GPIO_Init+0x150>)
 8000892:	0019      	movs	r1, r3
 8000894:	0010      	movs	r0, r2
 8000896:	f000 fa19 	bl	8000ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b00b      	add	sp, #44	@ 0x2c
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	40021000 	.word	0x40021000
 80008a8:	00004039 	.word	0x00004039
 80008ac:	50000400 	.word	0x50000400
 80008b0:	50000800 	.word	0x50000800

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	e7fd      	b.n	80008bc <Error_Handler+0x8>

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <HAL_MspInit+0x44>)
 80008c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <HAL_MspInit+0x44>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	430a      	orrs	r2, r1
 80008d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <HAL_MspInit+0x44>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_MspInit+0x44>)
 80008e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <HAL_MspInit+0x44>)
 80008e4:	2180      	movs	r1, #128	@ 0x80
 80008e6:	0549      	lsls	r1, r1, #21
 80008e8:	430a      	orrs	r2, r1
 80008ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_MspInit+0x44>)
 80008ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008f0:	2380      	movs	r3, #128	@ 0x80
 80008f2:	055b      	lsls	r3, r3, #21
 80008f4:	4013      	ands	r3, r2
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b097      	sub	sp, #92	@ 0x5c
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	2344      	movs	r3, #68	@ 0x44
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	0018      	movs	r0, r3
 8000916:	2314      	movs	r3, #20
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f002 f882 	bl	8002a24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000920:	2410      	movs	r4, #16
 8000922:	193b      	adds	r3, r7, r4
 8000924:	0018      	movs	r0, r3
 8000926:	2334      	movs	r3, #52	@ 0x34
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f002 f87a 	bl	8002a24 <memset>
  if(huart->Instance==USART2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a22      	ldr	r2, [pc, #136]	@ (80009c0 <HAL_UART_MspInit+0xb8>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d13e      	bne.n	80009b8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2202      	movs	r2, #2
 800093e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000946:	193b      	adds	r3, r7, r4
 8000948:	0018      	movs	r0, r3
 800094a:	f001 f851 	bl	80019f0 <HAL_RCCEx_PeriphCLKConfig>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000952:	f7ff ffaf 	bl	80008b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000956:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <HAL_UART_MspInit+0xbc>)
 8000958:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <HAL_UART_MspInit+0xbc>)
 800095c:	2180      	movs	r1, #128	@ 0x80
 800095e:	0289      	lsls	r1, r1, #10
 8000960:	430a      	orrs	r2, r1
 8000962:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <HAL_UART_MspInit+0xbc>)
 8000966:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000968:	2380      	movs	r3, #128	@ 0x80
 800096a:	029b      	lsls	r3, r3, #10
 800096c:	4013      	ands	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <HAL_UART_MspInit+0xbc>)
 8000974:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000976:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <HAL_UART_MspInit+0xbc>)
 8000978:	2101      	movs	r1, #1
 800097a:	430a      	orrs	r2, r1
 800097c:	635a      	str	r2, [r3, #52]	@ 0x34
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <HAL_UART_MspInit+0xbc>)
 8000980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000982:	2201      	movs	r2, #1
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800098a:	2144      	movs	r1, #68	@ 0x44
 800098c:	187b      	adds	r3, r7, r1
 800098e:	220c      	movs	r2, #12
 8000990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2202      	movs	r2, #2
 8000996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2201      	movs	r2, #1
 800099c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2201      	movs	r2, #1
 80009a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	187a      	adds	r2, r7, r1
 80009ac:	23a0      	movs	r3, #160	@ 0xa0
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f98a 	bl	8000ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b017      	add	sp, #92	@ 0x5c
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f89c 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a08:	f7ff fff7 	bl	80009fa <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	@ (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a32:	f001 ffff 	bl	8002a34 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a36:	f7ff fdf1 	bl	800061c <main>

08000a3a <LoopForever>:

LoopForever:
  b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   r0, =_estack
 8000a3c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a48:	08002b2c 	.word	0x08002b2c
  ldr r2, =_sbss
 8000a4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a50:	200000c0 	.word	0x200000c0

08000a54 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_COMP_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <HAL_Init+0x3c>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <HAL_Init+0x3c>)
 8000a6a:	2180      	movs	r1, #128	@ 0x80
 8000a6c:	0049      	lsls	r1, r1, #1
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f810 	bl	8000a98 <HAL_InitTick>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e001      	b.n	8000a88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff ff1c 	bl	80008c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa0:	230f      	movs	r3, #15
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <HAL_InitTick+0x88>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d02b      	beq.n	8000b08 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <HAL_InitTick+0x8c>)
 8000ab2:	681c      	ldr	r4, [r3, #0]
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b20 <HAL_InitTick+0x88>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	0019      	movs	r1, r3
 8000aba:	23fa      	movs	r3, #250	@ 0xfa
 8000abc:	0098      	lsls	r0, r3, #2
 8000abe:	f7ff fb21 	bl	8000104 <__udivsi3>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f7ff fb1c 	bl	8000104 <__udivsi3>
 8000acc:	0003      	movs	r3, r0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f8ef 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d112      	bne.n	8000afe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d80a      	bhi.n	8000af4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	425b      	negs	r3, r3
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f8ce 	bl	8000c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_InitTick+0x90>)
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	e00d      	b.n	8000b10 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000af4:	230f      	movs	r3, #15
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e008      	b.n	8000b10 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afe:	230f      	movs	r3, #15
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	2201      	movs	r2, #1
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	e003      	b.n	8000b10 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b08:	230f      	movs	r3, #15
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b10:	230f      	movs	r3, #15
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	781b      	ldrb	r3, [r3, #0]
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b005      	add	sp, #20
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	20000008 	.word	0x20000008
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x1c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	001a      	movs	r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	18d2      	adds	r2, r2, r3
 8000b3c:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	200000bc 	.word	0x200000bc

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b02      	ldr	r3, [pc, #8]	@ (8000b60 <HAL_GetTick+0x10>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	200000bc 	.word	0x200000bc

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	0002      	movs	r2, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b78:	d828      	bhi.n	8000bcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c38 <__NVIC_SetPriority+0xd4>)
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	33c0      	adds	r3, #192	@ 0xc0
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	589b      	ldr	r3, [r3, r2]
 8000b8a:	1dfa      	adds	r2, r7, #7
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	0011      	movs	r1, r2
 8000b90:	2203      	movs	r2, #3
 8000b92:	400a      	ands	r2, r1
 8000b94:	00d2      	lsls	r2, r2, #3
 8000b96:	21ff      	movs	r1, #255	@ 0xff
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	000a      	movs	r2, r1
 8000b9c:	43d2      	mvns	r2, r2
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	019b      	lsls	r3, r3, #6
 8000ba6:	22ff      	movs	r2, #255	@ 0xff
 8000ba8:	401a      	ands	r2, r3
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	4003      	ands	r3, r0
 8000bb4:	00db      	lsls	r3, r3, #3
 8000bb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb8:	481f      	ldr	r0, [pc, #124]	@ (8000c38 <__NVIC_SetPriority+0xd4>)
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	33c0      	adds	r3, #192	@ 0xc0
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bca:	e031      	b.n	8000c30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c3c <__NVIC_SetPriority+0xd8>)
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	400b      	ands	r3, r1
 8000bd8:	3b08      	subs	r3, #8
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3306      	adds	r3, #6
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	3304      	adds	r3, #4
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	1dfa      	adds	r2, r7, #7
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	0011      	movs	r1, r2
 8000bec:	2203      	movs	r2, #3
 8000bee:	400a      	ands	r2, r1
 8000bf0:	00d2      	lsls	r2, r2, #3
 8000bf2:	21ff      	movs	r1, #255	@ 0xff
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	43d2      	mvns	r2, r2
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	019b      	lsls	r3, r3, #6
 8000c02:	22ff      	movs	r2, #255	@ 0xff
 8000c04:	401a      	ands	r2, r3
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	4003      	ands	r3, r0
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c14:	4809      	ldr	r0, [pc, #36]	@ (8000c3c <__NVIC_SetPriority+0xd8>)
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	001c      	movs	r4, r3
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	4023      	ands	r3, r4
 8000c20:	3b08      	subs	r3, #8
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	430a      	orrs	r2, r1
 8000c26:	3306      	adds	r3, #6
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	18c3      	adds	r3, r0, r3
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b003      	add	sp, #12
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	1e5a      	subs	r2, r3, #1
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	045b      	lsls	r3, r3, #17
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d301      	bcc.n	8000c58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c54:	2301      	movs	r3, #1
 8000c56:	e010      	b.n	8000c7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c58:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <SysTick_Config+0x44>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c60:	2301      	movs	r3, #1
 8000c62:	425b      	negs	r3, r3
 8000c64:	2103      	movs	r1, #3
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff ff7c 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <SysTick_Config+0x44>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <SysTick_Config+0x44>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	210f      	movs	r1, #15
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	1c02      	adds	r2, r0, #0
 8000c98:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff5d 	bl	8000b64 <__NVIC_SetPriority>
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b004      	add	sp, #16
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ffbf 	bl	8000c40 <SysTick_Config>
 8000cc2:	0003      	movs	r3, r0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cda:	e147      	b.n	8000f6c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d100      	bne.n	8000cf4 <HAL_GPIO_Init+0x28>
 8000cf2:	e138      	b.n	8000f66 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d005      	beq.n	8000d0c <HAL_GPIO_Init+0x40>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2203      	movs	r2, #3
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d130      	bne.n	8000d6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	43da      	mvns	r2, r3
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d42:	2201      	movs	r2, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	2201      	movs	r2, #1
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2203      	movs	r2, #3
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d017      	beq.n	8000daa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2203      	movs	r2, #3
 8000db0:	4013      	ands	r3, r2
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d123      	bne.n	8000dfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	58d3      	ldr	r3, [r2, r3]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	4013      	ands	r3, r2
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	409a      	lsls	r2, r3
 8000dd0:	0013      	movs	r3, r2
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	691a      	ldr	r2, [r3, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2107      	movs	r1, #7
 8000de2:	400b      	ands	r3, r1
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	409a      	lsls	r2, r3
 8000de8:	0013      	movs	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	08da      	lsrs	r2, r3, #3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3208      	adds	r2, #8
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	6939      	ldr	r1, [r7, #16]
 8000dfc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	23c0      	movs	r3, #192	@ 0xc0
 8000e38:	029b      	lsls	r3, r3, #10
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d100      	bne.n	8000e40 <HAL_GPIO_Init+0x174>
 8000e3e:	e092      	b.n	8000f66 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e40:	4a50      	ldr	r2, [pc, #320]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3318      	adds	r3, #24
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	589b      	ldr	r3, [r3, r2]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4013      	ands	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	220f      	movs	r2, #15
 8000e58:	409a      	lsls	r2, r3
 8000e5a:	0013      	movs	r3, r2
 8000e5c:	43da      	mvns	r2, r3
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	23a0      	movs	r3, #160	@ 0xa0
 8000e68:	05db      	lsls	r3, r3, #23
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x1ca>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a45      	ldr	r2, [pc, #276]	@ (8000f88 <HAL_GPIO_Init+0x2bc>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x1c6>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a44      	ldr	r2, [pc, #272]	@ (8000f8c <HAL_GPIO_Init+0x2c0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x1c2>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a43      	ldr	r2, [pc, #268]	@ (8000f90 <HAL_GPIO_Init+0x2c4>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x1be>
 8000e86:	2303      	movs	r3, #3
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x1cc>
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	e004      	b.n	8000e98 <HAL_GPIO_Init+0x1cc>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e002      	b.n	8000e98 <HAL_GPIO_Init+0x1cc>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <HAL_GPIO_Init+0x1cc>
 8000e96:	2300      	movs	r3, #0
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	00d2      	lsls	r2, r2, #3
 8000ea0:	4093      	lsls	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ea8:	4936      	ldr	r1, [pc, #216]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3318      	adds	r3, #24
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb6:	4b33      	ldr	r3, [pc, #204]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	2380      	movs	r3, #128	@ 0x80
 8000ecc:	035b      	lsls	r3, r3, #13
 8000ece:	4013      	ands	r3, r2
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eda:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ee0:	4b28      	ldr	r3, [pc, #160]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43da      	mvns	r2, r3
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	039b      	lsls	r3, r3, #14
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f04:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f0c:	2384      	movs	r3, #132	@ 0x84
 8000f0e:	58d3      	ldr	r3, [r2, r3]
 8000f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	43da      	mvns	r2, r3
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	2380      	movs	r3, #128	@ 0x80
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	4013      	ands	r3, r2
 8000f26:	d003      	beq.n	8000f30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f30:	4914      	ldr	r1, [pc, #80]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f32:	2284      	movs	r2, #132	@ 0x84
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f38:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	2380      	movs	r3, #128	@ 0x80
 8000f3c:	58d3      	ldr	r3, [r2, r3]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	2380      	movs	r3, #128	@ 0x80
 8000f50:	025b      	lsls	r3, r3, #9
 8000f52:	4013      	ands	r3, r2
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f5e:	4909      	ldr	r1, [pc, #36]	@ (8000f84 <HAL_GPIO_Init+0x2b8>)
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	40da      	lsrs	r2, r3
 8000f74:	1e13      	subs	r3, r2, #0
 8000f76:	d000      	beq.n	8000f7a <HAL_GPIO_Init+0x2ae>
 8000f78:	e6b0      	b.n	8000cdc <HAL_GPIO_Init+0x10>
  }
}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b006      	add	sp, #24
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021800 	.word	0x40021800
 8000f88:	50000400 	.word	0x50000400
 8000f8c:	50000800 	.word	0x50000800
 8000f90:	50000c00 	.word	0x50000c00

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	0008      	movs	r0, r1
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	1cbb      	adds	r3, r7, #2
 8000fa2:	1c02      	adds	r2, r0, #0
 8000fa4:	801a      	strh	r2, [r3, #0]
 8000fa6:	1c7b      	adds	r3, r7, #1
 8000fa8:	1c0a      	adds	r2, r1, #0
 8000faa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fac:	1c7b      	adds	r3, r7, #1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fb4:	1cbb      	adds	r3, r7, #2
 8000fb6:	881a      	ldrh	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fbc:	e003      	b.n	8000fc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fbe:	1cbb      	adds	r3, r7, #2
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b002      	add	sp, #8
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	@ (8001044 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000fde:	4013      	ands	r3, r2
 8000fe0:	0019      	movs	r1, r3
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d11f      	bne.n	8001034 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	189b      	adds	r3, r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4912      	ldr	r1, [pc, #72]	@ (800104c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff f87e 	bl	8000104 <__udivsi3>
 8001008:	0003      	movs	r3, r0
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800100e:	e008      	b.n	8001022 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	3b01      	subs	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e001      	b.n	8001022 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e009      	b.n	8001036 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	401a      	ands	r2, r3
 800102c:	2380      	movs	r3, #128	@ 0x80
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	429a      	cmp	r2, r3
 8001032:	d0ed      	beq.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b004      	add	sp, #16
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	40007000 	.word	0x40007000
 8001044:	fffff9ff 	.word	0xfffff9ff
 8001048:	20000000 	.word	0x20000000
 800104c:	000f4240 	.word	0x000f4240

08001050 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	23e0      	movs	r3, #224	@ 0xe0
 800105a:	01db      	lsls	r3, r3, #7
 800105c:	4013      	ands	r3, r2
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40021000 	.word	0x40021000

08001068 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e2fe      	b.n	8001678 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2201      	movs	r2, #1
 8001080:	4013      	ands	r3, r2
 8001082:	d100      	bne.n	8001086 <HAL_RCC_OscConfig+0x1e>
 8001084:	e07c      	b.n	8001180 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001086:	4bc3      	ldr	r3, [pc, #780]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	2238      	movs	r2, #56	@ 0x38
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001090:	4bc0      	ldr	r3, [pc, #768]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2203      	movs	r2, #3
 8001096:	4013      	ands	r3, r2
 8001098:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2b10      	cmp	r3, #16
 800109e:	d102      	bne.n	80010a6 <HAL_RCC_OscConfig+0x3e>
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d002      	beq.n	80010ac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d10b      	bne.n	80010c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ac:	4bb9      	ldr	r3, [pc, #740]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	2380      	movs	r3, #128	@ 0x80
 80010b2:	029b      	lsls	r3, r3, #10
 80010b4:	4013      	ands	r3, r2
 80010b6:	d062      	beq.n	800117e <HAL_RCC_OscConfig+0x116>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d15e      	bne.n	800117e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e2d9      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d107      	bne.n	80010e0 <HAL_RCC_OscConfig+0x78>
 80010d0:	4bb0      	ldr	r3, [pc, #704]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4baf      	ldr	r3, [pc, #700]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80010d6:	2180      	movs	r1, #128	@ 0x80
 80010d8:	0249      	lsls	r1, r1, #9
 80010da:	430a      	orrs	r2, r1
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e020      	b.n	8001122 <HAL_RCC_OscConfig+0xba>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	23a0      	movs	r3, #160	@ 0xa0
 80010e6:	02db      	lsls	r3, r3, #11
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d10e      	bne.n	800110a <HAL_RCC_OscConfig+0xa2>
 80010ec:	4ba9      	ldr	r3, [pc, #676]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4ba8      	ldr	r3, [pc, #672]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	2180      	movs	r1, #128	@ 0x80
 80010f4:	02c9      	lsls	r1, r1, #11
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	4ba6      	ldr	r3, [pc, #664]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4ba5      	ldr	r3, [pc, #660]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001100:	2180      	movs	r1, #128	@ 0x80
 8001102:	0249      	lsls	r1, r1, #9
 8001104:	430a      	orrs	r2, r1
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e00b      	b.n	8001122 <HAL_RCC_OscConfig+0xba>
 800110a:	4ba2      	ldr	r3, [pc, #648]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4ba1      	ldr	r3, [pc, #644]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001110:	49a1      	ldr	r1, [pc, #644]	@ (8001398 <HAL_RCC_OscConfig+0x330>)
 8001112:	400a      	ands	r2, r1
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	4b9f      	ldr	r3, [pc, #636]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	4b9e      	ldr	r3, [pc, #632]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800111c:	499f      	ldr	r1, [pc, #636]	@ (800139c <HAL_RCC_OscConfig+0x334>)
 800111e:	400a      	ands	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d014      	beq.n	8001154 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112a:	f7ff fd11 	bl	8000b50 <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fd0c 	bl	8000b50 <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	@ 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e298      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001146:	4b93      	ldr	r3, [pc, #588]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2380      	movs	r3, #128	@ 0x80
 800114c:	029b      	lsls	r3, r3, #10
 800114e:	4013      	ands	r3, r2
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0xcc>
 8001152:	e015      	b.n	8001180 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001154:	f7ff fcfc 	bl	8000b50 <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115e:	f7ff fcf7 	bl	8000b50 <HAL_GetTick>
 8001162:	0002      	movs	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b64      	cmp	r3, #100	@ 0x64
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e283      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001170:	4b88      	ldr	r3, [pc, #544]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2380      	movs	r3, #128	@ 0x80
 8001176:	029b      	lsls	r3, r3, #10
 8001178:	4013      	ands	r3, r2
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0xf6>
 800117c:	e000      	b.n	8001180 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2202      	movs	r2, #2
 8001186:	4013      	ands	r3, r2
 8001188:	d100      	bne.n	800118c <HAL_RCC_OscConfig+0x124>
 800118a:	e099      	b.n	80012c0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118c:	4b81      	ldr	r3, [pc, #516]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2238      	movs	r2, #56	@ 0x38
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001196:	4b7f      	ldr	r3, [pc, #508]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	d102      	bne.n	80011ac <HAL_RCC_OscConfig+0x144>
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d002      	beq.n	80011b2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d135      	bne.n	800121e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011b2:	4b78      	ldr	r3, [pc, #480]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	@ 0x80
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	4013      	ands	r3, r2
 80011bc:	d005      	beq.n	80011ca <HAL_RCC_OscConfig+0x162>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e256      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ca:	4b72      	ldr	r3, [pc, #456]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4a74      	ldr	r2, [pc, #464]	@ (80013a0 <HAL_RCC_OscConfig+0x338>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	0019      	movs	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	021a      	lsls	r2, r3, #8
 80011da:	4b6e      	ldr	r3, [pc, #440]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80011dc:	430a      	orrs	r2, r1
 80011de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d112      	bne.n	800120c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6e      	ldr	r2, [pc, #440]	@ (80013a4 <HAL_RCC_OscConfig+0x33c>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	0019      	movs	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	4b67      	ldr	r3, [pc, #412]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80011fa:	4b66      	ldr	r3, [pc, #408]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	0adb      	lsrs	r3, r3, #11
 8001200:	2207      	movs	r2, #7
 8001202:	4013      	ands	r3, r2
 8001204:	4a68      	ldr	r2, [pc, #416]	@ (80013a8 <HAL_RCC_OscConfig+0x340>)
 8001206:	40da      	lsrs	r2, r3
 8001208:	4b68      	ldr	r3, [pc, #416]	@ (80013ac <HAL_RCC_OscConfig+0x344>)
 800120a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800120c:	4b68      	ldr	r3, [pc, #416]	@ (80013b0 <HAL_RCC_OscConfig+0x348>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff fc41 	bl	8000a98 <HAL_InitTick>
 8001216:	1e03      	subs	r3, r0, #0
 8001218:	d051      	beq.n	80012be <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e22c      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d030      	beq.n	8001288 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001226:	4b5b      	ldr	r3, [pc, #364]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a5e      	ldr	r2, [pc, #376]	@ (80013a4 <HAL_RCC_OscConfig+0x33c>)
 800122c:	4013      	ands	r3, r2
 800122e:	0019      	movs	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	4b57      	ldr	r3, [pc, #348]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001236:	430a      	orrs	r2, r1
 8001238:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800123a:	4b56      	ldr	r3, [pc, #344]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b55      	ldr	r3, [pc, #340]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001240:	2180      	movs	r1, #128	@ 0x80
 8001242:	0049      	lsls	r1, r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fc82 	bl	8000b50 <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001252:	f7ff fc7d 	bl	8000b50 <HAL_GetTick>
 8001256:	0002      	movs	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e209      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001264:	4b4b      	ldr	r3, [pc, #300]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4013      	ands	r3, r2
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001270:	4b48      	ldr	r3, [pc, #288]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a4a      	ldr	r2, [pc, #296]	@ (80013a0 <HAL_RCC_OscConfig+0x338>)
 8001276:	4013      	ands	r3, r2
 8001278:	0019      	movs	r1, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	021a      	lsls	r2, r3, #8
 8001280:	4b44      	ldr	r3, [pc, #272]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001282:	430a      	orrs	r2, r1
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	e01b      	b.n	80012c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001288:	4b42      	ldr	r3, [pc, #264]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800128e:	4949      	ldr	r1, [pc, #292]	@ (80013b4 <HAL_RCC_OscConfig+0x34c>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fc5c 	bl	8000b50 <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fc57 	bl	8000b50 <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e1e3      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b0:	4b38      	ldr	r3, [pc, #224]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4013      	ands	r3, r2
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_OscConfig+0x236>
 80012bc:	e000      	b.n	80012c0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2208      	movs	r2, #8
 80012c6:	4013      	ands	r3, r2
 80012c8:	d047      	beq.n	800135a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80012ca:	4b32      	ldr	r3, [pc, #200]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2238      	movs	r2, #56	@ 0x38
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b18      	cmp	r3, #24
 80012d4:	d10a      	bne.n	80012ec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80012d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d03c      	beq.n	800135a <HAL_RCC_OscConfig+0x2f2>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d138      	bne.n	800135a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e1c5      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d019      	beq.n	8001328 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012f8:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	430a      	orrs	r2, r1
 80012fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fc26 	bl	8000b50 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800130a:	f7ff fc21 	bl	8000b50 <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e1ad      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800131e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001320:	2202      	movs	r2, #2
 8001322:	4013      	ands	r3, r2
 8001324:	d0f1      	beq.n	800130a <HAL_RCC_OscConfig+0x2a2>
 8001326:	e018      	b.n	800135a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800132a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800132c:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800132e:	2101      	movs	r1, #1
 8001330:	438a      	bics	r2, r1
 8001332:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fc0c 	bl	8000b50 <HAL_GetTick>
 8001338:	0003      	movs	r3, r0
 800133a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fc07 	bl	8000b50 <HAL_GetTick>
 8001342:	0002      	movs	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e193      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001354:	2202      	movs	r2, #2
 8001356:	4013      	ands	r3, r2
 8001358:	d1f1      	bne.n	800133e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2204      	movs	r2, #4
 8001360:	4013      	ands	r3, r2
 8001362:	d100      	bne.n	8001366 <HAL_RCC_OscConfig+0x2fe>
 8001364:	e0c6      	b.n	80014f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001366:	231f      	movs	r3, #31
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800136e:	4b09      	ldr	r3, [pc, #36]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2238      	movs	r2, #56	@ 0x38
 8001374:	4013      	ands	r3, r2
 8001376:	2b20      	cmp	r3, #32
 8001378:	d11e      	bne.n	80013b8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_RCC_OscConfig+0x32c>)
 800137c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137e:	2202      	movs	r2, #2
 8001380:	4013      	ands	r3, r2
 8001382:	d100      	bne.n	8001386 <HAL_RCC_OscConfig+0x31e>
 8001384:	e0b6      	b.n	80014f4 <HAL_RCC_OscConfig+0x48c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d000      	beq.n	8001390 <HAL_RCC_OscConfig+0x328>
 800138e:	e0b1      	b.n	80014f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e171      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
 8001394:	40021000 	.word	0x40021000
 8001398:	fffeffff 	.word	0xfffeffff
 800139c:	fffbffff 	.word	0xfffbffff
 80013a0:	ffff80ff 	.word	0xffff80ff
 80013a4:	ffffc7ff 	.word	0xffffc7ff
 80013a8:	00f42400 	.word	0x00f42400
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000004 	.word	0x20000004
 80013b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013b8:	4bb1      	ldr	r3, [pc, #708]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80013ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	055b      	lsls	r3, r3, #21
 80013c0:	4013      	ands	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_OscConfig+0x360>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <HAL_RCC_OscConfig+0x362>
 80013c8:	2300      	movs	r3, #0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d011      	beq.n	80013f2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4bac      	ldr	r3, [pc, #688]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80013d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013d2:	4bab      	ldr	r3, [pc, #684]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80013d4:	2180      	movs	r1, #128	@ 0x80
 80013d6:	0549      	lsls	r1, r1, #21
 80013d8:	430a      	orrs	r2, r1
 80013da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013dc:	4ba8      	ldr	r3, [pc, #672]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80013de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	055b      	lsls	r3, r3, #21
 80013e4:	4013      	ands	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80013ea:	231f      	movs	r3, #31
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	2201      	movs	r2, #1
 80013f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f2:	4ba4      	ldr	r3, [pc, #656]	@ (8001684 <HAL_RCC_OscConfig+0x61c>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	2380      	movs	r3, #128	@ 0x80
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4013      	ands	r3, r2
 80013fc:	d11a      	bne.n	8001434 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013fe:	4ba1      	ldr	r3, [pc, #644]	@ (8001684 <HAL_RCC_OscConfig+0x61c>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4ba0      	ldr	r3, [pc, #640]	@ (8001684 <HAL_RCC_OscConfig+0x61c>)
 8001404:	2180      	movs	r1, #128	@ 0x80
 8001406:	0049      	lsls	r1, r1, #1
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800140c:	f7ff fba0 	bl	8000b50 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001416:	f7ff fb9b 	bl	8000b50 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e127      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001428:	4b96      	ldr	r3, [pc, #600]	@ (8001684 <HAL_RCC_OscConfig+0x61c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4013      	ands	r3, r2
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x3e2>
 800143c:	4b90      	ldr	r3, [pc, #576]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 800143e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001440:	4b8f      	ldr	r3, [pc, #572]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001442:	2101      	movs	r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001448:	e01c      	b.n	8001484 <HAL_RCC_OscConfig+0x41c>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b05      	cmp	r3, #5
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x404>
 8001452:	4b8b      	ldr	r3, [pc, #556]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001454:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001456:	4b8a      	ldr	r3, [pc, #552]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001458:	2104      	movs	r1, #4
 800145a:	430a      	orrs	r2, r1
 800145c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800145e:	4b88      	ldr	r3, [pc, #544]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001460:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001462:	4b87      	ldr	r3, [pc, #540]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001464:	2101      	movs	r1, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	65da      	str	r2, [r3, #92]	@ 0x5c
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0x41c>
 800146c:	4b84      	ldr	r3, [pc, #528]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 800146e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001470:	4b83      	ldr	r3, [pc, #524]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001472:	2101      	movs	r1, #1
 8001474:	438a      	bics	r2, r1
 8001476:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001478:	4b81      	ldr	r3, [pc, #516]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 800147a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800147c:	4b80      	ldr	r3, [pc, #512]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 800147e:	2104      	movs	r1, #4
 8001480:	438a      	bics	r2, r1
 8001482:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d014      	beq.n	80014b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fb60 	bl	8000b50 <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001494:	e009      	b.n	80014aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff fb5b 	bl	8000b50 <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a79      	ldr	r2, [pc, #484]	@ (8001688 <HAL_RCC_OscConfig+0x620>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e0e6      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014aa:	4b75      	ldr	r3, [pc, #468]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80014ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ae:	2202      	movs	r2, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x42e>
 80014b4:	e013      	b.n	80014de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb4b 	bl	8000b50 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014be:	e009      	b.n	80014d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff fb46 	bl	8000b50 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001688 <HAL_RCC_OscConfig+0x620>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e0d1      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80014d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014d8:	2202      	movs	r2, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80014de:	231f      	movs	r3, #31
 80014e0:	18fb      	adds	r3, r7, r3
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80014e8:	4b65      	ldr	r3, [pc, #404]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80014ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014ec:	4b64      	ldr	r3, [pc, #400]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80014ee:	4967      	ldr	r1, [pc, #412]	@ (800168c <HAL_RCC_OscConfig+0x624>)
 80014f0:	400a      	ands	r2, r1
 80014f2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d100      	bne.n	80014fe <HAL_RCC_OscConfig+0x496>
 80014fc:	e0bb      	b.n	8001676 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014fe:	4b60      	ldr	r3, [pc, #384]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2238      	movs	r2, #56	@ 0x38
 8001504:	4013      	ands	r3, r2
 8001506:	2b10      	cmp	r3, #16
 8001508:	d100      	bne.n	800150c <HAL_RCC_OscConfig+0x4a4>
 800150a:	e07b      	b.n	8001604 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d156      	bne.n	80015c2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001514:	4b5a      	ldr	r3, [pc, #360]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b59      	ldr	r3, [pc, #356]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 800151a:	495d      	ldr	r1, [pc, #372]	@ (8001690 <HAL_RCC_OscConfig+0x628>)
 800151c:	400a      	ands	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fb16 	bl	8000b50 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff fb11 	bl	8000b50 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e09d      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800153c:	4b50      	ldr	r3, [pc, #320]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	@ 0x80
 8001542:	049b      	lsls	r3, r3, #18
 8001544:	4013      	ands	r3, r2
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001548:	4b4d      	ldr	r3, [pc, #308]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	4a51      	ldr	r2, [pc, #324]	@ (8001694 <HAL_RCC_OscConfig+0x62c>)
 800154e:	4013      	ands	r3, r2
 8001550:	0019      	movs	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	431a      	orrs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001574:	431a      	orrs	r2, r3
 8001576:	4b42      	ldr	r3, [pc, #264]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001578:	430a      	orrs	r2, r1
 800157a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800157c:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001582:	2180      	movs	r1, #128	@ 0x80
 8001584:	0449      	lsls	r1, r1, #17
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	4b3c      	ldr	r3, [pc, #240]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001590:	2180      	movs	r1, #128	@ 0x80
 8001592:	0549      	lsls	r1, r1, #21
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fada 	bl	8000b50 <HAL_GetTick>
 800159c:	0003      	movs	r3, r0
 800159e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fad5 	bl	8000b50 <HAL_GetTick>
 80015a6:	0002      	movs	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e061      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b4:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	049b      	lsls	r3, r3, #18
 80015bc:	4013      	ands	r3, r2
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x53a>
 80015c0:	e059      	b.n	8001676 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80015c8:	4931      	ldr	r1, [pc, #196]	@ (8001690 <HAL_RCC_OscConfig+0x628>)
 80015ca:	400a      	ands	r2, r1
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fabf 	bl	8000b50 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff faba 	bl	8000b50 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e046      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ea:	4b25      	ldr	r3, [pc, #148]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	@ 0x80
 80015f0:	049b      	lsls	r3, r3, #18
 80015f2:	4013      	ands	r3, r2
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80015f6:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 80015fc:	4926      	ldr	r1, [pc, #152]	@ (8001698 <HAL_RCC_OscConfig+0x630>)
 80015fe:	400a      	ands	r2, r1
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	e038      	b.n	8001676 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e033      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_RCC_OscConfig+0x618>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	2203      	movs	r2, #3
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	429a      	cmp	r2, r3
 8001622:	d126      	bne.n	8001672 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2270      	movs	r2, #112	@ 0x70
 8001628:	401a      	ands	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d11f      	bne.n	8001672 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	23fe      	movs	r3, #254	@ 0xfe
 8001636:	01db      	lsls	r3, r3, #7
 8001638:	401a      	ands	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001640:	429a      	cmp	r2, r3
 8001642:	d116      	bne.n	8001672 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	23f8      	movs	r3, #248	@ 0xf8
 8001648:	039b      	lsls	r3, r3, #14
 800164a:	401a      	ands	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001650:	429a      	cmp	r2, r3
 8001652:	d10e      	bne.n	8001672 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	23e0      	movs	r3, #224	@ 0xe0
 8001658:	051b      	lsls	r3, r3, #20
 800165a:	401a      	ands	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001660:	429a      	cmp	r2, r3
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	0f5b      	lsrs	r3, r3, #29
 8001668:	075a      	lsls	r2, r3, #29
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800166e:	429a      	cmp	r2, r3
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b008      	add	sp, #32
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40021000 	.word	0x40021000
 8001684:	40007000 	.word	0x40007000
 8001688:	00001388 	.word	0x00001388
 800168c:	efffffff 	.word	0xefffffff
 8001690:	feffffff 	.word	0xfeffffff
 8001694:	11c1808c 	.word	0x11c1808c
 8001698:	eefefffc 	.word	0xeefefffc

0800169c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0e9      	b.n	8001884 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b0:	4b76      	ldr	r3, [pc, #472]	@ (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2207      	movs	r2, #7
 80016b6:	4013      	ands	r3, r2
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d91e      	bls.n	80016fc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b73      	ldr	r3, [pc, #460]	@ (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2207      	movs	r2, #7
 80016c4:	4393      	bics	r3, r2
 80016c6:	0019      	movs	r1, r3
 80016c8:	4b70      	ldr	r3, [pc, #448]	@ (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016d0:	f7ff fa3e 	bl	8000b50 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016d8:	e009      	b.n	80016ee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016da:	f7ff fa39 	bl	8000b50 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001890 <HAL_RCC_ClockConfig+0x1f4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e0ca      	b.n	8001884 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ee:	4b67      	ldr	r3, [pc, #412]	@ (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2207      	movs	r2, #7
 80016f4:	4013      	ands	r3, r2
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d1ee      	bne.n	80016da <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2202      	movs	r2, #2
 8001702:	4013      	ands	r3, r2
 8001704:	d015      	beq.n	8001732 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2204      	movs	r2, #4
 800170c:	4013      	ands	r3, r2
 800170e:	d006      	beq.n	800171e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001710:	4b60      	ldr	r3, [pc, #384]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	4b5f      	ldr	r3, [pc, #380]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 8001716:	21e0      	movs	r1, #224	@ 0xe0
 8001718:	01c9      	lsls	r1, r1, #7
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171e:	4b5d      	ldr	r3, [pc, #372]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4a5d      	ldr	r2, [pc, #372]	@ (8001898 <HAL_RCC_ClockConfig+0x1fc>)
 8001724:	4013      	ands	r3, r2
 8001726:	0019      	movs	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	4b59      	ldr	r3, [pc, #356]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 800172e:	430a      	orrs	r2, r1
 8001730:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	d057      	beq.n	80017ec <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d107      	bne.n	8001754 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001744:	4b53      	ldr	r3, [pc, #332]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2380      	movs	r3, #128	@ 0x80
 800174a:	029b      	lsls	r3, r3, #10
 800174c:	4013      	ands	r3, r2
 800174e:	d12b      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e097      	b.n	8001884 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d107      	bne.n	800176c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175c:	4b4d      	ldr	r3, [pc, #308]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	049b      	lsls	r3, r3, #18
 8001764:	4013      	ands	r3, r2
 8001766:	d11f      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e08b      	b.n	8001884 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d107      	bne.n	8001784 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001774:	4b47      	ldr	r3, [pc, #284]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	@ 0x80
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4013      	ands	r3, r2
 800177e:	d113      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e07f      	b.n	8001884 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d106      	bne.n	800179a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800178c:	4b41      	ldr	r3, [pc, #260]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 800178e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d108      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e074      	b.n	8001884 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179a:	4b3e      	ldr	r3, [pc, #248]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 800179c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179e:	2202      	movs	r2, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e06d      	b.n	8001884 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2207      	movs	r2, #7
 80017ae:	4393      	bics	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4b37      	ldr	r3, [pc, #220]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 80017b8:	430a      	orrs	r2, r1
 80017ba:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017bc:	f7ff f9c8 	bl	8000b50 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c4:	e009      	b.n	80017da <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c6:	f7ff f9c3 	bl	8000b50 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001890 <HAL_RCC_ClockConfig+0x1f4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e054      	b.n	8001884 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	4b2e      	ldr	r3, [pc, #184]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2238      	movs	r2, #56	@ 0x38
 80017e0:	401a      	ands	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1ec      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2207      	movs	r2, #7
 80017f2:	4013      	ands	r3, r2
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d21e      	bcs.n	8001838 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_RCC_ClockConfig+0x1f0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2207      	movs	r2, #7
 8001800:	4393      	bics	r3, r2
 8001802:	0019      	movs	r1, r3
 8001804:	4b21      	ldr	r3, [pc, #132]	@ (800188c <HAL_RCC_ClockConfig+0x1f0>)
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800180c:	f7ff f9a0 	bl	8000b50 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001814:	e009      	b.n	800182a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001816:	f7ff f99b 	bl	8000b50 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	4a1b      	ldr	r2, [pc, #108]	@ (8001890 <HAL_RCC_ClockConfig+0x1f4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e02c      	b.n	8001884 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_RCC_ClockConfig+0x1f0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2207      	movs	r2, #7
 8001830:	4013      	ands	r3, r2
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d1ee      	bne.n	8001816 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2204      	movs	r2, #4
 800183e:	4013      	ands	r3, r2
 8001840:	d009      	beq.n	8001856 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	4a15      	ldr	r2, [pc, #84]	@ (800189c <HAL_RCC_ClockConfig+0x200>)
 8001848:	4013      	ands	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 8001852:	430a      	orrs	r2, r1
 8001854:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001856:	f000 f829 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800185a:	0001      	movs	r1, r0
 800185c:	4b0d      	ldr	r3, [pc, #52]	@ (8001894 <HAL_RCC_ClockConfig+0x1f8>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	220f      	movs	r2, #15
 8001864:	401a      	ands	r2, r3
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <HAL_RCC_ClockConfig+0x204>)
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	58d3      	ldr	r3, [r2, r3]
 800186c:	221f      	movs	r2, #31
 800186e:	4013      	ands	r3, r2
 8001870:	000a      	movs	r2, r1
 8001872:	40da      	lsrs	r2, r3
 8001874:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <HAL_RCC_ClockConfig+0x208>)
 8001876:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001878:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_RCC_ClockConfig+0x20c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff f90b 	bl	8000a98 <HAL_InitTick>
 8001882:	0003      	movs	r3, r0
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b004      	add	sp, #16
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40022000 	.word	0x40022000
 8001890:	00001388 	.word	0x00001388
 8001894:	40021000 	.word	0x40021000
 8001898:	fffff0ff 	.word	0xfffff0ff
 800189c:	ffff8fff 	.word	0xffff8fff
 80018a0:	08002a94 	.word	0x08002a94
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b2:	4b3c      	ldr	r3, [pc, #240]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2238      	movs	r2, #56	@ 0x38
 80018b8:	4013      	ands	r3, r2
 80018ba:	d10f      	bne.n	80018dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018bc:	4b39      	ldr	r3, [pc, #228]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0adb      	lsrs	r3, r3, #11
 80018c2:	2207      	movs	r2, #7
 80018c4:	4013      	ands	r3, r2
 80018c6:	2201      	movs	r2, #1
 80018c8:	409a      	lsls	r2, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	4835      	ldr	r0, [pc, #212]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018d2:	f7fe fc17 	bl	8000104 <__udivsi3>
 80018d6:	0003      	movs	r3, r0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e05d      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018dc:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2238      	movs	r2, #56	@ 0x38
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d102      	bne.n	80018ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018e8:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x100>)
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	e054      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ee:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2238      	movs	r2, #56	@ 0x38
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d138      	bne.n	800196c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018fa:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2203      	movs	r2, #3
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001904:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	2207      	movs	r2, #7
 800190c:	4013      	ands	r3, r2
 800190e:	3301      	adds	r3, #1
 8001910:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b03      	cmp	r3, #3
 8001916:	d10d      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	4824      	ldr	r0, [pc, #144]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x100>)
 800191c:	f7fe fbf2 	bl	8000104 <__udivsi3>
 8001920:	0003      	movs	r3, r0
 8001922:	0019      	movs	r1, r3
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	227f      	movs	r2, #127	@ 0x7f
 800192c:	4013      	ands	r3, r2
 800192e:	434b      	muls	r3, r1
 8001930:	617b      	str	r3, [r7, #20]
        break;
 8001932:	e00d      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	481c      	ldr	r0, [pc, #112]	@ (80019a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001938:	f7fe fbe4 	bl	8000104 <__udivsi3>
 800193c:	0003      	movs	r3, r0
 800193e:	0019      	movs	r1, r3
 8001940:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	227f      	movs	r2, #127	@ 0x7f
 8001948:	4013      	ands	r3, r2
 800194a:	434b      	muls	r3, r1
 800194c:	617b      	str	r3, [r7, #20]
        break;
 800194e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0f5b      	lsrs	r3, r3, #29
 8001956:	2207      	movs	r2, #7
 8001958:	4013      	ands	r3, r2
 800195a:	3301      	adds	r3, #1
 800195c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	6978      	ldr	r0, [r7, #20]
 8001962:	f7fe fbcf 	bl	8000104 <__udivsi3>
 8001966:	0003      	movs	r3, r0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	e015      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800196c:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2238      	movs	r2, #56	@ 0x38
 8001972:	4013      	ands	r3, r2
 8001974:	2b20      	cmp	r3, #32
 8001976:	d103      	bne.n	8001980 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001978:	2380      	movs	r3, #128	@ 0x80
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	e00b      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2238      	movs	r2, #56	@ 0x38
 8001986:	4013      	ands	r3, r2
 8001988:	2b18      	cmp	r3, #24
 800198a:	d103      	bne.n	8001994 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800198c:	23fa      	movs	r3, #250	@ 0xfa
 800198e:	01db      	lsls	r3, r3, #7
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	e001      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001998:	693b      	ldr	r3, [r7, #16]
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b006      	add	sp, #24
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			@ (mov r8, r8)
 80019a4:	40021000 	.word	0x40021000
 80019a8:	00f42400 	.word	0x00f42400
 80019ac:	007a1200 	.word	0x007a1200

080019b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019b4:	4b02      	ldr	r3, [pc, #8]	@ (80019c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	20000000 	.word	0x20000000

080019c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80019c8:	f7ff fff2 	bl	80019b0 <HAL_RCC_GetHCLKFreq>
 80019cc:	0004      	movs	r4, r0
 80019ce:	f7ff fb3f 	bl	8001050 <LL_RCC_GetAPB1Prescaler>
 80019d2:	0003      	movs	r3, r0
 80019d4:	0b1a      	lsrs	r2, r3, #12
 80019d6:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	58d3      	ldr	r3, [r2, r3]
 80019dc:	221f      	movs	r2, #31
 80019de:	4013      	ands	r3, r2
 80019e0:	40dc      	lsrs	r4, r3
 80019e2:	0023      	movs	r3, r4
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	08002ad4 	.word	0x08002ad4

080019f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80019f8:	2313      	movs	r3, #19
 80019fa:	18fb      	adds	r3, r7, r3
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a00:	2312      	movs	r3, #18
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	029b      	lsls	r3, r3, #10
 8001a10:	4013      	ands	r3, r2
 8001a12:	d100      	bne.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a14:	e0a3      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2011      	movs	r0, #17
 8001a18:	183b      	adds	r3, r7, r0
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1e:	4bc3      	ldr	r3, [pc, #780]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	055b      	lsls	r3, r3, #21
 8001a26:	4013      	ands	r3, r2
 8001a28:	d110      	bne.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4bc0      	ldr	r3, [pc, #768]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a2e:	4bbf      	ldr	r3, [pc, #764]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a30:	2180      	movs	r1, #128	@ 0x80
 8001a32:	0549      	lsls	r1, r1, #21
 8001a34:	430a      	orrs	r2, r1
 8001a36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a38:	4bbc      	ldr	r3, [pc, #752]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a3c:	2380      	movs	r3, #128	@ 0x80
 8001a3e:	055b      	lsls	r3, r3, #21
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a46:	183b      	adds	r3, r7, r0
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a4c:	4bb8      	ldr	r3, [pc, #736]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4bb7      	ldr	r3, [pc, #732]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001a52:	2180      	movs	r1, #128	@ 0x80
 8001a54:	0049      	lsls	r1, r1, #1
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a5a:	f7ff f879 	bl	8000b50 <HAL_GetTick>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a62:	e00b      	b.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a64:	f7ff f874 	bl	8000b50 <HAL_GetTick>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d904      	bls.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001a72:	2313      	movs	r3, #19
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2203      	movs	r2, #3
 8001a78:	701a      	strb	r2, [r3, #0]
        break;
 8001a7a:	e005      	b.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a7c:	4bac      	ldr	r3, [pc, #688]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	d0ed      	beq.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001a88:	2313      	movs	r3, #19
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d154      	bne.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001a92:	4ba6      	ldr	r3, [pc, #664]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001a94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a96:	23c0      	movs	r3, #192	@ 0xc0
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d019      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d014      	beq.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001aae:	4b9f      	ldr	r3, [pc, #636]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	4aa0      	ldr	r2, [pc, #640]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ab8:	4b9c      	ldr	r3, [pc, #624]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001aba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001abc:	4b9b      	ldr	r3, [pc, #620]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001abe:	2180      	movs	r1, #128	@ 0x80
 8001ac0:	0249      	lsls	r1, r1, #9
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ac6:	4b99      	ldr	r3, [pc, #612]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ac8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aca:	4b98      	ldr	r3, [pc, #608]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001acc:	499a      	ldr	r1, [pc, #616]	@ (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8001ace:	400a      	ands	r2, r1
 8001ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ad2:	4b96      	ldr	r3, [pc, #600]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2201      	movs	r2, #1
 8001adc:	4013      	ands	r3, r2
 8001ade:	d016      	beq.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f836 	bl	8000b50 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae8:	e00c      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff f831 	bl	8000b50 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a91      	ldr	r2, [pc, #580]	@ (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d904      	bls.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001afa:	2313      	movs	r3, #19
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	2203      	movs	r2, #3
 8001b00:	701a      	strb	r2, [r3, #0]
            break;
 8001b02:	e004      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b04:	4b89      	ldr	r3, [pc, #548]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d0ed      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001b0e:	2313      	movs	r3, #19
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10a      	bne.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b18:	4b84      	ldr	r3, [pc, #528]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1c:	4a85      	ldr	r2, [pc, #532]	@ (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b26:	4b81      	ldr	r3, [pc, #516]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b2c:	e00c      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b2e:	2312      	movs	r3, #18
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2213      	movs	r2, #19
 8001b34:	18ba      	adds	r2, r7, r2
 8001b36:	7812      	ldrb	r2, [r2, #0]
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e005      	b.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b3c:	2312      	movs	r3, #18
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	2213      	movs	r2, #19
 8001b42:	18ba      	adds	r2, r7, r2
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b48:	2311      	movs	r3, #17
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d105      	bne.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b52:	4b76      	ldr	r3, [pc, #472]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b56:	4b75      	ldr	r3, [pc, #468]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b58:	4979      	ldr	r1, [pc, #484]	@ (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2201      	movs	r2, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	d009      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b68:	4b70      	ldr	r3, [pc, #448]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	4393      	bics	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	4b6d      	ldr	r3, [pc, #436]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2202      	movs	r2, #2
 8001b82:	4013      	ands	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b86:	4b69      	ldr	r3, [pc, #420]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	4b65      	ldr	r3, [pc, #404]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001b96:	430a      	orrs	r2, r1
 8001b98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ba4:	4b61      	ldr	r3, [pc, #388]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba8:	4a66      	ldr	r2, [pc, #408]	@ (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001bc4:	4b59      	ldr	r3, [pc, #356]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	0019      	movs	r1, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	4b56      	ldr	r3, [pc, #344]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4013      	ands	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001be4:	4b51      	ldr	r3, [pc, #324]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be8:	4a58      	ldr	r2, [pc, #352]	@ (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d009      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c02:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c06:	4a52      	ldr	r2, [pc, #328]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	4b46      	ldr	r3, [pc, #280]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	@ 0x80
 8001c1c:	01db      	lsls	r3, r3, #7
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d015      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c22:	4b42      	ldr	r3, [pc, #264]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	0899      	lsrs	r1, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1a      	ldr	r2, [r3, #32]
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1a      	ldr	r2, [r3, #32]
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	05db      	lsls	r3, r3, #23
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c40:	4b3a      	ldr	r3, [pc, #232]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c42:	68da      	ldr	r2, [r3, #12]
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c46:	2180      	movs	r1, #128	@ 0x80
 8001c48:	0249      	lsls	r1, r1, #9
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2380      	movs	r3, #128	@ 0x80
 8001c54:	031b      	lsls	r3, r3, #12
 8001c56:	4013      	ands	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c5a:	4b34      	ldr	r3, [pc, #208]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5e:	2240      	movs	r2, #64	@ 0x40
 8001c60:	4393      	bics	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c68:	4b30      	ldr	r3, [pc, #192]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	039b      	lsls	r3, r3, #14
 8001c76:	4013      	ands	r3, r2
 8001c78:	d016      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7e:	4a35      	ldr	r2, [pc, #212]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	03db      	lsls	r3, r3, #15
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d106      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001c9a:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b23      	ldr	r3, [pc, #140]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001ca0:	2180      	movs	r1, #128	@ 0x80
 8001ca2:	0449      	lsls	r1, r1, #17
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	03db      	lsls	r3, r3, #15
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d016      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb8:	4a27      	ldr	r2, [pc, #156]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	045b      	lsls	r3, r3, #17
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001cd4:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	0449      	lsls	r1, r1, #17
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	2380      	movs	r3, #128	@ 0x80
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4013      	ands	r3, r2
 8001cec:	d016      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695a      	ldr	r2, [r3, #20]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	01db      	lsls	r3, r3, #7
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d106      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001d0e:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8001d14:	2180      	movs	r1, #128	@ 0x80
 8001d16:	0249      	lsls	r1, r1, #9
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001d1c:	2312      	movs	r3, #18
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	781b      	ldrb	r3, [r3, #0]
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b006      	add	sp, #24
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
 8001d34:	fffffcff 	.word	0xfffffcff
 8001d38:	fffeffff 	.word	0xfffeffff
 8001d3c:	00001388 	.word	0x00001388
 8001d40:	efffffff 	.word	0xefffffff
 8001d44:	fffff3ff 	.word	0xfffff3ff
 8001d48:	fff3ffff 	.word	0xfff3ffff
 8001d4c:	ffcfffff 	.word	0xffcfffff
 8001d50:	ffffcfff 	.word	0xffffcfff
 8001d54:	ffbfffff 	.word	0xffbfffff
 8001d58:	feffffff 	.word	0xfeffffff
 8001d5c:	ffff3fff 	.word	0xffff3fff

08001d60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e046      	b.n	8001e00 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2288      	movs	r2, #136	@ 0x88
 8001d76:	589b      	ldr	r3, [r3, r2]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2284      	movs	r2, #132	@ 0x84
 8001d80:	2100      	movs	r1, #0
 8001d82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7fe fdbe 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2288      	movs	r2, #136	@ 0x88
 8001d90:	2124      	movs	r1, #36	@ 0x24
 8001d92:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2101      	movs	r1, #1
 8001da0:	438a      	bics	r2, r1
 8001da2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	0018      	movs	r0, r3
 8001db0:	f000 faea 	bl	8002388 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 f828 	bl	8001e0c <UART_SetConfig>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e01c      	b.n	8001e00 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	490d      	ldr	r1, [pc, #52]	@ (8001e08 <HAL_UART_Init+0xa8>)
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	212a      	movs	r1, #42	@ 0x2a
 8001de2:	438a      	bics	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	430a      	orrs	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 fb79 	bl	80024f0 <UART_CheckIdleState>
 8001dfe:	0003      	movs	r3, r0
}
 8001e00:	0018      	movs	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	b002      	add	sp, #8
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	ffffb7ff 	.word	0xffffb7ff

08001e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e0c:	b5b0      	push	{r4, r5, r7, lr}
 8001e0e:	b090      	sub	sp, #64	@ 0x40
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e14:	231a      	movs	r3, #26
 8001e16:	2220      	movs	r2, #32
 8001e18:	189b      	adds	r3, r3, r2
 8001e1a:	19db      	adds	r3, r3, r7
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4aaf      	ldr	r2, [pc, #700]	@ (80020fc <UART_SetConfig+0x2f0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e4a:	430b      	orrs	r3, r1
 8001e4c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4aaa      	ldr	r2, [pc, #680]	@ (8002100 <UART_SetConfig+0x2f4>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	0018      	movs	r0, r3
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	68d9      	ldr	r1, [r3, #12]
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	0003      	movs	r3, r0
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4aa4      	ldr	r2, [pc, #656]	@ (8002104 <UART_SetConfig+0x2f8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d004      	beq.n	8001e82 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a9f      	ldr	r2, [pc, #636]	@ (8002108 <UART_SetConfig+0x2fc>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e94:	430b      	orrs	r3, r1
 8001e96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	220f      	movs	r2, #15
 8001ea0:	4393      	bics	r3, r2
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	0003      	movs	r3, r0
 8001eae:	430b      	orrs	r3, r1
 8001eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a95      	ldr	r2, [pc, #596]	@ (800210c <UART_SetConfig+0x300>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d131      	bne.n	8001f20 <UART_SetConfig+0x114>
 8001ebc:	4b94      	ldr	r3, [pc, #592]	@ (8002110 <UART_SetConfig+0x304>)
 8001ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d01d      	beq.n	8001f04 <UART_SetConfig+0xf8>
 8001ec8:	d823      	bhi.n	8001f12 <UART_SetConfig+0x106>
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d00c      	beq.n	8001ee8 <UART_SetConfig+0xdc>
 8001ece:	d820      	bhi.n	8001f12 <UART_SetConfig+0x106>
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <UART_SetConfig+0xce>
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d00e      	beq.n	8001ef6 <UART_SetConfig+0xea>
 8001ed8:	e01b      	b.n	8001f12 <UART_SetConfig+0x106>
 8001eda:	231b      	movs	r3, #27
 8001edc:	2220      	movs	r2, #32
 8001ede:	189b      	adds	r3, r3, r2
 8001ee0:	19db      	adds	r3, r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e0b4      	b.n	8002052 <UART_SetConfig+0x246>
 8001ee8:	231b      	movs	r3, #27
 8001eea:	2220      	movs	r2, #32
 8001eec:	189b      	adds	r3, r3, r2
 8001eee:	19db      	adds	r3, r3, r7
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	e0ad      	b.n	8002052 <UART_SetConfig+0x246>
 8001ef6:	231b      	movs	r3, #27
 8001ef8:	2220      	movs	r2, #32
 8001efa:	189b      	adds	r3, r3, r2
 8001efc:	19db      	adds	r3, r3, r7
 8001efe:	2204      	movs	r2, #4
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e0a6      	b.n	8002052 <UART_SetConfig+0x246>
 8001f04:	231b      	movs	r3, #27
 8001f06:	2220      	movs	r2, #32
 8001f08:	189b      	adds	r3, r3, r2
 8001f0a:	19db      	adds	r3, r3, r7
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	e09f      	b.n	8002052 <UART_SetConfig+0x246>
 8001f12:	231b      	movs	r3, #27
 8001f14:	2220      	movs	r2, #32
 8001f16:	189b      	adds	r3, r3, r2
 8001f18:	19db      	adds	r3, r3, r7
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e098      	b.n	8002052 <UART_SetConfig+0x246>
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a7b      	ldr	r2, [pc, #492]	@ (8002114 <UART_SetConfig+0x308>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d131      	bne.n	8001f8e <UART_SetConfig+0x182>
 8001f2a:	4b79      	ldr	r3, [pc, #484]	@ (8002110 <UART_SetConfig+0x304>)
 8001f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f2e:	220c      	movs	r2, #12
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b0c      	cmp	r3, #12
 8001f34:	d01d      	beq.n	8001f72 <UART_SetConfig+0x166>
 8001f36:	d823      	bhi.n	8001f80 <UART_SetConfig+0x174>
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d00c      	beq.n	8001f56 <UART_SetConfig+0x14a>
 8001f3c:	d820      	bhi.n	8001f80 <UART_SetConfig+0x174>
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <UART_SetConfig+0x13c>
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d00e      	beq.n	8001f64 <UART_SetConfig+0x158>
 8001f46:	e01b      	b.n	8001f80 <UART_SetConfig+0x174>
 8001f48:	231b      	movs	r3, #27
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	189b      	adds	r3, r3, r2
 8001f4e:	19db      	adds	r3, r3, r7
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e07d      	b.n	8002052 <UART_SetConfig+0x246>
 8001f56:	231b      	movs	r3, #27
 8001f58:	2220      	movs	r2, #32
 8001f5a:	189b      	adds	r3, r3, r2
 8001f5c:	19db      	adds	r3, r3, r7
 8001f5e:	2202      	movs	r2, #2
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	e076      	b.n	8002052 <UART_SetConfig+0x246>
 8001f64:	231b      	movs	r3, #27
 8001f66:	2220      	movs	r2, #32
 8001f68:	189b      	adds	r3, r3, r2
 8001f6a:	19db      	adds	r3, r3, r7
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	e06f      	b.n	8002052 <UART_SetConfig+0x246>
 8001f72:	231b      	movs	r3, #27
 8001f74:	2220      	movs	r2, #32
 8001f76:	189b      	adds	r3, r3, r2
 8001f78:	19db      	adds	r3, r3, r7
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e068      	b.n	8002052 <UART_SetConfig+0x246>
 8001f80:	231b      	movs	r3, #27
 8001f82:	2220      	movs	r2, #32
 8001f84:	189b      	adds	r3, r3, r2
 8001f86:	19db      	adds	r3, r3, r7
 8001f88:	2210      	movs	r2, #16
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	e061      	b.n	8002052 <UART_SetConfig+0x246>
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a61      	ldr	r2, [pc, #388]	@ (8002118 <UART_SetConfig+0x30c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d106      	bne.n	8001fa6 <UART_SetConfig+0x19a>
 8001f98:	231b      	movs	r3, #27
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	189b      	adds	r3, r3, r2
 8001f9e:	19db      	adds	r3, r3, r7
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e055      	b.n	8002052 <UART_SetConfig+0x246>
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a5c      	ldr	r2, [pc, #368]	@ (800211c <UART_SetConfig+0x310>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d106      	bne.n	8001fbe <UART_SetConfig+0x1b2>
 8001fb0:	231b      	movs	r3, #27
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	189b      	adds	r3, r3, r2
 8001fb6:	19db      	adds	r3, r3, r7
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
 8001fbc:	e049      	b.n	8002052 <UART_SetConfig+0x246>
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a50      	ldr	r2, [pc, #320]	@ (8002104 <UART_SetConfig+0x2f8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d13e      	bne.n	8002046 <UART_SetConfig+0x23a>
 8001fc8:	4b51      	ldr	r3, [pc, #324]	@ (8002110 <UART_SetConfig+0x304>)
 8001fca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fcc:	23c0      	movs	r3, #192	@ 0xc0
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	22c0      	movs	r2, #192	@ 0xc0
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d027      	beq.n	800202a <UART_SetConfig+0x21e>
 8001fda:	22c0      	movs	r2, #192	@ 0xc0
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d82a      	bhi.n	8002038 <UART_SetConfig+0x22c>
 8001fe2:	2280      	movs	r2, #128	@ 0x80
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d011      	beq.n	800200e <UART_SetConfig+0x202>
 8001fea:	2280      	movs	r2, #128	@ 0x80
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d822      	bhi.n	8002038 <UART_SetConfig+0x22c>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <UART_SetConfig+0x1f4>
 8001ff6:	2280      	movs	r2, #128	@ 0x80
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d00e      	beq.n	800201c <UART_SetConfig+0x210>
 8001ffe:	e01b      	b.n	8002038 <UART_SetConfig+0x22c>
 8002000:	231b      	movs	r3, #27
 8002002:	2220      	movs	r2, #32
 8002004:	189b      	adds	r3, r3, r2
 8002006:	19db      	adds	r3, r3, r7
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e021      	b.n	8002052 <UART_SetConfig+0x246>
 800200e:	231b      	movs	r3, #27
 8002010:	2220      	movs	r2, #32
 8002012:	189b      	adds	r3, r3, r2
 8002014:	19db      	adds	r3, r3, r7
 8002016:	2202      	movs	r2, #2
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e01a      	b.n	8002052 <UART_SetConfig+0x246>
 800201c:	231b      	movs	r3, #27
 800201e:	2220      	movs	r2, #32
 8002020:	189b      	adds	r3, r3, r2
 8002022:	19db      	adds	r3, r3, r7
 8002024:	2204      	movs	r2, #4
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	e013      	b.n	8002052 <UART_SetConfig+0x246>
 800202a:	231b      	movs	r3, #27
 800202c:	2220      	movs	r2, #32
 800202e:	189b      	adds	r3, r3, r2
 8002030:	19db      	adds	r3, r3, r7
 8002032:	2208      	movs	r2, #8
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e00c      	b.n	8002052 <UART_SetConfig+0x246>
 8002038:	231b      	movs	r3, #27
 800203a:	2220      	movs	r2, #32
 800203c:	189b      	adds	r3, r3, r2
 800203e:	19db      	adds	r3, r3, r7
 8002040:	2210      	movs	r2, #16
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	e005      	b.n	8002052 <UART_SetConfig+0x246>
 8002046:	231b      	movs	r3, #27
 8002048:	2220      	movs	r2, #32
 800204a:	189b      	adds	r3, r3, r2
 800204c:	19db      	adds	r3, r3, r7
 800204e:	2210      	movs	r2, #16
 8002050:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2b      	ldr	r2, [pc, #172]	@ (8002104 <UART_SetConfig+0x2f8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d000      	beq.n	800205e <UART_SetConfig+0x252>
 800205c:	e0a9      	b.n	80021b2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800205e:	231b      	movs	r3, #27
 8002060:	2220      	movs	r2, #32
 8002062:	189b      	adds	r3, r3, r2
 8002064:	19db      	adds	r3, r3, r7
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d015      	beq.n	8002098 <UART_SetConfig+0x28c>
 800206c:	dc18      	bgt.n	80020a0 <UART_SetConfig+0x294>
 800206e:	2b04      	cmp	r3, #4
 8002070:	d00d      	beq.n	800208e <UART_SetConfig+0x282>
 8002072:	dc15      	bgt.n	80020a0 <UART_SetConfig+0x294>
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <UART_SetConfig+0x272>
 8002078:	2b02      	cmp	r3, #2
 800207a:	d005      	beq.n	8002088 <UART_SetConfig+0x27c>
 800207c:	e010      	b.n	80020a0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800207e:	f7ff fca1 	bl	80019c4 <HAL_RCC_GetPCLK1Freq>
 8002082:	0003      	movs	r3, r0
 8002084:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002086:	e014      	b.n	80020b2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002088:	4b25      	ldr	r3, [pc, #148]	@ (8002120 <UART_SetConfig+0x314>)
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800208c:	e011      	b.n	80020b2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800208e:	f7ff fc0d 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8002092:	0003      	movs	r3, r0
 8002094:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002096:	e00c      	b.n	80020b2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002098:	2380      	movs	r3, #128	@ 0x80
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800209e:	e008      	b.n	80020b2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80020a4:	231a      	movs	r3, #26
 80020a6:	2220      	movs	r2, #32
 80020a8:	189b      	adds	r3, r3, r2
 80020aa:	19db      	adds	r3, r3, r7
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
        break;
 80020b0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80020b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d100      	bne.n	80020ba <UART_SetConfig+0x2ae>
 80020b8:	e14b      	b.n	8002352 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020be:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <UART_SetConfig+0x318>)
 80020c0:	0052      	lsls	r2, r2, #1
 80020c2:	5ad3      	ldrh	r3, [r2, r3]
 80020c4:	0019      	movs	r1, r3
 80020c6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80020c8:	f7fe f81c 	bl	8000104 <__udivsi3>
 80020cc:	0003      	movs	r3, r0
 80020ce:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	0013      	movs	r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	189b      	adds	r3, r3, r2
 80020da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020dc:	429a      	cmp	r2, r3
 80020de:	d305      	bcc.n	80020ec <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80020e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d91d      	bls.n	8002128 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80020ec:	231a      	movs	r3, #26
 80020ee:	2220      	movs	r2, #32
 80020f0:	189b      	adds	r3, r3, r2
 80020f2:	19db      	adds	r3, r3, r7
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	e12b      	b.n	8002352 <UART_SetConfig+0x546>
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	cfff69f3 	.word	0xcfff69f3
 8002100:	ffffcfff 	.word	0xffffcfff
 8002104:	40008000 	.word	0x40008000
 8002108:	11fff4ff 	.word	0x11fff4ff
 800210c:	40013800 	.word	0x40013800
 8002110:	40021000 	.word	0x40021000
 8002114:	40004400 	.word	0x40004400
 8002118:	40004800 	.word	0x40004800
 800211c:	40004c00 	.word	0x40004c00
 8002120:	00f42400 	.word	0x00f42400
 8002124:	08002af4 	.word	0x08002af4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002134:	4b92      	ldr	r3, [pc, #584]	@ (8002380 <UART_SetConfig+0x574>)
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	5ad3      	ldrh	r3, [r2, r3]
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	69b8      	ldr	r0, [r7, #24]
 8002146:	69f9      	ldr	r1, [r7, #28]
 8002148:	f7fe f952 	bl	80003f0 <__aeabi_uldivmod>
 800214c:	0002      	movs	r2, r0
 800214e:	000b      	movs	r3, r1
 8002150:	0e11      	lsrs	r1, r2, #24
 8002152:	021d      	lsls	r5, r3, #8
 8002154:	430d      	orrs	r5, r1
 8002156:	0214      	lsls	r4, r2, #8
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	68f9      	ldr	r1, [r7, #12]
 8002168:	1900      	adds	r0, r0, r4
 800216a:	4169      	adcs	r1, r5
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f7fe f939 	bl	80003f0 <__aeabi_uldivmod>
 800217e:	0002      	movs	r2, r0
 8002180:	000b      	movs	r3, r1
 8002182:	0013      	movs	r3, r2
 8002184:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002188:	23c0      	movs	r3, #192	@ 0xc0
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d309      	bcc.n	80021a4 <UART_SetConfig+0x398>
 8002190:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	035b      	lsls	r3, r3, #13
 8002196:	429a      	cmp	r2, r3
 8002198:	d204      	bcs.n	80021a4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	e0d6      	b.n	8002352 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80021a4:	231a      	movs	r3, #26
 80021a6:	2220      	movs	r2, #32
 80021a8:	189b      	adds	r3, r3, r2
 80021aa:	19db      	adds	r3, r3, r7
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
 80021b0:	e0cf      	b.n	8002352 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	2380      	movs	r3, #128	@ 0x80
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d000      	beq.n	80021c0 <UART_SetConfig+0x3b4>
 80021be:	e070      	b.n	80022a2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80021c0:	231b      	movs	r3, #27
 80021c2:	2220      	movs	r2, #32
 80021c4:	189b      	adds	r3, r3, r2
 80021c6:	19db      	adds	r3, r3, r7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d015      	beq.n	80021fa <UART_SetConfig+0x3ee>
 80021ce:	dc18      	bgt.n	8002202 <UART_SetConfig+0x3f6>
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d00d      	beq.n	80021f0 <UART_SetConfig+0x3e4>
 80021d4:	dc15      	bgt.n	8002202 <UART_SetConfig+0x3f6>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <UART_SetConfig+0x3d4>
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d005      	beq.n	80021ea <UART_SetConfig+0x3de>
 80021de:	e010      	b.n	8002202 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021e0:	f7ff fbf0 	bl	80019c4 <HAL_RCC_GetPCLK1Freq>
 80021e4:	0003      	movs	r3, r0
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80021e8:	e014      	b.n	8002214 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021ea:	4b66      	ldr	r3, [pc, #408]	@ (8002384 <UART_SetConfig+0x578>)
 80021ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80021ee:	e011      	b.n	8002214 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021f0:	f7ff fb5c 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 80021f4:	0003      	movs	r3, r0
 80021f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80021f8:	e00c      	b.n	8002214 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021fa:	2380      	movs	r3, #128	@ 0x80
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002200:	e008      	b.n	8002214 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002206:	231a      	movs	r3, #26
 8002208:	2220      	movs	r2, #32
 800220a:	189b      	adds	r3, r3, r2
 800220c:	19db      	adds	r3, r3, r7
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
        break;
 8002212:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002216:	2b00      	cmp	r3, #0
 8002218:	d100      	bne.n	800221c <UART_SetConfig+0x410>
 800221a:	e09a      	b.n	8002352 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002220:	4b57      	ldr	r3, [pc, #348]	@ (8002380 <UART_SetConfig+0x574>)
 8002222:	0052      	lsls	r2, r2, #1
 8002224:	5ad3      	ldrh	r3, [r2, r3]
 8002226:	0019      	movs	r1, r3
 8002228:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800222a:	f7fd ff6b 	bl	8000104 <__udivsi3>
 800222e:	0003      	movs	r3, r0
 8002230:	005a      	lsls	r2, r3, #1
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	18d2      	adds	r2, r2, r3
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	0019      	movs	r1, r3
 8002240:	0010      	movs	r0, r2
 8002242:	f7fd ff5f 	bl	8000104 <__udivsi3>
 8002246:	0003      	movs	r3, r0
 8002248:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800224a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d921      	bls.n	8002294 <UART_SetConfig+0x488>
 8002250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	025b      	lsls	r3, r3, #9
 8002256:	429a      	cmp	r2, r3
 8002258:	d21c      	bcs.n	8002294 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800225a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225c:	b29a      	uxth	r2, r3
 800225e:	200e      	movs	r0, #14
 8002260:	2420      	movs	r4, #32
 8002262:	1903      	adds	r3, r0, r4
 8002264:	19db      	adds	r3, r3, r7
 8002266:	210f      	movs	r1, #15
 8002268:	438a      	bics	r2, r1
 800226a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226e:	085b      	lsrs	r3, r3, #1
 8002270:	b29b      	uxth	r3, r3
 8002272:	2207      	movs	r2, #7
 8002274:	4013      	ands	r3, r2
 8002276:	b299      	uxth	r1, r3
 8002278:	1903      	adds	r3, r0, r4
 800227a:	19db      	adds	r3, r3, r7
 800227c:	1902      	adds	r2, r0, r4
 800227e:	19d2      	adds	r2, r2, r7
 8002280:	8812      	ldrh	r2, [r2, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1902      	adds	r2, r0, r4
 800228c:	19d2      	adds	r2, r2, r7
 800228e:	8812      	ldrh	r2, [r2, #0]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	e05e      	b.n	8002352 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002294:	231a      	movs	r3, #26
 8002296:	2220      	movs	r2, #32
 8002298:	189b      	adds	r3, r3, r2
 800229a:	19db      	adds	r3, r3, r7
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e057      	b.n	8002352 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022a2:	231b      	movs	r3, #27
 80022a4:	2220      	movs	r2, #32
 80022a6:	189b      	adds	r3, r3, r2
 80022a8:	19db      	adds	r3, r3, r7
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d015      	beq.n	80022dc <UART_SetConfig+0x4d0>
 80022b0:	dc18      	bgt.n	80022e4 <UART_SetConfig+0x4d8>
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d00d      	beq.n	80022d2 <UART_SetConfig+0x4c6>
 80022b6:	dc15      	bgt.n	80022e4 <UART_SetConfig+0x4d8>
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d002      	beq.n	80022c2 <UART_SetConfig+0x4b6>
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d005      	beq.n	80022cc <UART_SetConfig+0x4c0>
 80022c0:	e010      	b.n	80022e4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022c2:	f7ff fb7f 	bl	80019c4 <HAL_RCC_GetPCLK1Freq>
 80022c6:	0003      	movs	r3, r0
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022ca:	e014      	b.n	80022f6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <UART_SetConfig+0x578>)
 80022ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022d0:	e011      	b.n	80022f6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022d2:	f7ff faeb 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 80022d6:	0003      	movs	r3, r0
 80022d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022da:	e00c      	b.n	80022f6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022dc:	2380      	movs	r3, #128	@ 0x80
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80022e2:	e008      	b.n	80022f6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80022e8:	231a      	movs	r3, #26
 80022ea:	2220      	movs	r2, #32
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	19db      	adds	r3, r3, r7
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
        break;
 80022f4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80022f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02a      	beq.n	8002352 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80022fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002300:	4b1f      	ldr	r3, [pc, #124]	@ (8002380 <UART_SetConfig+0x574>)
 8002302:	0052      	lsls	r2, r2, #1
 8002304:	5ad3      	ldrh	r3, [r2, r3]
 8002306:	0019      	movs	r1, r3
 8002308:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800230a:	f7fd fefb 	bl	8000104 <__udivsi3>
 800230e:	0003      	movs	r3, r0
 8002310:	001a      	movs	r2, r3
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	18d2      	adds	r2, r2, r3
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	0019      	movs	r1, r3
 8002320:	0010      	movs	r0, r2
 8002322:	f7fd feef 	bl	8000104 <__udivsi3>
 8002326:	0003      	movs	r3, r0
 8002328:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d90a      	bls.n	8002346 <UART_SetConfig+0x53a>
 8002330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002332:	2380      	movs	r3, #128	@ 0x80
 8002334:	025b      	lsls	r3, r3, #9
 8002336:	429a      	cmp	r2, r3
 8002338:	d205      	bcs.n	8002346 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	b29a      	uxth	r2, r3
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	e005      	b.n	8002352 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002346:	231a      	movs	r3, #26
 8002348:	2220      	movs	r2, #32
 800234a:	189b      	adds	r3, r3, r2
 800234c:	19db      	adds	r3, r3, r7
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	226a      	movs	r2, #106	@ 0x6a
 8002356:	2101      	movs	r1, #1
 8002358:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800235a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235c:	2268      	movs	r2, #104	@ 0x68
 800235e:	2101      	movs	r1, #1
 8002360:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002364:	2200      	movs	r2, #0
 8002366:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	2200      	movs	r2, #0
 800236c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800236e:	231a      	movs	r3, #26
 8002370:	2220      	movs	r2, #32
 8002372:	189b      	adds	r3, r3, r2
 8002374:	19db      	adds	r3, r3, r7
 8002376:	781b      	ldrb	r3, [r3, #0]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b010      	add	sp, #64	@ 0x40
 800237e:	bdb0      	pop	{r4, r5, r7, pc}
 8002380:	08002af4 	.word	0x08002af4
 8002384:	00f42400 	.word	0x00f42400

08002388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	2208      	movs	r2, #8
 8002396:	4013      	ands	r3, r2
 8002398:	d00b      	beq.n	80023b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a4a      	ldr	r2, [pc, #296]	@ (80024cc <UART_AdvFeatureConfig+0x144>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	0019      	movs	r1, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	2201      	movs	r2, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	d00b      	beq.n	80023d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a43      	ldr	r2, [pc, #268]	@ (80024d0 <UART_AdvFeatureConfig+0x148>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	2202      	movs	r2, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a3b      	ldr	r2, [pc, #236]	@ (80024d4 <UART_AdvFeatureConfig+0x14c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	0019      	movs	r1, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fa:	2204      	movs	r2, #4
 80023fc:	4013      	ands	r3, r2
 80023fe:	d00b      	beq.n	8002418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4a34      	ldr	r2, [pc, #208]	@ (80024d8 <UART_AdvFeatureConfig+0x150>)
 8002408:	4013      	ands	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241c:	2210      	movs	r2, #16
 800241e:	4013      	ands	r3, r2
 8002420:	d00b      	beq.n	800243a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4a2c      	ldr	r2, [pc, #176]	@ (80024dc <UART_AdvFeatureConfig+0x154>)
 800242a:	4013      	ands	r3, r2
 800242c:	0019      	movs	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243e:	2220      	movs	r2, #32
 8002440:	4013      	ands	r3, r2
 8002442:	d00b      	beq.n	800245c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4a25      	ldr	r2, [pc, #148]	@ (80024e0 <UART_AdvFeatureConfig+0x158>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	2240      	movs	r2, #64	@ 0x40
 8002462:	4013      	ands	r3, r2
 8002464:	d01d      	beq.n	80024a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a1d      	ldr	r2, [pc, #116]	@ (80024e4 <UART_AdvFeatureConfig+0x15c>)
 800246e:	4013      	ands	r3, r2
 8002470:	0019      	movs	r1, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	035b      	lsls	r3, r3, #13
 8002486:	429a      	cmp	r2, r3
 8002488:	d10b      	bne.n	80024a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a15      	ldr	r2, [pc, #84]	@ (80024e8 <UART_AdvFeatureConfig+0x160>)
 8002492:	4013      	ands	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a6:	2280      	movs	r2, #128	@ 0x80
 80024a8:	4013      	ands	r3, r2
 80024aa:	d00b      	beq.n	80024c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a0e      	ldr	r2, [pc, #56]	@ (80024ec <UART_AdvFeatureConfig+0x164>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
  }
}
 80024c4:	46c0      	nop			@ (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	ffff7fff 	.word	0xffff7fff
 80024d0:	fffdffff 	.word	0xfffdffff
 80024d4:	fffeffff 	.word	0xfffeffff
 80024d8:	fffbffff 	.word	0xfffbffff
 80024dc:	ffffefff 	.word	0xffffefff
 80024e0:	ffffdfff 	.word	0xffffdfff
 80024e4:	ffefffff 	.word	0xffefffff
 80024e8:	ff9fffff 	.word	0xff9fffff
 80024ec:	fff7ffff 	.word	0xfff7ffff

080024f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b092      	sub	sp, #72	@ 0x48
 80024f4:	af02      	add	r7, sp, #8
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2290      	movs	r2, #144	@ 0x90
 80024fc:	2100      	movs	r1, #0
 80024fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002500:	f7fe fb26 	bl	8000b50 <HAL_GetTick>
 8002504:	0003      	movs	r3, r0
 8002506:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2208      	movs	r2, #8
 8002510:	4013      	ands	r3, r2
 8002512:	2b08      	cmp	r3, #8
 8002514:	d12d      	bne.n	8002572 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002518:	2280      	movs	r2, #128	@ 0x80
 800251a:	0391      	lsls	r1, r2, #14
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	4a47      	ldr	r2, [pc, #284]	@ (800263c <UART_CheckIdleState+0x14c>)
 8002520:	9200      	str	r2, [sp, #0]
 8002522:	2200      	movs	r2, #0
 8002524:	f000 f88e 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 8002528:	1e03      	subs	r3, r0, #0
 800252a:	d022      	beq.n	8002572 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800252c:	f3ef 8310 	mrs	r3, PRIMASK
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002534:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002536:	2301      	movs	r3, #1
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253c:	f383 8810 	msr	PRIMASK, r3
}
 8002540:	46c0      	nop			@ (mov r8, r8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2180      	movs	r1, #128	@ 0x80
 800254e:	438a      	bics	r2, r1
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002558:	f383 8810 	msr	PRIMASK, r3
}
 800255c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2288      	movs	r2, #136	@ 0x88
 8002562:	2120      	movs	r1, #32
 8002564:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2284      	movs	r2, #132	@ 0x84
 800256a:	2100      	movs	r1, #0
 800256c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e060      	b.n	8002634 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2204      	movs	r2, #4
 800257a:	4013      	ands	r3, r2
 800257c:	2b04      	cmp	r3, #4
 800257e:	d146      	bne.n	800260e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002582:	2280      	movs	r2, #128	@ 0x80
 8002584:	03d1      	lsls	r1, r2, #15
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	4a2c      	ldr	r2, [pc, #176]	@ (800263c <UART_CheckIdleState+0x14c>)
 800258a:	9200      	str	r2, [sp, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	f000 f859 	bl	8002644 <UART_WaitOnFlagUntilTimeout>
 8002592:	1e03      	subs	r3, r0, #0
 8002594:	d03b      	beq.n	800260e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002596:	f3ef 8310 	mrs	r3, PRIMASK
 800259a:	60fb      	str	r3, [r7, #12]
  return(result);
 800259c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800259e:	637b      	str	r3, [r7, #52]	@ 0x34
 80025a0:	2301      	movs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f383 8810 	msr	PRIMASK, r3
}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4922      	ldr	r1, [pc, #136]	@ (8002640 <UART_CheckIdleState+0x150>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f383 8810 	msr	PRIMASK, r3
}
 80025c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c8:	f3ef 8310 	mrs	r3, PRIMASK
 80025cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80025ce:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80025d2:	2301      	movs	r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f383 8810 	msr	PRIMASK, r3
}
 80025dc:	46c0      	nop			@ (mov r8, r8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2101      	movs	r1, #1
 80025ea:	438a      	bics	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	f383 8810 	msr	PRIMASK, r3
}
 80025f8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	228c      	movs	r2, #140	@ 0x8c
 80025fe:	2120      	movs	r1, #32
 8002600:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2284      	movs	r2, #132	@ 0x84
 8002606:	2100      	movs	r1, #0
 8002608:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e012      	b.n	8002634 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2288      	movs	r2, #136	@ 0x88
 8002612:	2120      	movs	r1, #32
 8002614:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	228c      	movs	r2, #140	@ 0x8c
 800261a:	2120      	movs	r1, #32
 800261c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2284      	movs	r2, #132	@ 0x84
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b010      	add	sp, #64	@ 0x40
 800263a:	bd80      	pop	{r7, pc}
 800263c:	01ffffff 	.word	0x01ffffff
 8002640:	fffffedf 	.word	0xfffffedf

08002644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002654:	e051      	b.n	80026fa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	3301      	adds	r3, #1
 800265a:	d04e      	beq.n	80026fa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265c:	f7fe fa78 	bl	8000b50 <HAL_GetTick>
 8002660:	0002      	movs	r2, r0
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	429a      	cmp	r2, r3
 800266a:	d302      	bcc.n	8002672 <UART_WaitOnFlagUntilTimeout+0x2e>
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e051      	b.n	800271a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2204      	movs	r2, #4
 800267e:	4013      	ands	r3, r2
 8002680:	d03b      	beq.n	80026fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b80      	cmp	r3, #128	@ 0x80
 8002686:	d038      	beq.n	80026fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b40      	cmp	r3, #64	@ 0x40
 800268c:	d035      	beq.n	80026fa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	2208      	movs	r2, #8
 8002696:	4013      	ands	r3, r2
 8002698:	2b08      	cmp	r3, #8
 800269a:	d111      	bne.n	80026c0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2208      	movs	r2, #8
 80026a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 f83c 	bl	8002724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2290      	movs	r2, #144	@ 0x90
 80026b0:	2108      	movs	r1, #8
 80026b2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2284      	movs	r2, #132	@ 0x84
 80026b8:	2100      	movs	r1, #0
 80026ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e02c      	b.n	800271a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	401a      	ands	r2, r3
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d112      	bne.n	80026fa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2280      	movs	r2, #128	@ 0x80
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 f81f 	bl	8002724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2290      	movs	r2, #144	@ 0x90
 80026ea:	2120      	movs	r1, #32
 80026ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2284      	movs	r2, #132	@ 0x84
 80026f2:	2100      	movs	r1, #0
 80026f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e00f      	b.n	800271a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	4013      	ands	r3, r2
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	425a      	negs	r2, r3
 800270a:	4153      	adcs	r3, r2
 800270c:	b2db      	uxtb	r3, r3
 800270e:	001a      	movs	r2, r3
 8002710:	1dfb      	adds	r3, r7, #7
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d09e      	beq.n	8002656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b004      	add	sp, #16
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08e      	sub	sp, #56	@ 0x38
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800272c:	f3ef 8310 	mrs	r3, PRIMASK
 8002730:	617b      	str	r3, [r7, #20]
  return(result);
 8002732:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002734:	637b      	str	r3, [r7, #52]	@ 0x34
 8002736:	2301      	movs	r3, #1
 8002738:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f383 8810 	msr	PRIMASK, r3
}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4926      	ldr	r1, [pc, #152]	@ (80027e8 <UART_EndRxTransfer+0xc4>)
 800274e:	400a      	ands	r2, r1
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002754:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f383 8810 	msr	PRIMASK, r3
}
 800275c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275e:	f3ef 8310 	mrs	r3, PRIMASK
 8002762:	623b      	str	r3, [r7, #32]
  return(result);
 8002764:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
 8002768:	2301      	movs	r3, #1
 800276a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	f383 8810 	msr	PRIMASK, r3
}
 8002772:	46c0      	nop			@ (mov r8, r8)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	491b      	ldr	r1, [pc, #108]	@ (80027ec <UART_EndRxTransfer+0xc8>)
 8002780:	400a      	ands	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	f383 8810 	msr	PRIMASK, r3
}
 800278e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002794:	2b01      	cmp	r3, #1
 8002796:	d118      	bne.n	80027ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002798:	f3ef 8310 	mrs	r3, PRIMASK
 800279c:	60bb      	str	r3, [r7, #8]
  return(result);
 800279e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a2:	2301      	movs	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f383 8810 	msr	PRIMASK, r3
}
 80027ac:	46c0      	nop			@ (mov r8, r8)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2110      	movs	r1, #16
 80027ba:	438a      	bics	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	f383 8810 	msr	PRIMASK, r3
}
 80027c8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	228c      	movs	r2, #140	@ 0x8c
 80027ce:	2120      	movs	r1, #32
 80027d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b00e      	add	sp, #56	@ 0x38
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	fffffedf 	.word	0xfffffedf
 80027ec:	effffffe 	.word	0xeffffffe

080027f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2284      	movs	r2, #132	@ 0x84
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d101      	bne.n	8002806 <HAL_UARTEx_DisableFifoMode+0x16>
 8002802:	2302      	movs	r3, #2
 8002804:	e027      	b.n	8002856 <HAL_UARTEx_DisableFifoMode+0x66>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2284      	movs	r2, #132	@ 0x84
 800280a:	2101      	movs	r1, #1
 800280c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2288      	movs	r2, #136	@ 0x88
 8002812:	2124      	movs	r1, #36	@ 0x24
 8002814:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	438a      	bics	r2, r1
 800282c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4a0b      	ldr	r2, [pc, #44]	@ (8002860 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2288      	movs	r2, #136	@ 0x88
 8002848:	2120      	movs	r1, #32
 800284a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2284      	movs	r2, #132	@ 0x84
 8002850:	2100      	movs	r1, #0
 8002852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	dfffffff 	.word	0xdfffffff

08002864 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2284      	movs	r2, #132	@ 0x84
 8002872:	5c9b      	ldrb	r3, [r3, r2]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002878:	2302      	movs	r3, #2
 800287a:	e02e      	b.n	80028da <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2284      	movs	r2, #132	@ 0x84
 8002880:	2101      	movs	r1, #1
 8002882:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2288      	movs	r2, #136	@ 0x88
 8002888:	2124      	movs	r1, #36	@ 0x24
 800288a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2101      	movs	r1, #1
 80028a0:	438a      	bics	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	08d9      	lsrs	r1, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f854 	bl	8002968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2288      	movs	r2, #136	@ 0x88
 80028cc:	2120      	movs	r1, #32
 80028ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2284      	movs	r2, #132	@ 0x84
 80028d4:	2100      	movs	r1, #0
 80028d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b004      	add	sp, #16
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2284      	movs	r2, #132	@ 0x84
 80028f2:	5c9b      	ldrb	r3, [r3, r2]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e02f      	b.n	800295c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2284      	movs	r2, #132	@ 0x84
 8002900:	2101      	movs	r1, #1
 8002902:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2288      	movs	r2, #136	@ 0x88
 8002908:	2124      	movs	r1, #36	@ 0x24
 800290a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2101      	movs	r1, #1
 8002920:	438a      	bics	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	4a0e      	ldr	r2, [pc, #56]	@ (8002964 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800292c:	4013      	ands	r3, r2
 800292e:	0019      	movs	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 f813 	bl	8002968 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2288      	movs	r2, #136	@ 0x88
 800294e:	2120      	movs	r1, #32
 8002950:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2284      	movs	r2, #132	@ 0x84
 8002956:	2100      	movs	r1, #0
 8002958:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b004      	add	sp, #16
 8002962:	bd80      	pop	{r7, pc}
 8002964:	f1ffffff 	.word	0xf1ffffff

08002968 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002974:	2b00      	cmp	r3, #0
 8002976:	d108      	bne.n	800298a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	226a      	movs	r2, #106	@ 0x6a
 800297c:	2101      	movs	r1, #1
 800297e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2268      	movs	r2, #104	@ 0x68
 8002984:	2101      	movs	r1, #1
 8002986:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002988:	e043      	b.n	8002a12 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800298a:	260f      	movs	r6, #15
 800298c:	19bb      	adds	r3, r7, r6
 800298e:	2208      	movs	r2, #8
 8002990:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002992:	200e      	movs	r0, #14
 8002994:	183b      	adds	r3, r7, r0
 8002996:	2208      	movs	r2, #8
 8002998:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	0e5b      	lsrs	r3, r3, #25
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	240d      	movs	r4, #13
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	2107      	movs	r1, #7
 80029aa:	400a      	ands	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	0f5b      	lsrs	r3, r3, #29
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	250c      	movs	r5, #12
 80029ba:	197b      	adds	r3, r7, r5
 80029bc:	2107      	movs	r1, #7
 80029be:	400a      	ands	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80029c2:	183b      	adds	r3, r7, r0
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	197a      	adds	r2, r7, r5
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	4914      	ldr	r1, [pc, #80]	@ (8002a1c <UARTEx_SetNbDataToProcess+0xb4>)
 80029cc:	5c8a      	ldrb	r2, [r1, r2]
 80029ce:	435a      	muls	r2, r3
 80029d0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80029d2:	197b      	adds	r3, r7, r5
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4a12      	ldr	r2, [pc, #72]	@ (8002a20 <UARTEx_SetNbDataToProcess+0xb8>)
 80029d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80029da:	0019      	movs	r1, r3
 80029dc:	f7fd fc1c 	bl	8000218 <__divsi3>
 80029e0:	0003      	movs	r3, r0
 80029e2:	b299      	uxth	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	226a      	movs	r2, #106	@ 0x6a
 80029e8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80029ea:	19bb      	adds	r3, r7, r6
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	193a      	adds	r2, r7, r4
 80029f0:	7812      	ldrb	r2, [r2, #0]
 80029f2:	490a      	ldr	r1, [pc, #40]	@ (8002a1c <UARTEx_SetNbDataToProcess+0xb4>)
 80029f4:	5c8a      	ldrb	r2, [r1, r2]
 80029f6:	435a      	muls	r2, r3
 80029f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	4a08      	ldr	r2, [pc, #32]	@ (8002a20 <UARTEx_SetNbDataToProcess+0xb8>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002a02:	0019      	movs	r1, r3
 8002a04:	f7fd fc08 	bl	8000218 <__divsi3>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	b299      	uxth	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2268      	movs	r2, #104	@ 0x68
 8002a10:	5299      	strh	r1, [r3, r2]
}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b005      	add	sp, #20
 8002a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	08002b0c 	.word	0x08002b0c
 8002a20:	08002b14 	.word	0x08002b14

08002a24 <memset>:
 8002a24:	0003      	movs	r3, r0
 8002a26:	1882      	adds	r2, r0, r2
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <memset+0xa>
 8002a2c:	4770      	bx	lr
 8002a2e:	7019      	strb	r1, [r3, #0]
 8002a30:	3301      	adds	r3, #1
 8002a32:	e7f9      	b.n	8002a28 <memset+0x4>

08002a34 <__libc_init_array>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	2600      	movs	r6, #0
 8002a38:	4c0c      	ldr	r4, [pc, #48]	@ (8002a6c <__libc_init_array+0x38>)
 8002a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8002a70 <__libc_init_array+0x3c>)
 8002a3c:	1b64      	subs	r4, r4, r5
 8002a3e:	10a4      	asrs	r4, r4, #2
 8002a40:	42a6      	cmp	r6, r4
 8002a42:	d109      	bne.n	8002a58 <__libc_init_array+0x24>
 8002a44:	2600      	movs	r6, #0
 8002a46:	f000 f819 	bl	8002a7c <_init>
 8002a4a:	4c0a      	ldr	r4, [pc, #40]	@ (8002a74 <__libc_init_array+0x40>)
 8002a4c:	4d0a      	ldr	r5, [pc, #40]	@ (8002a78 <__libc_init_array+0x44>)
 8002a4e:	1b64      	subs	r4, r4, r5
 8002a50:	10a4      	asrs	r4, r4, #2
 8002a52:	42a6      	cmp	r6, r4
 8002a54:	d105      	bne.n	8002a62 <__libc_init_array+0x2e>
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	00b3      	lsls	r3, r6, #2
 8002a5a:	58eb      	ldr	r3, [r5, r3]
 8002a5c:	4798      	blx	r3
 8002a5e:	3601      	adds	r6, #1
 8002a60:	e7ee      	b.n	8002a40 <__libc_init_array+0xc>
 8002a62:	00b3      	lsls	r3, r6, #2
 8002a64:	58eb      	ldr	r3, [r5, r3]
 8002a66:	4798      	blx	r3
 8002a68:	3601      	adds	r6, #1
 8002a6a:	e7f2      	b.n	8002a52 <__libc_init_array+0x1e>
 8002a6c:	08002b24 	.word	0x08002b24
 8002a70:	08002b24 	.word	0x08002b24
 8002a74:	08002b28 	.word	0x08002b28
 8002a78:	08002b24 	.word	0x08002b24

08002a7c <_init>:
 8002a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a82:	bc08      	pop	{r3}
 8002a84:	469e      	mov	lr, r3
 8002a86:	4770      	bx	lr

08002a88 <_fini>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr
