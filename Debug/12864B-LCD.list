
12864B-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08003770  08003770  00004770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c20  08003c20  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c20  08003c20  00004c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c28  08003c28  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c30  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003c3c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003c3c  00005110  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010859  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002490  00000000  00000000  0001588d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00017d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7e  00000000  00000000  00018ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018329  00000000  00000000  00019726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012094  00000000  00000000  00031a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009da5a  00000000  00000000  00043ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e153d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000349c  00000000  00000000  000e1580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e4a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003758 	.word	0x08003758

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003758 	.word	0x08003758

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <SendByteSPI>:
uint8_t numCols = 128;
uint8_t Graphic_Check = 0;

/* A replacement for SPI_TRANSMIT */
void SendByteSPI(uint8_t byte)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<8;i++){
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e027      	b.n	800067e <SendByteSPI+0x62>
		if ( (byte<<i)&0x80 ){
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781a      	ldrb	r2, [r3, #0]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	409a      	lsls	r2, r3
 8000636:	0013      	movs	r3, r2
 8000638:	2280      	movs	r2, #128	@ 0x80
 800063a:	4013      	ands	r3, r2
 800063c:	d007      	beq.n	800064e <SendByteSPI+0x32>
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);		// SID=1  OR MOSI
 800063e:	23a0      	movs	r3, #160	@ 0xa0
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	2201      	movs	r2, #1
 8000644:	2102      	movs	r1, #2
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fff8 	bl	800163c <HAL_GPIO_WritePin>
 800064c:	e006      	b.n	800065c <SendByteSPI+0x40>
			} else {
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);	// SID=0
 800064e:	23a0      	movs	r3, #160	@ 0xa0
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	2200      	movs	r2, #0
 8000654:	2102      	movs	r1, #2
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fff0 	bl	800163c <HAL_GPIO_WritePin>
			}
		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);			// SCLK =0  OR SCK
 800065c:	23a0      	movs	r3, #160	@ 0xa0
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	2200      	movs	r2, #0
 8000662:	2110      	movs	r1, #16
 8000664:	0018      	movs	r0, r3
 8000666:	f000 ffe9 	bl	800163c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);			// SCLK=1
 800066a:	23a0      	movs	r3, #160	@ 0xa0
 800066c:	05db      	lsls	r3, r3, #23
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	0018      	movs	r0, r3
 8000674:	f000 ffe2 	bl	800163c <HAL_GPIO_WritePin>
	for (int i=0;i<8;i++){
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b07      	cmp	r3, #7
 8000682:	ddd4      	ble.n	800062e <SendByteSPI+0x12>
	}
}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b004      	add	sp, #16
 800068c:	bd80      	pop	{r7, pc}

0800068e <ST7920_SendCmd>:

void ST7920_SendCmd (uint8_t cmd)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	0002      	movs	r2, r0
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  	  // PUll the CS high
 800069a:	23a0      	movs	r3, #160	@ 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2201      	movs	r2, #1
 80006a0:	2101      	movs	r1, #1
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 ffca 	bl	800163c <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  						   	  // send the SYNC + RS(0)
 80006a8:	20f8      	movs	r0, #248	@ 0xf8
 80006aa:	f7ff ffb7 	bl	800061c <SendByteSPI>
	SendByteSPI(cmd&0xf0);  						   	  // send the higher nibble first
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	220f      	movs	r2, #15
 80006b4:	4393      	bics	r3, r2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff ffaf 	bl	800061c <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  					      // send the lower nibble
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	011b      	lsls	r3, r3, #4
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	0018      	movs	r0, r3
 80006c8:	f7ff ffa8 	bl	800061c <SendByteSPI>
	delay_us(50);
 80006cc:	2032      	movs	r0, #50	@ 0x32
 80006ce:	f000 f9fb 	bl	8000ac8 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);   // PUll the CS LOW
 80006d2:	23a0      	movs	r3, #160	@ 0xa0
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	2200      	movs	r2, #0
 80006d8:	2101      	movs	r1, #1
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 ffae 	bl	800163c <HAL_GPIO_WritePin>
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	0002      	movs	r2, r0
 80006f0:	1dfb      	adds	r3, r7, #7
 80006f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  	// PUll the CS high
 80006f4:	23a0      	movs	r3, #160	@ 0xa0
 80006f6:	05db      	lsls	r3, r3, #23
 80006f8:	2201      	movs	r2, #1
 80006fa:	2101      	movs	r1, #1
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 ff9d 	bl	800163c <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  							// send the SYNC + RS(1)
 8000702:	20fa      	movs	r0, #250	@ 0xfa
 8000704:	f7ff ff8a 	bl	800061c <SendByteSPI>
	SendByteSPI(data&0xf0);  							// send the higher nibble first
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	220f      	movs	r2, #15
 800070e:	4393      	bics	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff ff82 	bl	800061c <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  						// send the lower nibble
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	b2db      	uxtb	r3, r3
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ff7b 	bl	800061c <SendByteSPI>
	delay_us(50);
 8000726:	2032      	movs	r0, #50	@ 0x32
 8000728:	f000 f9ce 	bl	8000ac8 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET); // PUll the CS LOW
 800072c:	23a0      	movs	r3, #160	@ 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	0018      	movs	r0, r3
 8000736:	f000 ff81 	bl	800163c <HAL_GPIO_WritePin>
}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}

08000742 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8000742:	b580      	push	{r7, lr}
 8000744:	b084      	sub	sp, #16
 8000746:	af00      	add	r7, sp, #0
 8000748:	60f8      	str	r0, [r7, #12]
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
    switch (row)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d01e      	beq.n	8000792 <ST7920_SendString+0x50>
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	2b03      	cmp	r3, #3
 8000758:	dc20      	bgt.n	800079c <ST7920_SendString+0x5a>
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d013      	beq.n	8000788 <ST7920_SendString+0x46>
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b02      	cmp	r3, #2
 8000764:	dc1a      	bgt.n	800079c <ST7920_SendString+0x5a>
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <ST7920_SendString+0x32>
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d005      	beq.n	800077e <ST7920_SendString+0x3c>
 8000772:	e013      	b.n	800079c <ST7920_SendString+0x5a>
    {
        case 0:
            col |= 0x80;
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	2280      	movs	r2, #128	@ 0x80
 8000778:	4313      	orrs	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
            break;
 800077c:	e013      	b.n	80007a6 <ST7920_SendString+0x64>
        case 1:
            col |= 0x90;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	2290      	movs	r2, #144	@ 0x90
 8000782:	4313      	orrs	r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
            break;
 8000786:	e00e      	b.n	80007a6 <ST7920_SendString+0x64>
        case 2:
            col |= 0x88;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	2288      	movs	r2, #136	@ 0x88
 800078c:	4313      	orrs	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
            break;
 8000790:	e009      	b.n	80007a6 <ST7920_SendString+0x64>
        case 3:
            col |= 0x98;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	2298      	movs	r2, #152	@ 0x98
 8000796:	4313      	orrs	r3, r2
 8000798:	60bb      	str	r3, [r7, #8]
            break;
 800079a:	e004      	b.n	80007a6 <ST7920_SendString+0x64>
        default:
            col |= 0x80;
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	2280      	movs	r2, #128	@ 0x80
 80007a0:	4313      	orrs	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]
            break;
 80007a4:	46c0      	nop			@ (mov r8, r8)
    }

    ST7920_SendCmd(col);
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff ff6f 	bl	800068e <ST7920_SendCmd>

    while (*string)
 80007b0:	e006      	b.n	80007c0 <ST7920_SendString+0x7e>
    	{
    		ST7920_SendData(*string++);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	1c5a      	adds	r2, r3, #1
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff ff94 	bl	80006e8 <ST7920_SendData>
    while (*string)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f4      	bne.n	80007b2 <ST7920_SendString+0x70>
    	}
}
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b004      	add	sp, #16
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <ST7920_GraphicMode>:

/* Switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode */
void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d115      	bne.n	800080e <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  	// 8 bit mode
 80007e2:	2030      	movs	r0, #48	@ 0x30
 80007e4:	f7ff ff53 	bl	800068e <ST7920_SendCmd>
		HAL_Delay (1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 fcd5 	bl	8001198 <HAL_Delay>
		ST7920_SendCmd(0x34);  	// switch to Extended instructions
 80007ee:	2034      	movs	r0, #52	@ 0x34
 80007f0:	f7ff ff4d 	bl	800068e <ST7920_SendCmd>
		HAL_Delay (1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 fccf 	bl	8001198 <HAL_Delay>
		ST7920_SendCmd(0x36);  	// enable graphics
 80007fa:	2036      	movs	r0, #54	@ 0x36
 80007fc:	f7ff ff47 	bl	800068e <ST7920_SendCmd>
		HAL_Delay (1);
 8000800:	2001      	movs	r0, #1
 8000802:	f000 fcc9 	bl	8001198 <HAL_Delay>
		Graphic_Check = 1;  	// update the variable
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <ST7920_GraphicMode+0x5c>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  	// 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  	// update the variable
	}
}
 800080c:	e00b      	b.n	8000826 <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d108      	bne.n	8000826 <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  	// 8 bit mode
 8000814:	2030      	movs	r0, #48	@ 0x30
 8000816:	f7ff ff3a 	bl	800068e <ST7920_SendCmd>
		HAL_Delay (1);
 800081a:	2001      	movs	r0, #1
 800081c:	f000 fcbc 	bl	8001198 <HAL_Delay>
		Graphic_Check = 0;  	// update the variable
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <ST7920_GraphicMode+0x5c>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	20000028 	.word	0x20000028

08000834 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000834:	b5b0      	push	{r4, r5, r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 800083c:	230e      	movs	r3, #14
 800083e:	18fb      	adds	r3, r7, r3
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
 8000844:	e08f      	b.n	8000966 <ST7920_DrawBitmap+0x132>
	{
		if(y < 32)
 8000846:	230e      	movs	r3, #14
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b1f      	cmp	r3, #31
 800084e:	d840      	bhi.n	80008d2 <ST7920_DrawBitmap+0x9e>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000850:	230f      	movs	r3, #15
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
 8000858:	e035      	b.n	80008c6 <ST7920_DrawBitmap+0x92>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);					// Vertical coordinate of the screen is specified first. (0-31)
 800085a:	250e      	movs	r5, #14
 800085c:	197b      	adds	r3, r7, r5
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	4252      	negs	r2, r2
 8000864:	4313      	orrs	r3, r2
 8000866:	b2db      	uxtb	r3, r3
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ff10 	bl	800068e <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);					// Then horizontal coordinate of the screen is specified. (0-8)
 800086e:	240f      	movs	r4, #15
 8000870:	193b      	adds	r3, r7, r4
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2280      	movs	r2, #128	@ 0x80
 8000876:	4252      	negs	r2, r2
 8000878:	4313      	orrs	r3, r2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff ff06 	bl	800068e <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 8000882:	193b      	adds	r3, r7, r4
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	197b      	adds	r3, r7, r5
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	001a      	movs	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	189b      	adds	r3, r3, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff ff25 	bl	80006e8 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);		// Data to the lower byte is sent to the coordinate.
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	197b      	adds	r3, r7, r5
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	011b      	lsls	r3, r3, #4
 80008ac:	18d3      	adds	r3, r2, r3
 80008ae:	001a      	movs	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	189b      	adds	r3, r3, r2
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0018      	movs	r0, r3
 80008b8:	f7ff ff16 	bl	80006e8 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	3201      	adds	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
 80008c6:	230f      	movs	r3, #15
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b07      	cmp	r3, #7
 80008ce:	d9c4      	bls.n	800085a <ST7920_DrawBitmap+0x26>
 80008d0:	e043      	b.n	800095a <ST7920_DrawBitmap+0x126>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80008d2:	230f      	movs	r3, #15
 80008d4:	18fb      	adds	r3, r7, r3
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e039      	b.n	8000950 <ST7920_DrawBitmap+0x11c>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));				// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 80008dc:	250e      	movs	r5, #14
 80008de:	197b      	adds	r3, r7, r5
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	3b20      	subs	r3, #32
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	4252      	negs	r2, r2
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	0018      	movs	r0, r3
 80008f4:	f7ff fecb 	bl	800068e <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80008f8:	240f      	movs	r4, #15
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2278      	movs	r2, #120	@ 0x78
 8000900:	4252      	negs	r2, r2
 8000902:	4313      	orrs	r3, r2
 8000904:	b2db      	uxtb	r3, r3
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff fec1 	bl	800068e <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 800090c:	193b      	adds	r3, r7, r4
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	197b      	adds	r3, r7, r5
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	18d3      	adds	r3, r2, r3
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	001a      	movs	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	189b      	adds	r3, r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff fee0 	bl	80006e8 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 8000928:	193b      	adds	r3, r7, r4
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	197b      	adds	r3, r7, r5
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	011b      	lsls	r3, r3, #4
 8000936:	18d3      	adds	r3, r2, r3
 8000938:	001a      	movs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	189b      	adds	r3, r3, r2
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fed1 	bl	80006e8 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8000946:	193b      	adds	r3, r7, r4
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	193b      	adds	r3, r7, r4
 800094c:	3201      	adds	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	230f      	movs	r3, #15
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b07      	cmp	r3, #7
 8000958:	d9c0      	bls.n	80008dc <ST7920_DrawBitmap+0xa8>
	for(y = 0; y < 64; y++)
 800095a:	210e      	movs	r1, #14
 800095c:	187b      	adds	r3, r7, r1
 800095e:	781a      	ldrb	r2, [r3, #0]
 8000960:	187b      	adds	r3, r7, r1
 8000962:	3201      	adds	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	230e      	movs	r3, #14
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b3f      	cmp	r3, #63	@ 0x3f
 800096e:	d800      	bhi.n	8000972 <ST7920_DrawBitmap+0x13e>
 8000970:	e769      	b.n	8000846 <ST7920_DrawBitmap+0x12>
			}
		}

	}
}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46c0      	nop			@ (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bdb0      	pop	{r4, r5, r7, pc}

0800097c <ST7920_Clear>:
{
	ST7920_DrawBitmap(image);
}

void ST7920_Clear()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000982:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <ST7920_Clear+0xa8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d141      	bne.n	8000a0e <ST7920_Clear+0x92>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 800098a:	1dbb      	adds	r3, r7, #6
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	e038      	b.n	8000a04 <ST7920_Clear+0x88>
		{
			if(y < 32)
 8000992:	1dbb      	adds	r3, r7, #6
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b1f      	cmp	r3, #31
 8000998:	d80c      	bhi.n	80009b4 <ST7920_Clear+0x38>
			{
				ST7920_SendCmd(0x80 | y);
 800099a:	1dbb      	adds	r3, r7, #6
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	4252      	negs	r2, r2
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff fe71 	bl	800068e <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 80009ac:	2080      	movs	r0, #128	@ 0x80
 80009ae:	f7ff fe6e 	bl	800068e <ST7920_SendCmd>
 80009b2:	e00f      	b.n	80009d4 <ST7920_Clear+0x58>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	3b20      	subs	r3, #32
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	b25b      	sxtb	r3, r3
 80009be:	2280      	movs	r2, #128	@ 0x80
 80009c0:	4252      	negs	r2, r2
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	0018      	movs	r0, r3
 80009ca:	f7ff fe60 	bl	800068e <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 80009ce:	2088      	movs	r0, #136	@ 0x88
 80009d0:	f7ff fe5d 	bl	800068e <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	e00a      	b.n	80009f2 <ST7920_Clear+0x76>
			{
				ST7920_SendData(0);
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff fe83 	bl	80006e8 <ST7920_SendData>
				ST7920_SendData(0);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fe80 	bl	80006e8 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781a      	ldrb	r2, [r3, #0]
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	3201      	adds	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b07      	cmp	r3, #7
 80009f8:	d9f0      	bls.n	80009dc <ST7920_Clear+0x60>
		for(y = 0; y < 64; y++)
 80009fa:	1dbb      	adds	r3, r7, #6
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	3201      	adds	r2, #1
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a0a:	d9c2      	bls.n	8000992 <ST7920_Clear+0x16>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 8000a0c:	e005      	b.n	8000a1a <ST7920_Clear+0x9e>
		ST7920_SendCmd(0x01);   // clear the display using command
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fe3d 	bl	800068e <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8000a14:	2002      	movs	r0, #2
 8000a16:	f000 fbbf 	bl	8001198 <HAL_Delay>
}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b002      	add	sp, #8
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	20000028 	.word	0x20000028

08000a28 <ST7920_Init>:

void ST7920_Init (void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <ST7920_Init+0x84>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2102      	movs	r1, #2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fe02 	bl	800163c <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f000 fbad 	bl	8001198 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <ST7920_Init+0x84>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	2102      	movs	r1, #2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 fdf9 	bl	800163c <HAL_GPIO_WritePin>

	HAL_Delay(50);   		//wait for >40 ms
 8000a4a:	2032      	movs	r0, #50	@ 0x32
 8000a4c:	f000 fba4 	bl	8001198 <HAL_Delay>


	ST7920_SendCmd(0x30);  	// 8bit mode
 8000a50:	2030      	movs	r0, #48	@ 0x30
 8000a52:	f7ff fe1c 	bl	800068e <ST7920_SendCmd>
	delay_us(110);  		//  >100us delay
 8000a56:	206e      	movs	r0, #110	@ 0x6e
 8000a58:	f000 f836 	bl	8000ac8 <delay_us>

	ST7920_SendCmd(0x30);  	// 8bit mode
 8000a5c:	2030      	movs	r0, #48	@ 0x30
 8000a5e:	f7ff fe16 	bl	800068e <ST7920_SendCmd>
	delay_us(40);  			// >37us delay
 8000a62:	2028      	movs	r0, #40	@ 0x28
 8000a64:	f000 f830 	bl	8000ac8 <delay_us>

	ST7920_SendCmd(0x08);  	// D=0, C=0, B=0
 8000a68:	2008      	movs	r0, #8
 8000a6a:	f7ff fe10 	bl	800068e <ST7920_SendCmd>
	delay_us(110);  		// >100us delay
 8000a6e:	206e      	movs	r0, #110	@ 0x6e
 8000a70:	f000 f82a 	bl	8000ac8 <delay_us>

	ST7920_SendCmd(0x01);  	// clear screen
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff fe0a 	bl	800068e <ST7920_SendCmd>
	HAL_Delay(12);  		// >10 ms delay
 8000a7a:	200c      	movs	r0, #12
 8000a7c:	f000 fb8c 	bl	8001198 <HAL_Delay>


	ST7920_SendCmd(0x06);  	// cursor increment right no shift
 8000a80:	2006      	movs	r0, #6
 8000a82:	f7ff fe04 	bl	800068e <ST7920_SendCmd>
	HAL_Delay(1);  			// 1ms delay
 8000a86:	2001      	movs	r0, #1
 8000a88:	f000 fb86 	bl	8001198 <HAL_Delay>

	ST7920_SendCmd(0x0C);  	// D=1, C=0, B=0
 8000a8c:	200c      	movs	r0, #12
 8000a8e:	f7ff fdfe 	bl	800068e <ST7920_SendCmd>
    HAL_Delay(1);  			// 1ms delay
 8000a92:	2001      	movs	r0, #1
 8000a94:	f000 fb80 	bl	8001198 <HAL_Delay>

	ST7920_SendCmd(0x02);  	// return to home
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f7ff fdf8 	bl	800068e <ST7920_SendCmd>
	HAL_Delay(1);  			// 1ms delay
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f000 fb7a 	bl	8001198 <HAL_Delay>

}
 8000aa4:	46c0      	nop			@ (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	50000400 	.word	0x50000400

08000ab0 <delay_init>:

extern TIM_HandleTypeDef htim1;


void delay_init ()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);  					// Change according to setup
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <delay_init+0x14>)
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 fcfe 	bl	80024b8 <HAL_TIM_Base_Start>
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	2000002c 	.word	0x2000002c

08000ac8 <delay_us>:

void delay_us (uint16_t delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	0002      	movs	r2, r0
 8000ad0:	1dbb      	adds	r3, r7, #6
 8000ad2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  				// Reset the counter
 8000ad4:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <delay_us+0x30>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // Wait for the delay to complete
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <delay_us+0x30>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ae4:	1dbb      	adds	r3, r7, #6
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d3f8      	bcc.n	8000ade <delay_us+0x16>
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46c0      	nop			@ (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	2000002c 	.word	0x2000002c

08000afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b00:	f000 fac4 	bl	800108c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b04:	f000 f83a 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b08:	f000 f92a 	bl	8000d60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b0c:	f000 f8da 	bl	8000cc4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000b10:	f000 f87c 	bl	8000c0c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  delay_init();
 8000b14:	f7ff ffcc 	bl	8000ab0 <delay_init>

  ST7920_Init();
 8000b18:	f7ff ff86 	bl	8000a28 <ST7920_Init>

  ST7920_SendString(0,2, "");
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <main+0x70>)
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2102      	movs	r1, #2
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fe0d 	bl	8000742 <ST7920_SendString>
  ST7920_SendString(1,0, "Design Challenge");
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <main+0x74>)
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fe07 	bl	8000742 <ST7920_SendString>
  ST7920_SendString(2,0, "Vehicle Online");
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <main+0x78>)
 8000b36:	001a      	movs	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f7ff fe01 	bl	8000742 <ST7920_SendString>
  ST7920_SendString(3,2, "");
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <main+0x70>)
 8000b42:	001a      	movs	r2, r3
 8000b44:	2102      	movs	r1, #2
 8000b46:	2003      	movs	r0, #3
 8000b48:	f7ff fdfb 	bl	8000742 <ST7920_SendString>

  HAL_Delay(2000);
 8000b4c:	23fa      	movs	r3, #250	@ 0xfa
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 fb21 	bl	8001198 <HAL_Delay>
  ST7920_Clear();
 8000b56:	f7ff ff11 	bl	800097c <ST7920_Clear>

  ST7920_GraphicMode(1);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fe3a 	bl	80007d4 <ST7920_GraphicMode>
  ST7920_DrawBitmap(BigLogo);
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <main+0x7c>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fe66 	bl	8000834 <ST7920_DrawBitmap>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	e7fd      	b.n	8000b68 <main+0x6c>
 8000b6c:	08003770 	.word	0x08003770
 8000b70:	08003774 	.word	0x08003774
 8000b74:	08003788 	.word	0x08003788
 8000b78:	08003798 	.word	0x08003798

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b093      	sub	sp, #76	@ 0x4c
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	2410      	movs	r4, #16
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	0018      	movs	r0, r3
 8000b88:	2338      	movs	r3, #56	@ 0x38
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	f002 fdb7 	bl	8003700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b92:	003b      	movs	r3, r7
 8000b94:	0018      	movs	r0, r3
 8000b96:	2310      	movs	r3, #16
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	f002 fdb0 	bl	8003700 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fd67 	bl	8001678 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2202      	movs	r2, #2
 8000bae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2280      	movs	r2, #128	@ 0x80
 8000bb4:	0052      	lsls	r2, r2, #1
 8000bb6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2240      	movs	r2, #64	@ 0x40
 8000bc2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fd9f 	bl	8001710 <HAL_RCC_OscConfig>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000bd6:	f000 f94d 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	003b      	movs	r3, r7
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be0:	003b      	movs	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	003b      	movs	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bec:	003b      	movs	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 f8a4 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000c00:	f000 f938 	bl	8000e74 <Error_Handler>
  }
}
 8000c04:	46c0      	nop			@ (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b013      	add	sp, #76	@ 0x4c
 8000c0a:	bd90      	pop	{r4, r7, pc}

08000c0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	2310      	movs	r3, #16
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	0018      	movs	r0, r3
 8000c18:	2310      	movs	r3, #16
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f002 fd6f 	bl	8003700 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	0018      	movs	r0, r3
 8000c26:	230c      	movs	r3, #12
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f002 fd68 	bl	8003700 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c30:	4b21      	ldr	r3, [pc, #132]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c32:	4a22      	ldr	r2, [pc, #136]	@ (8000cbc <MX_TIM1_Init+0xb0>)
 8000c34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8000c36:	4b20      	ldr	r3, [pc, #128]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c38:	220f      	movs	r2, #15
 8000c3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c44:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc0 <MX_TIM1_Init+0xb4>)
 8000c46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 fbd3 	bl	8002408 <HAL_TIM_Base_Init>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000c66:	f000 f905 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2280      	movs	r2, #128	@ 0x80
 8000c70:	0152      	lsls	r2, r2, #5
 8000c72:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c74:	187a      	adds	r2, r7, r1
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 fc70 	bl	8002560 <HAL_TIM_ConfigClockSource>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c84:	f000 f8f6 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2200      	movs	r2, #0
 8000c92:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c9a:	1d3a      	adds	r2, r7, #4
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <MX_TIM1_Init+0xac>)
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 fe5d 	bl	8002960 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000caa:	f000 f8e3 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b008      	add	sp, #32
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	2000002c 	.word	0x2000002c
 8000cbc:	40012c00 	.word	0x40012c00
 8000cc0:	0000ffff 	.word	0x0000ffff

08000cc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000cca:	4a24      	ldr	r2, [pc, #144]	@ (8000d5c <MX_USART2_UART_Init+0x98>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cce:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000cd0:	22e1      	movs	r2, #225	@ 0xe1
 8000cd2:	0252      	lsls	r2, r2, #9
 8000cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f001 fe94 	bl	8002a3c <HAL_UART_Init>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d18:	f000 f8ac 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	0018      	movs	r0, r3
 8000d22:	f002 fc0d 	bl	8003540 <HAL_UARTEx_SetTxFifoThreshold>
 8000d26:	1e03      	subs	r3, r0, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d2a:	f000 f8a3 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000d30:	2100      	movs	r1, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f002 fc44 	bl	80035c0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d3c:	f000 f89a 	bl	8000e74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <MX_USART2_UART_Init+0x94>)
 8000d42:	0018      	movs	r0, r3
 8000d44:	f002 fbc2 	bl	80034cc <HAL_UARTEx_DisableFifoMode>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d4c:	f000 f892 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	20000078 	.word	0x20000078
 8000d5c:	40004400 	.word	0x40004400

08000d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b08b      	sub	sp, #44	@ 0x2c
 8000d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	2414      	movs	r4, #20
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	2314      	movs	r3, #20
 8000d6e:	001a      	movs	r2, r3
 8000d70:	2100      	movs	r1, #0
 8000d72:	f002 fcc5 	bl	8003700 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	4b3d      	ldr	r3, [pc, #244]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000d78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d82:	4b3a      	ldr	r3, [pc, #232]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d86:	2204      	movs	r2, #4
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8e:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d92:	4b36      	ldr	r3, [pc, #216]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000d94:	2120      	movs	r1, #32
 8000d96:	430a      	orrs	r2, r1
 8000d98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d9a:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d9e:	2220      	movs	r2, #32
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b31      	ldr	r3, [pc, #196]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000daa:	4b30      	ldr	r3, [pc, #192]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	430a      	orrs	r2, r1
 8000db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000db2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000db6:	2201      	movs	r2, #1
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dca:	4b28      	ldr	r3, [pc, #160]	@ (8000e6c <MX_GPIO_Init+0x10c>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dce:	2202      	movs	r2, #2
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|SID_Pin|SCLK_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000dd6:	23a0      	movs	r3, #160	@ 0xa0
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2133      	movs	r1, #51	@ 0x33
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 fc2c 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000de4:	4b22      	ldr	r3, [pc, #136]	@ (8000e70 <MX_GPIO_Init+0x110>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 fc26 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin SID_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = CS_Pin|SID_Pin|SCLK_Pin;
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	2213      	movs	r2, #19
 8000df4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	2201      	movs	r2, #1
 8000dfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	193b      	adds	r3, r7, r4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	193a      	adds	r2, r7, r4
 8000e0a:	23a0      	movs	r3, #160	@ 0xa0
 8000e0c:	05db      	lsls	r3, r3, #23
 8000e0e:	0011      	movs	r1, r2
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 faaf 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2220      	movs	r2, #32
 8000e1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2201      	movs	r2, #1
 8000e20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	193a      	adds	r2, r7, r4
 8000e30:	23a0      	movs	r3, #160	@ 0xa0
 8000e32:	05db      	lsls	r3, r3, #23
 8000e34:	0011      	movs	r1, r2
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 fa9c 	bl	8001374 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000e3c:	0021      	movs	r1, r4
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2202      	movs	r2, #2
 8000e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2201      	movs	r2, #1
 8000e48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <MX_GPIO_Init+0x110>)
 8000e5a:	0019      	movs	r1, r3
 8000e5c:	0010      	movs	r0, r2
 8000e5e:	f000 fa89 	bl	8001374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e62:	46c0      	nop			@ (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b00b      	add	sp, #44	@ 0x2c
 8000e68:	bd90      	pop	{r4, r7, pc}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	50000400 	.word	0x50000400

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	2201      	movs	r2, #1
 8000e98:	4013      	ands	r3, r2
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000ea0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	0549      	lsls	r1, r1, #21
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000eae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	055b      	lsls	r3, r3, #21
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000eba:	23c0      	movs	r3, #192	@ 0xc0
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 f98e 	bl	80011e0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b002      	add	sp, #8
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b091      	sub	sp, #68	@ 0x44
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	240c      	movs	r4, #12
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	2334      	movs	r3, #52	@ 0x34
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f002 fc0c 	bl	8003700 <memset>
  if(htim_base->Instance==TIM1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a11      	ldr	r2, [pc, #68]	@ (8000f34 <HAL_TIM_Base_MspInit+0x64>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d11c      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	2280      	movs	r2, #128	@ 0x80
 8000ef6:	0392      	lsls	r2, r2, #14
 8000ef8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	2200      	movs	r2, #0
 8000efe:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	0018      	movs	r0, r3
 8000f04:	f001 f8c8 	bl	8002098 <HAL_RCCEx_PeriphCLKConfig>
 8000f08:	1e03      	subs	r3, r0, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000f0c:	f7ff ffb2 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f10:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <HAL_TIM_Base_MspInit+0x68>)
 8000f12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_TIM_Base_MspInit+0x68>)
 8000f16:	2180      	movs	r1, #128	@ 0x80
 8000f18:	0109      	lsls	r1, r1, #4
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_TIM_Base_MspInit+0x68>)
 8000f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f22:	2380      	movs	r3, #128	@ 0x80
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	4013      	ands	r3, r2
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b011      	add	sp, #68	@ 0x44
 8000f32:	bd90      	pop	{r4, r7, pc}
 8000f34:	40012c00 	.word	0x40012c00
 8000f38:	40021000 	.word	0x40021000

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b097      	sub	sp, #92	@ 0x5c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	2344      	movs	r3, #68	@ 0x44
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	0018      	movs	r0, r3
 8000f4a:	2314      	movs	r3, #20
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f002 fbd6 	bl	8003700 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f54:	2410      	movs	r4, #16
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	0018      	movs	r0, r3
 8000f5a:	2334      	movs	r3, #52	@ 0x34
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	f002 fbce 	bl	8003700 <memset>
  if(huart->Instance==USART2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a22      	ldr	r2, [pc, #136]	@ (8000ff4 <HAL_UART_MspInit+0xb8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d13e      	bne.n	8000fec <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	2202      	movs	r2, #2
 8000f72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f001 f88b 	bl	8002098 <HAL_RCCEx_PeriphCLKConfig>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f86:	f7ff ff75 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <HAL_UART_MspInit+0xbc>)
 8000f8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <HAL_UART_MspInit+0xbc>)
 8000f90:	2180      	movs	r1, #128	@ 0x80
 8000f92:	0289      	lsls	r1, r1, #10
 8000f94:	430a      	orrs	r2, r1
 8000f96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <HAL_UART_MspInit+0xbc>)
 8000f9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f9c:	2380      	movs	r3, #128	@ 0x80
 8000f9e:	029b      	lsls	r3, r3, #10
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <HAL_UART_MspInit+0xbc>)
 8000fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <HAL_UART_MspInit+0xbc>)
 8000fac:	2101      	movs	r1, #1
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <HAL_UART_MspInit+0xbc>)
 8000fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000fbe:	2144      	movs	r1, #68	@ 0x44
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2202      	movs	r2, #2
 8000fca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2201      	movs	r2, #1
 8000fd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2201      	movs	r2, #1
 8000fdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	187a      	adds	r2, r7, r1
 8000fe0:	23a0      	movs	r3, #160	@ 0xa0
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	0011      	movs	r1, r2
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 f9c4 	bl	8001374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b017      	add	sp, #92	@ 0x5c
 8000ff2:	bd90      	pop	{r4, r7, pc}
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	40021000 	.word	0x40021000

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	e7fd      	b.n	8001000 <NMI_Handler+0x4>

08001004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	e7fd      	b.n	8001008 <HardFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f89c 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001038:	480d      	ldr	r0, [pc, #52]	@ (8001070 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800103c:	f7ff fff7 	bl	800102e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	@ (8001078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	@ (800107c <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	@ (8001084 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001066:	f002 fb53 	bl	8003710 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800106a:	f7ff fd47 	bl	8000afc <main>

0800106e <LoopForever>:

LoopForever:
  b LoopForever
 800106e:	e7fe      	b.n	800106e <LoopForever>
  ldr   r0, =_estack
 8001070:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800107c:	08003c30 	.word	0x08003c30
  ldr r2, =_sbss
 8001080:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001084:	20000110 	.word	0x20000110

08001088 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC1_COMP_IRQHandler>
	...

0800108c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <HAL_Init+0x3c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_Init+0x3c>)
 800109e:	2180      	movs	r1, #128	@ 0x80
 80010a0:	0049      	lsls	r1, r1, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 f810 	bl	80010cc <HAL_InitTick>
 80010ac:	1e03      	subs	r3, r0, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010b0:	1dfb      	adds	r3, r7, #7
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e001      	b.n	80010bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fee2 	bl	8000e80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	781b      	ldrb	r3, [r3, #0]
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40022000 	.word	0x40022000

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	230f      	movs	r3, #15
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_InitTick+0x88>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d02b      	beq.n	800113c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <HAL_InitTick+0x8c>)
 80010e6:	681c      	ldr	r4, [r3, #0]
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <HAL_InitTick+0x88>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	0019      	movs	r1, r3
 80010ee:	23fa      	movs	r3, #250	@ 0xfa
 80010f0:	0098      	lsls	r0, r3, #2
 80010f2:	f7ff f807 	bl	8000104 <__udivsi3>
 80010f6:	0003      	movs	r3, r0
 80010f8:	0019      	movs	r1, r3
 80010fa:	0020      	movs	r0, r4
 80010fc:	f7ff f802 	bl	8000104 <__udivsi3>
 8001100:	0003      	movs	r3, r0
 8001102:	0018      	movs	r0, r3
 8001104:	f000 f929 	bl	800135a <HAL_SYSTICK_Config>
 8001108:	1e03      	subs	r3, r0, #0
 800110a:	d112      	bne.n	8001132 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d80a      	bhi.n	8001128 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	2301      	movs	r3, #1
 8001116:	425b      	negs	r3, r3
 8001118:	2200      	movs	r2, #0
 800111a:	0018      	movs	r0, r3
 800111c:	f000 f908 	bl	8001330 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001120:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <HAL_InitTick+0x90>)
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e00d      	b.n	8001144 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e008      	b.n	8001144 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001132:	230f      	movs	r3, #15
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e003      	b.n	8001144 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800113c:	230f      	movs	r3, #15
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001144:	230f      	movs	r3, #15
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	781b      	ldrb	r3, [r3, #0]
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b005      	add	sp, #20
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	20000008 	.word	0x20000008
 8001158:	20000000 	.word	0x20000000
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_IncTick+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_IncTick+0x20>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	18d2      	adds	r2, r2, r3
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_IncTick+0x20>)
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	20000008 	.word	0x20000008
 8001180:	2000010c 	.word	0x2000010c

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b02      	ldr	r3, [pc, #8]	@ (8001194 <HAL_GetTick+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	2000010c 	.word	0x2000010c

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff fff0 	bl	8001184 <HAL_GetTick>
 80011a4:	0003      	movs	r3, r0
 80011a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3301      	adds	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	@ (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	001a      	movs	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	189b      	adds	r3, r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	f7ff ffe0 	bl	8001184 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b004      	add	sp, #16
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	20000008 	.word	0x20000008

080011e0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80011e8:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a06      	ldr	r2, [pc, #24]	@ (8001208 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	0019      	movs	r1, r3
 80011f2:	4b04      	ldr	r3, [pc, #16]	@ (8001204 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	40010000 	.word	0x40010000
 8001208:	fffff9ff 	.word	0xfffff9ff

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	0002      	movs	r2, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001220:	d828      	bhi.n	8001274 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001222:	4a2f      	ldr	r2, [pc, #188]	@ (80012e0 <__NVIC_SetPriority+0xd4>)
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b25b      	sxtb	r3, r3
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	33c0      	adds	r3, #192	@ 0xc0
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	589b      	ldr	r3, [r3, r2]
 8001232:	1dfa      	adds	r2, r7, #7
 8001234:	7812      	ldrb	r2, [r2, #0]
 8001236:	0011      	movs	r1, r2
 8001238:	2203      	movs	r2, #3
 800123a:	400a      	ands	r2, r1
 800123c:	00d2      	lsls	r2, r2, #3
 800123e:	21ff      	movs	r1, #255	@ 0xff
 8001240:	4091      	lsls	r1, r2
 8001242:	000a      	movs	r2, r1
 8001244:	43d2      	mvns	r2, r2
 8001246:	401a      	ands	r2, r3
 8001248:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	019b      	lsls	r3, r3, #6
 800124e:	22ff      	movs	r2, #255	@ 0xff
 8001250:	401a      	ands	r2, r3
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	0018      	movs	r0, r3
 8001258:	2303      	movs	r3, #3
 800125a:	4003      	ands	r3, r0
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001260:	481f      	ldr	r0, [pc, #124]	@ (80012e0 <__NVIC_SetPriority+0xd4>)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	b25b      	sxtb	r3, r3
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	430a      	orrs	r2, r1
 800126c:	33c0      	adds	r3, #192	@ 0xc0
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001272:	e031      	b.n	80012d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001274:	4a1b      	ldr	r2, [pc, #108]	@ (80012e4 <__NVIC_SetPriority+0xd8>)
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	0019      	movs	r1, r3
 800127c:	230f      	movs	r3, #15
 800127e:	400b      	ands	r3, r1
 8001280:	3b08      	subs	r3, #8
 8001282:	089b      	lsrs	r3, r3, #2
 8001284:	3306      	adds	r3, #6
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	18d3      	adds	r3, r2, r3
 800128a:	3304      	adds	r3, #4
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1dfa      	adds	r2, r7, #7
 8001290:	7812      	ldrb	r2, [r2, #0]
 8001292:	0011      	movs	r1, r2
 8001294:	2203      	movs	r2, #3
 8001296:	400a      	ands	r2, r1
 8001298:	00d2      	lsls	r2, r2, #3
 800129a:	21ff      	movs	r1, #255	@ 0xff
 800129c:	4091      	lsls	r1, r2
 800129e:	000a      	movs	r2, r1
 80012a0:	43d2      	mvns	r2, r2
 80012a2:	401a      	ands	r2, r3
 80012a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	019b      	lsls	r3, r3, #6
 80012aa:	22ff      	movs	r2, #255	@ 0xff
 80012ac:	401a      	ands	r2, r3
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	0018      	movs	r0, r3
 80012b4:	2303      	movs	r3, #3
 80012b6:	4003      	ands	r3, r0
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <__NVIC_SetPriority+0xd8>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	001c      	movs	r4, r3
 80012c4:	230f      	movs	r3, #15
 80012c6:	4023      	ands	r3, r4
 80012c8:	3b08      	subs	r3, #8
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	430a      	orrs	r2, r1
 80012ce:	3306      	adds	r3, #6
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	18c3      	adds	r3, r0, r3
 80012d4:	3304      	adds	r3, #4
 80012d6:	601a      	str	r2, [r3, #0]
}
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	b003      	add	sp, #12
 80012de:	bd90      	pop	{r4, r7, pc}
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	1e5a      	subs	r2, r3, #1
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	045b      	lsls	r3, r3, #17
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d301      	bcc.n	8001300 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fc:	2301      	movs	r3, #1
 80012fe:	e010      	b.n	8001322 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <SysTick_Config+0x44>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	3a01      	subs	r2, #1
 8001306:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001308:	2301      	movs	r3, #1
 800130a:	425b      	negs	r3, r3
 800130c:	2103      	movs	r1, #3
 800130e:	0018      	movs	r0, r3
 8001310:	f7ff ff7c 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x44>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x44>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	210f      	movs	r1, #15
 800133c:	187b      	adds	r3, r7, r1
 800133e:	1c02      	adds	r2, r0, #0
 8001340:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	187b      	adds	r3, r7, r1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25b      	sxtb	r3, r3
 800134a:	0011      	movs	r1, r2
 800134c:	0018      	movs	r0, r3
 800134e:	f7ff ff5d 	bl	800120c <__NVIC_SetPriority>
}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff ffbf 	bl	80012e8 <SysTick_Config>
 800136a:	0003      	movs	r3, r0
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	b002      	add	sp, #8
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001382:	e147      	b.n	8001614 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2101      	movs	r1, #1
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4091      	lsls	r1, r2
 800138e:	000a      	movs	r2, r1
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d100      	bne.n	800139c <HAL_GPIO_Init+0x28>
 800139a:	e138      	b.n	800160e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2203      	movs	r2, #3
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d005      	beq.n	80013b4 <HAL_GPIO_Init+0x40>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d130      	bne.n	8001416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	409a      	lsls	r2, r3
 80013c2:	0013      	movs	r3, r2
 80013c4:	43da      	mvns	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	409a      	lsls	r2, r3
 80013d6:	0013      	movs	r3, r2
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ea:	2201      	movs	r2, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
 80013f0:	0013      	movs	r3, r2
 80013f2:	43da      	mvns	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	2201      	movs	r2, #1
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	409a      	lsls	r2, r3
 8001408:	0013      	movs	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2203      	movs	r2, #3
 800141c:	4013      	ands	r3, r2
 800141e:	2b03      	cmp	r3, #3
 8001420:	d017      	beq.n	8001452 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2203      	movs	r2, #3
 8001458:	4013      	ands	r3, r2
 800145a:	2b02      	cmp	r3, #2
 800145c:	d123      	bne.n	80014a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	0092      	lsls	r2, r2, #2
 8001468:	58d3      	ldr	r3, [r2, r3]
 800146a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	2207      	movs	r2, #7
 8001470:	4013      	ands	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	43da      	mvns	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	691a      	ldr	r2, [r3, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2107      	movs	r1, #7
 800148a:	400b      	ands	r3, r1
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	6939      	ldr	r1, [r7, #16]
 80014a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	43da      	mvns	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2203      	movs	r2, #3
 80014c4:	401a      	ands	r2, r3
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	409a      	lsls	r2, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	23c0      	movs	r3, #192	@ 0xc0
 80014e0:	029b      	lsls	r3, r3, #10
 80014e2:	4013      	ands	r3, r2
 80014e4:	d100      	bne.n	80014e8 <HAL_GPIO_Init+0x174>
 80014e6:	e092      	b.n	800160e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014e8:	4a50      	ldr	r2, [pc, #320]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3318      	adds	r3, #24
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	589b      	ldr	r3, [r3, r2]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2203      	movs	r2, #3
 80014fa:	4013      	ands	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	220f      	movs	r2, #15
 8001500:	409a      	lsls	r2, r3
 8001502:	0013      	movs	r3, r2
 8001504:	43da      	mvns	r2, r3
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	23a0      	movs	r3, #160	@ 0xa0
 8001510:	05db      	lsls	r3, r3, #23
 8001512:	429a      	cmp	r2, r3
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x1ca>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a45      	ldr	r2, [pc, #276]	@ (8001630 <HAL_GPIO_Init+0x2bc>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x1c6>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a44      	ldr	r2, [pc, #272]	@ (8001634 <HAL_GPIO_Init+0x2c0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x1c2>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a43      	ldr	r2, [pc, #268]	@ (8001638 <HAL_GPIO_Init+0x2c4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x1be>
 800152e:	2303      	movs	r3, #3
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x1cc>
 8001532:	2305      	movs	r3, #5
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x1cc>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x1cc>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x1cc>
 800153e:	2300      	movs	r3, #0
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	2103      	movs	r1, #3
 8001544:	400a      	ands	r2, r1
 8001546:	00d2      	lsls	r2, r2, #3
 8001548:	4093      	lsls	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001550:	4936      	ldr	r1, [pc, #216]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3318      	adds	r3, #24
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800155e:	4b33      	ldr	r3, [pc, #204]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43da      	mvns	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	2380      	movs	r3, #128	@ 0x80
 8001574:	035b      	lsls	r3, r3, #13
 8001576:	4013      	ands	r3, r2
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001588:	4b28      	ldr	r3, [pc, #160]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	039b      	lsls	r3, r3, #14
 80015a0:	4013      	ands	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015b2:	4a1e      	ldr	r2, [pc, #120]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 80015b4:	2384      	movs	r3, #132	@ 0x84
 80015b6:	58d3      	ldr	r3, [r2, r3]
 80015b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43da      	mvns	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	4013      	ands	r3, r2
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d8:	4914      	ldr	r1, [pc, #80]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 80015da:	2284      	movs	r2, #132	@ 0x84
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80015e0:	4a12      	ldr	r2, [pc, #72]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 80015e2:	2380      	movs	r3, #128	@ 0x80
 80015e4:	58d3      	ldr	r3, [r2, r3]
 80015e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	43da      	mvns	r2, r3
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	2380      	movs	r3, #128	@ 0x80
 80015f8:	025b      	lsls	r3, r3, #9
 80015fa:	4013      	ands	r3, r2
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001606:	4909      	ldr	r1, [pc, #36]	@ (800162c <HAL_GPIO_Init+0x2b8>)
 8001608:	2280      	movs	r2, #128	@ 0x80
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	40da      	lsrs	r2, r3
 800161c:	1e13      	subs	r3, r2, #0
 800161e:	d000      	beq.n	8001622 <HAL_GPIO_Init+0x2ae>
 8001620:	e6b0      	b.n	8001384 <HAL_GPIO_Init+0x10>
  }
}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b006      	add	sp, #24
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40021800 	.word	0x40021800
 8001630:	50000400 	.word	0x50000400
 8001634:	50000800 	.word	0x50000800
 8001638:	50000c00 	.word	0x50000c00

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	0008      	movs	r0, r1
 8001646:	0011      	movs	r1, r2
 8001648:	1cbb      	adds	r3, r7, #2
 800164a:	1c02      	adds	r2, r0, #0
 800164c:	801a      	strh	r2, [r3, #0]
 800164e:	1c7b      	adds	r3, r7, #1
 8001650:	1c0a      	adds	r2, r1, #0
 8001652:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001654:	1c7b      	adds	r3, r7, #1
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d004      	beq.n	8001666 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800165c:	1cbb      	adds	r3, r7, #2
 800165e:	881a      	ldrh	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001664:	e003      	b.n	800166e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001666:	1cbb      	adds	r3, r7, #2
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001680:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a19      	ldr	r2, [pc, #100]	@ (80016ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001686:	4013      	ands	r3, r2
 8001688:	0019      	movs	r1, r3
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d11f      	bne.n	80016dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	0013      	movs	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	189b      	adds	r3, r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4912      	ldr	r1, [pc, #72]	@ (80016f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016aa:	0018      	movs	r0, r3
 80016ac:	f7fe fd2a 	bl	8000104 <__udivsi3>
 80016b0:	0003      	movs	r3, r0
 80016b2:	3301      	adds	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016b6:	e008      	b.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	e001      	b.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e009      	b.n	80016de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	401a      	ands	r2, r3
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	429a      	cmp	r2, r3
 80016da:	d0ed      	beq.n	80016b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	40007000 	.word	0x40007000
 80016ec:	fffff9ff 	.word	0xfffff9ff
 80016f0:	20000000 	.word	0x20000000
 80016f4:	000f4240 	.word	0x000f4240

080016f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80016fc:	4b03      	ldr	r3, [pc, #12]	@ (800170c <LL_RCC_GetAPB1Prescaler+0x14>)
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	23e0      	movs	r3, #224	@ 0xe0
 8001702:	01db      	lsls	r3, r3, #7
 8001704:	4013      	ands	r3, r2
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e2fe      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	4013      	ands	r3, r2
 800172a:	d100      	bne.n	800172e <HAL_RCC_OscConfig+0x1e>
 800172c:	e07c      	b.n	8001828 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800172e:	4bc3      	ldr	r3, [pc, #780]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2238      	movs	r2, #56	@ 0x38
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001738:	4bc0      	ldr	r3, [pc, #768]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2203      	movs	r2, #3
 800173e:	4013      	ands	r3, r2
 8001740:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2b10      	cmp	r3, #16
 8001746:	d102      	bne.n	800174e <HAL_RCC_OscConfig+0x3e>
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d002      	beq.n	8001754 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b08      	cmp	r3, #8
 8001752:	d10b      	bne.n	800176c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	4bb9      	ldr	r3, [pc, #740]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	029b      	lsls	r3, r3, #10
 800175c:	4013      	ands	r3, r2
 800175e:	d062      	beq.n	8001826 <HAL_RCC_OscConfig+0x116>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d15e      	bne.n	8001826 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e2d9      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	429a      	cmp	r2, r3
 8001776:	d107      	bne.n	8001788 <HAL_RCC_OscConfig+0x78>
 8001778:	4bb0      	ldr	r3, [pc, #704]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4baf      	ldr	r3, [pc, #700]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800177e:	2180      	movs	r1, #128	@ 0x80
 8001780:	0249      	lsls	r1, r1, #9
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e020      	b.n	80017ca <HAL_RCC_OscConfig+0xba>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	23a0      	movs	r3, #160	@ 0xa0
 800178e:	02db      	lsls	r3, r3, #11
 8001790:	429a      	cmp	r2, r3
 8001792:	d10e      	bne.n	80017b2 <HAL_RCC_OscConfig+0xa2>
 8001794:	4ba9      	ldr	r3, [pc, #676]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4ba8      	ldr	r3, [pc, #672]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800179a:	2180      	movs	r1, #128	@ 0x80
 800179c:	02c9      	lsls	r1, r1, #11
 800179e:	430a      	orrs	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	4ba6      	ldr	r3, [pc, #664]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4ba5      	ldr	r3, [pc, #660]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017a8:	2180      	movs	r1, #128	@ 0x80
 80017aa:	0249      	lsls	r1, r1, #9
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	e00b      	b.n	80017ca <HAL_RCC_OscConfig+0xba>
 80017b2:	4ba2      	ldr	r3, [pc, #648]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4ba1      	ldr	r3, [pc, #644]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017b8:	49a1      	ldr	r1, [pc, #644]	@ (8001a40 <HAL_RCC_OscConfig+0x330>)
 80017ba:	400a      	ands	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	4b9f      	ldr	r3, [pc, #636]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b9e      	ldr	r3, [pc, #632]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017c4:	499f      	ldr	r1, [pc, #636]	@ (8001a44 <HAL_RCC_OscConfig+0x334>)
 80017c6:	400a      	ands	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d014      	beq.n	80017fc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fcd7 	bl	8001184 <HAL_GetTick>
 80017d6:	0003      	movs	r3, r0
 80017d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fcd2 	bl	8001184 <HAL_GetTick>
 80017e0:	0002      	movs	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e298      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ee:	4b93      	ldr	r3, [pc, #588]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	@ 0x80
 80017f4:	029b      	lsls	r3, r3, #10
 80017f6:	4013      	ands	r3, r2
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0xcc>
 80017fa:	e015      	b.n	8001828 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fc:	f7ff fcc2 	bl	8001184 <HAL_GetTick>
 8001800:	0003      	movs	r3, r0
 8001802:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001806:	f7ff fcbd 	bl	8001184 <HAL_GetTick>
 800180a:	0002      	movs	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	@ 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e283      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001818:	4b88      	ldr	r3, [pc, #544]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	029b      	lsls	r3, r3, #10
 8001820:	4013      	ands	r3, r2
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0xf6>
 8001824:	e000      	b.n	8001828 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001826:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x124>
 8001832:	e099      	b.n	8001968 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001834:	4b81      	ldr	r3, [pc, #516]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2238      	movs	r2, #56	@ 0x38
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800183e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2203      	movs	r2, #3
 8001844:	4013      	ands	r3, r2
 8001846:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b10      	cmp	r3, #16
 800184c:	d102      	bne.n	8001854 <HAL_RCC_OscConfig+0x144>
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d002      	beq.n	800185a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d135      	bne.n	80018c6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800185a:	4b78      	ldr	r3, [pc, #480]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	@ 0x80
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	4013      	ands	r3, r2
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x162>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e256      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b72      	ldr	r3, [pc, #456]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a74      	ldr	r2, [pc, #464]	@ (8001a48 <HAL_RCC_OscConfig+0x338>)
 8001878:	4013      	ands	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	021a      	lsls	r2, r3, #8
 8001882:	4b6e      	ldr	r3, [pc, #440]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001884:	430a      	orrs	r2, r1
 8001886:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d112      	bne.n	80018b4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800188e:	4b6b      	ldr	r3, [pc, #428]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a6e      	ldr	r2, [pc, #440]	@ (8001a4c <HAL_RCC_OscConfig+0x33c>)
 8001894:	4013      	ands	r3, r2
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	4b67      	ldr	r3, [pc, #412]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800189e:	430a      	orrs	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018a2:	4b66      	ldr	r3, [pc, #408]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	0adb      	lsrs	r3, r3, #11
 80018a8:	2207      	movs	r2, #7
 80018aa:	4013      	ands	r3, r2
 80018ac:	4a68      	ldr	r2, [pc, #416]	@ (8001a50 <HAL_RCC_OscConfig+0x340>)
 80018ae:	40da      	lsrs	r2, r3
 80018b0:	4b68      	ldr	r3, [pc, #416]	@ (8001a54 <HAL_RCC_OscConfig+0x344>)
 80018b2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018b4:	4b68      	ldr	r3, [pc, #416]	@ (8001a58 <HAL_RCC_OscConfig+0x348>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff fc07 	bl	80010cc <HAL_InitTick>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d051      	beq.n	8001966 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e22c      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d030      	beq.n	8001930 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018ce:	4b5b      	ldr	r3, [pc, #364]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a4c <HAL_RCC_OscConfig+0x33c>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	0019      	movs	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	4b57      	ldr	r3, [pc, #348]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018e2:	4b56      	ldr	r3, [pc, #344]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b55      	ldr	r3, [pc, #340]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80018e8:	2180      	movs	r1, #128	@ 0x80
 80018ea:	0049      	lsls	r1, r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fc48 	bl	8001184 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff fc43 	bl	8001184 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e209      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800190c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	4013      	ands	r3, r2
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001918:	4b48      	ldr	r3, [pc, #288]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a48 <HAL_RCC_OscConfig+0x338>)
 800191e:	4013      	ands	r3, r2
 8001920:	0019      	movs	r1, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	021a      	lsls	r2, r3, #8
 8001928:	4b44      	ldr	r3, [pc, #272]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	e01b      	b.n	8001968 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001930:	4b42      	ldr	r3, [pc, #264]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b41      	ldr	r3, [pc, #260]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001936:	4949      	ldr	r1, [pc, #292]	@ (8001a5c <HAL_RCC_OscConfig+0x34c>)
 8001938:	400a      	ands	r2, r1
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fc22 	bl	8001184 <HAL_GetTick>
 8001940:	0003      	movs	r3, r0
 8001942:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fc1d 	bl	8001184 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1e3      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	4b38      	ldr	r3, [pc, #224]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	@ 0x80
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4013      	ands	r3, r2
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x236>
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001966:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2208      	movs	r2, #8
 800196e:	4013      	ands	r3, r2
 8001970:	d047      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001972:	4b32      	ldr	r3, [pc, #200]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2238      	movs	r2, #56	@ 0x38
 8001978:	4013      	ands	r3, r2
 800197a:	2b18      	cmp	r3, #24
 800197c:	d10a      	bne.n	8001994 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800197e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	2202      	movs	r2, #2
 8001984:	4013      	ands	r3, r2
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2f2>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d138      	bne.n	8001a02 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e1c5      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d019      	beq.n	80019d0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800199c:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 800199e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019a0:	4b26      	ldr	r3, [pc, #152]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80019a2:	2101      	movs	r1, #1
 80019a4:	430a      	orrs	r2, r1
 80019a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fbec 	bl	8001184 <HAL_GetTick>
 80019ac:	0003      	movs	r3, r0
 80019ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b2:	f7ff fbe7 	bl	8001184 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1ad      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80019c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c8:	2202      	movs	r2, #2
 80019ca:	4013      	ands	r3, r2
 80019cc:	d0f1      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2a2>
 80019ce:	e018      	b.n	8001a02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80019d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	438a      	bics	r2, r1
 80019da:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fbd2 	bl	8001184 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7ff fbcd 	bl	8001184 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e193      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f8:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 80019fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fc:	2202      	movs	r2, #2
 80019fe:	4013      	ands	r3, r2
 8001a00:	d1f1      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2204      	movs	r2, #4
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2fe>
 8001a0c:	e0c6      	b.n	8001b9c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0e:	231f      	movs	r3, #31
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2238      	movs	r2, #56	@ 0x38
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d11e      	bne.n	8001a60 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_RCC_OscConfig+0x32c>)
 8001a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d100      	bne.n	8001a2e <HAL_RCC_OscConfig+0x31e>
 8001a2c:	e0b6      	b.n	8001b9c <HAL_RCC_OscConfig+0x48c>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d000      	beq.n	8001a38 <HAL_RCC_OscConfig+0x328>
 8001a36:	e0b1      	b.n	8001b9c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e171      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	fffeffff 	.word	0xfffeffff
 8001a44:	fffbffff 	.word	0xfffbffff
 8001a48:	ffff80ff 	.word	0xffff80ff
 8001a4c:	ffffc7ff 	.word	0xffffc7ff
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a60:	4bb1      	ldr	r3, [pc, #708]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001a62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	055b      	lsls	r3, r3, #21
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_OscConfig+0x360>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x362>
 8001a70:	2300      	movs	r3, #0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d011      	beq.n	8001a9a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4bac      	ldr	r3, [pc, #688]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001a78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a7a:	4bab      	ldr	r3, [pc, #684]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001a7c:	2180      	movs	r1, #128	@ 0x80
 8001a7e:	0549      	lsls	r1, r1, #21
 8001a80:	430a      	orrs	r2, r1
 8001a82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a84:	4ba8      	ldr	r3, [pc, #672]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	055b      	lsls	r3, r3, #21
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a92:	231f      	movs	r3, #31
 8001a94:	18fb      	adds	r3, r7, r3
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9a:	4ba4      	ldr	r3, [pc, #656]	@ (8001d2c <HAL_RCC_OscConfig+0x61c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d11a      	bne.n	8001adc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa6:	4ba1      	ldr	r3, [pc, #644]	@ (8001d2c <HAL_RCC_OscConfig+0x61c>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4ba0      	ldr	r3, [pc, #640]	@ (8001d2c <HAL_RCC_OscConfig+0x61c>)
 8001aac:	2180      	movs	r1, #128	@ 0x80
 8001aae:	0049      	lsls	r1, r1, #1
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fb66 	bl	8001184 <HAL_GetTick>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abe:	f7ff fb61 	bl	8001184 <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e127      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad0:	4b96      	ldr	r3, [pc, #600]	@ (8001d2c <HAL_RCC_OscConfig+0x61c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d106      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3e2>
 8001ae4:	4b90      	ldr	r3, [pc, #576]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001ae6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ae8:	4b8f      	ldr	r3, [pc, #572]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001af0:	e01c      	b.n	8001b2c <HAL_RCC_OscConfig+0x41c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x404>
 8001afa:	4b8b      	ldr	r3, [pc, #556]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001afc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001afe:	4b8a      	ldr	r3, [pc, #552]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b00:	2104      	movs	r1, #4
 8001b02:	430a      	orrs	r2, r1
 8001b04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b06:	4b88      	ldr	r3, [pc, #544]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b0a:	4b87      	ldr	r3, [pc, #540]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0x41c>
 8001b14:	4b84      	ldr	r3, [pc, #528]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b18:	4b83      	ldr	r3, [pc, #524]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	438a      	bics	r2, r1
 8001b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b20:	4b81      	ldr	r3, [pc, #516]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b24:	4b80      	ldr	r3, [pc, #512]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b26:	2104      	movs	r1, #4
 8001b28:	438a      	bics	r2, r1
 8001b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d014      	beq.n	8001b5e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fb26 	bl	8001184 <HAL_GetTick>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3c:	e009      	b.n	8001b52 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff fb21 	bl	8001184 <HAL_GetTick>
 8001b42:	0002      	movs	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	4a79      	ldr	r2, [pc, #484]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0e6      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b52:	4b75      	ldr	r3, [pc, #468]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b56:	2202      	movs	r2, #2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x42e>
 8001b5c:	e013      	b.n	8001b86 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fb11 	bl	8001184 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b66:	e009      	b.n	8001b7c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7ff fb0c 	bl	8001184 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4a6f      	ldr	r2, [pc, #444]	@ (8001d30 <HAL_RCC_OscConfig+0x620>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0d1      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b80:	2202      	movs	r2, #2
 8001b82:	4013      	ands	r3, r2
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b86:	231f      	movs	r3, #31
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d105      	bne.n	8001b9c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b90:	4b65      	ldr	r3, [pc, #404]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b94:	4b64      	ldr	r3, [pc, #400]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001b96:	4967      	ldr	r1, [pc, #412]	@ (8001d34 <HAL_RCC_OscConfig+0x624>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d100      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x496>
 8001ba4:	e0bb      	b.n	8001d1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba6:	4b60      	ldr	r3, [pc, #384]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2238      	movs	r2, #56	@ 0x38
 8001bac:	4013      	ands	r3, r2
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d100      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4a4>
 8001bb2:	e07b      	b.n	8001cac <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d156      	bne.n	8001c6a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b5a      	ldr	r3, [pc, #360]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b59      	ldr	r3, [pc, #356]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001bc2:	495d      	ldr	r1, [pc, #372]	@ (8001d38 <HAL_RCC_OscConfig+0x628>)
 8001bc4:	400a      	ands	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fadc 	bl	8001184 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff fad7 	bl	8001184 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e09d      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	4b50      	ldr	r3, [pc, #320]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	049b      	lsls	r3, r3, #18
 8001bec:	4013      	ands	r3, r2
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a51      	ldr	r2, [pc, #324]	@ (8001d3c <HAL_RCC_OscConfig+0x62c>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1a      	ldr	r2, [r3, #32]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c08:	021b      	lsls	r3, r3, #8
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	4b42      	ldr	r3, [pc, #264]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001c20:	430a      	orrs	r2, r1
 8001c22:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b40      	ldr	r3, [pc, #256]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b3f      	ldr	r3, [pc, #252]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001c2a:	2180      	movs	r1, #128	@ 0x80
 8001c2c:	0449      	lsls	r1, r1, #17
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c32:	4b3d      	ldr	r3, [pc, #244]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	4b3c      	ldr	r3, [pc, #240]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001c38:	2180      	movs	r1, #128	@ 0x80
 8001c3a:	0549      	lsls	r1, r1, #21
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff faa0 	bl	8001184 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff fa9b 	bl	8001184 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e061      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5c:	4b32      	ldr	r3, [pc, #200]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	049b      	lsls	r3, r3, #18
 8001c64:	4013      	ands	r3, r2
 8001c66:	d0f0      	beq.n	8001c4a <HAL_RCC_OscConfig+0x53a>
 8001c68:	e059      	b.n	8001d1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001c70:	4931      	ldr	r1, [pc, #196]	@ (8001d38 <HAL_RCC_OscConfig+0x628>)
 8001c72:	400a      	ands	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff fa85 	bl	8001184 <HAL_GetTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff fa80 	bl	8001184 <HAL_GetTick>
 8001c84:	0002      	movs	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e046      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c92:	4b25      	ldr	r3, [pc, #148]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	049b      	lsls	r3, r3, #18
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001c9e:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001ca4:	4926      	ldr	r1, [pc, #152]	@ (8001d40 <HAL_RCC_OscConfig+0x630>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	e038      	b.n	8001d1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e033      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d28 <HAL_RCC_OscConfig+0x618>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d126      	bne.n	8001d1a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2270      	movs	r2, #112	@ 0x70
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d11f      	bne.n	8001d1a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	23fe      	movs	r3, #254	@ 0xfe
 8001cde:	01db      	lsls	r3, r3, #7
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d116      	bne.n	8001d1a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	23f8      	movs	r3, #248	@ 0xf8
 8001cf0:	039b      	lsls	r3, r3, #14
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d10e      	bne.n	8001d1a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	23e0      	movs	r3, #224	@ 0xe0
 8001d00:	051b      	lsls	r3, r3, #20
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d106      	bne.n	8001d1a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	0f5b      	lsrs	r3, r3, #29
 8001d10:	075a      	lsls	r2, r3, #29
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b008      	add	sp, #32
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	00001388 	.word	0x00001388
 8001d34:	efffffff 	.word	0xefffffff
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	11c1808c 	.word	0x11c1808c
 8001d40:	eefefffc 	.word	0xeefefffc

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0e9      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b76      	ldr	r3, [pc, #472]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	4013      	ands	r3, r2
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d91e      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b73      	ldr	r3, [pc, #460]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4393      	bics	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	4b70      	ldr	r3, [pc, #448]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d78:	f7ff fa04 	bl	8001184 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7ff f9ff 	bl	8001184 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e0ca      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d96:	4b67      	ldr	r3, [pc, #412]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1ee      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2202      	movs	r2, #2
 8001daa:	4013      	ands	r3, r2
 8001dac:	d015      	beq.n	8001dda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2204      	movs	r2, #4
 8001db4:	4013      	ands	r3, r2
 8001db6:	d006      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001db8:	4b60      	ldr	r3, [pc, #384]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	21e0      	movs	r1, #224	@ 0xe0
 8001dc0:	01c9      	lsls	r1, r1, #7
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	4a5d      	ldr	r2, [pc, #372]	@ (8001f40 <HAL_RCC_ClockConfig+0x1fc>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	0019      	movs	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b59      	ldr	r3, [pc, #356]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	d057      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d107      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dec:	4b53      	ldr	r3, [pc, #332]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	029b      	lsls	r3, r3, #10
 8001df4:	4013      	ands	r3, r2
 8001df6:	d12b      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e097      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e04:	4b4d      	ldr	r3, [pc, #308]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	049b      	lsls	r3, r3, #18
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d11f      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e08b      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1c:	4b47      	ldr	r3, [pc, #284]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4013      	ands	r3, r2
 8001e26:	d113      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e07f      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e34:	4b41      	ldr	r3, [pc, #260]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e38:	2202      	movs	r2, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e074      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e42:	4b3e      	ldr	r3, [pc, #248]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e46:	2202      	movs	r2, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e06d      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e50:	4b3a      	ldr	r3, [pc, #232]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2207      	movs	r2, #7
 8001e56:	4393      	bics	r3, r2
 8001e58:	0019      	movs	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4b37      	ldr	r3, [pc, #220]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e64:	f7ff f98e 	bl	8001184 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6c:	e009      	b.n	8001e82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6e:	f7ff f989 	bl	8001184 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a2f      	ldr	r2, [pc, #188]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e054      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	4b2e      	ldr	r3, [pc, #184]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2238      	movs	r2, #56	@ 0x38
 8001e88:	401a      	ands	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d1ec      	bne.n	8001e6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b27      	ldr	r3, [pc, #156]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2207      	movs	r2, #7
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d21e      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	0019      	movs	r1, r3
 8001eac:	4b21      	ldr	r3, [pc, #132]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eb4:	f7ff f966 	bl	8001184 <HAL_GetTick>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ebc:	e009      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebe:	f7ff f961 	bl	8001184 <HAL_GetTick>
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f38 <HAL_RCC_ClockConfig+0x1f4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e02c      	b.n	8001f2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ed2:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	4013      	ands	r3, r2
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1ee      	bne.n	8001ebe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d009      	beq.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001eea:	4b14      	ldr	r3, [pc, #80]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4a15      	ldr	r2, [pc, #84]	@ (8001f44 <HAL_RCC_ClockConfig+0x200>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	0019      	movs	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001efa:	430a      	orrs	r2, r1
 8001efc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001efe:	f000 f829 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f02:	0001      	movs	r1, r0
 8001f04:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	0a1b      	lsrs	r3, r3, #8
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f48 <HAL_RCC_ClockConfig+0x204>)
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	58d3      	ldr	r3, [r2, r3]
 8001f14:	221f      	movs	r2, #31
 8001f16:	4013      	ands	r3, r2
 8001f18:	000a      	movs	r2, r1
 8001f1a:	40da      	lsrs	r2, r3
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x208>)
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_RCC_ClockConfig+0x20c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f7ff f8d1 	bl	80010cc <HAL_InitTick>
 8001f2a:	0003      	movs	r3, r0
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b004      	add	sp, #16
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40022000 	.word	0x40022000
 8001f38:	00001388 	.word	0x00001388
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	fffff0ff 	.word	0xfffff0ff
 8001f44:	ffff8fff 	.word	0xffff8fff
 8001f48:	08003b98 	.word	0x08003b98
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004

08001f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2238      	movs	r2, #56	@ 0x38
 8001f60:	4013      	ands	r3, r2
 8001f62:	d10f      	bne.n	8001f84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f64:	4b39      	ldr	r3, [pc, #228]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	0adb      	lsrs	r3, r3, #11
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2201      	movs	r2, #1
 8001f70:	409a      	lsls	r2, r3
 8001f72:	0013      	movs	r3, r2
 8001f74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f76:	6839      	ldr	r1, [r7, #0]
 8001f78:	4835      	ldr	r0, [pc, #212]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f7a:	f7fe f8c3 	bl	8000104 <__udivsi3>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	e05d      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f84:	4b31      	ldr	r3, [pc, #196]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2238      	movs	r2, #56	@ 0x38
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d102      	bne.n	8001f96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f90:	4b30      	ldr	r3, [pc, #192]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	e054      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f96:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2238      	movs	r2, #56	@ 0x38
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d138      	bne.n	8002014 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d10d      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	4824      	ldr	r0, [pc, #144]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fc4:	f7fe f89e 	bl	8000104 <__udivsi3>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	0019      	movs	r1, r3
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	227f      	movs	r2, #127	@ 0x7f
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	434b      	muls	r3, r1
 8001fd8:	617b      	str	r3, [r7, #20]
        break;
 8001fda:	e00d      	b.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	481c      	ldr	r0, [pc, #112]	@ (8002050 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fe0:	f7fe f890 	bl	8000104 <__udivsi3>
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	4b18      	ldr	r3, [pc, #96]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	227f      	movs	r2, #127	@ 0x7f
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	434b      	muls	r3, r1
 8001ff4:	617b      	str	r3, [r7, #20]
        break;
 8001ff6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0f5b      	lsrs	r3, r3, #29
 8001ffe:	2207      	movs	r2, #7
 8002000:	4013      	ands	r3, r2
 8002002:	3301      	adds	r3, #1
 8002004:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	6978      	ldr	r0, [r7, #20]
 800200a:	f7fe f87b 	bl	8000104 <__udivsi3>
 800200e:	0003      	movs	r3, r0
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	e015      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002014:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2238      	movs	r2, #56	@ 0x38
 800201a:	4013      	ands	r3, r2
 800201c:	2b20      	cmp	r3, #32
 800201e:	d103      	bne.n	8002028 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_RCC_GetSysClockFreq+0xf8>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2238      	movs	r2, #56	@ 0x38
 800202e:	4013      	ands	r3, r2
 8002030:	2b18      	cmp	r3, #24
 8002032:	d103      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002034:	23fa      	movs	r3, #250	@ 0xfa
 8002036:	01db      	lsls	r3, r3, #7
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	e001      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002040:	693b      	ldr	r3, [r7, #16]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b006      	add	sp, #24
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	40021000 	.word	0x40021000
 8002050:	00f42400 	.word	0x00f42400
 8002054:	007a1200 	.word	0x007a1200

08002058 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800205c:	4b02      	ldr	r3, [pc, #8]	@ (8002068 <HAL_RCC_GetHCLKFreq+0x10>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	20000000 	.word	0x20000000

0800206c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002070:	f7ff fff2 	bl	8002058 <HAL_RCC_GetHCLKFreq>
 8002074:	0004      	movs	r4, r0
 8002076:	f7ff fb3f 	bl	80016f8 <LL_RCC_GetAPB1Prescaler>
 800207a:	0003      	movs	r3, r0
 800207c:	0b1a      	lsrs	r2, r3, #12
 800207e:	4b05      	ldr	r3, [pc, #20]	@ (8002094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	58d3      	ldr	r3, [r2, r3]
 8002084:	221f      	movs	r2, #31
 8002086:	4013      	ands	r3, r2
 8002088:	40dc      	lsrs	r4, r3
 800208a:	0023      	movs	r3, r4
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	bdb0      	pop	{r4, r5, r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	08003bd8 	.word	0x08003bd8

08002098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020a0:	2313      	movs	r3, #19
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020a8:	2312      	movs	r3, #18
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2200      	movs	r2, #0
 80020ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	2380      	movs	r3, #128	@ 0x80
 80020b6:	029b      	lsls	r3, r3, #10
 80020b8:	4013      	ands	r3, r2
 80020ba:	d100      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020bc:	e0a3      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2011      	movs	r0, #17
 80020c0:	183b      	adds	r3, r7, r0
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c6:	4bc3      	ldr	r3, [pc, #780]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020ca:	2380      	movs	r3, #128	@ 0x80
 80020cc:	055b      	lsls	r3, r3, #21
 80020ce:	4013      	ands	r3, r2
 80020d0:	d110      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	4bc0      	ldr	r3, [pc, #768]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020d6:	4bbf      	ldr	r3, [pc, #764]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020d8:	2180      	movs	r1, #128	@ 0x80
 80020da:	0549      	lsls	r1, r1, #21
 80020dc:	430a      	orrs	r2, r1
 80020de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020e0:	4bbc      	ldr	r3, [pc, #752]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80020e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80020e4:	2380      	movs	r3, #128	@ 0x80
 80020e6:	055b      	lsls	r3, r3, #21
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f4:	4bb8      	ldr	r3, [pc, #736]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4bb7      	ldr	r3, [pc, #732]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80020fa:	2180      	movs	r1, #128	@ 0x80
 80020fc:	0049      	lsls	r1, r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002102:	f7ff f83f 	bl	8001184 <HAL_GetTick>
 8002106:	0003      	movs	r3, r0
 8002108:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800210a:	e00b      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7ff f83a 	bl	8001184 <HAL_GetTick>
 8002110:	0002      	movs	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d904      	bls.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800211a:	2313      	movs	r3, #19
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	2203      	movs	r2, #3
 8002120:	701a      	strb	r2, [r3, #0]
        break;
 8002122:	e005      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002124:	4bac      	ldr	r3, [pc, #688]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4013      	ands	r3, r2
 800212e:	d0ed      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002130:	2313      	movs	r3, #19
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d154      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800213a:	4ba6      	ldr	r3, [pc, #664]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800213c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800213e:	23c0      	movs	r3, #192	@ 0xc0
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4013      	ands	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d019      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	429a      	cmp	r2, r3
 8002154:	d014      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002156:	4b9f      	ldr	r3, [pc, #636]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800215a:	4aa0      	ldr	r2, [pc, #640]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800215c:	4013      	ands	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002160:	4b9c      	ldr	r3, [pc, #624]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002162:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002164:	4b9b      	ldr	r3, [pc, #620]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002166:	2180      	movs	r1, #128	@ 0x80
 8002168:	0249      	lsls	r1, r1, #9
 800216a:	430a      	orrs	r2, r1
 800216c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800216e:	4b99      	ldr	r3, [pc, #612]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002170:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002172:	4b98      	ldr	r3, [pc, #608]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002174:	499a      	ldr	r1, [pc, #616]	@ (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002176:	400a      	ands	r2, r1
 8002178:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800217a:	4b96      	ldr	r3, [pc, #600]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2201      	movs	r2, #1
 8002184:	4013      	ands	r3, r2
 8002186:	d016      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fffc 	bl	8001184 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002190:	e00c      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fff7 	bl	8001184 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a91      	ldr	r2, [pc, #580]	@ (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d904      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80021a2:	2313      	movs	r3, #19
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	2203      	movs	r2, #3
 80021a8:	701a      	strb	r2, [r3, #0]
            break;
 80021aa:	e004      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ac:	4b89      	ldr	r3, [pc, #548]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d0ed      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80021b6:	2313      	movs	r3, #19
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10a      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c0:	4b84      	ldr	r3, [pc, #528]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	4a85      	ldr	r2, [pc, #532]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021ce:	4b81      	ldr	r3, [pc, #516]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021d0:	430a      	orrs	r2, r1
 80021d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021d4:	e00c      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021d6:	2312      	movs	r3, #18
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2213      	movs	r2, #19
 80021dc:	18ba      	adds	r2, r7, r2
 80021de:	7812      	ldrb	r2, [r2, #0]
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	e005      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	2312      	movs	r3, #18
 80021e6:	18fb      	adds	r3, r7, r3
 80021e8:	2213      	movs	r2, #19
 80021ea:	18ba      	adds	r2, r7, r2
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021f0:	2311      	movs	r3, #17
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d105      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fa:	4b76      	ldr	r3, [pc, #472]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021fe:	4b75      	ldr	r3, [pc, #468]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002200:	4979      	ldr	r1, [pc, #484]	@ (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002202:	400a      	ands	r2, r1
 8002204:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2201      	movs	r2, #1
 800220c:	4013      	ands	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002210:	4b70      	ldr	r3, [pc, #448]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002214:	2203      	movs	r2, #3
 8002216:	4393      	bics	r3, r2
 8002218:	0019      	movs	r1, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002220:	430a      	orrs	r2, r1
 8002222:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2202      	movs	r2, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d009      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800222e:	4b69      	ldr	r3, [pc, #420]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002232:	220c      	movs	r2, #12
 8002234:	4393      	bics	r3, r2
 8002236:	0019      	movs	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	4b65      	ldr	r3, [pc, #404]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223e:	430a      	orrs	r2, r1
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2210      	movs	r2, #16
 8002248:	4013      	ands	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800224c:	4b61      	ldr	r3, [pc, #388]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002250:	4a66      	ldr	r2, [pc, #408]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	4b5e      	ldr	r3, [pc, #376]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225c:	430a      	orrs	r2, r1
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	@ 0x80
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d009      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800226c:	4b59      	ldr	r3, [pc, #356]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	4a5f      	ldr	r2, [pc, #380]	@ (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	4b56      	ldr	r3, [pc, #344]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800227c:	430a      	orrs	r2, r1
 800227e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4013      	ands	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800228c:	4b51      	ldr	r3, [pc, #324]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002290:	4a58      	ldr	r2, [pc, #352]	@ (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229c:	430a      	orrs	r2, r1
 800229e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2220      	movs	r2, #32
 80022a6:	4013      	ands	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022aa:	4b4a      	ldr	r3, [pc, #296]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ae:	4a52      	ldr	r2, [pc, #328]	@ (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	4b46      	ldr	r3, [pc, #280]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ba:	430a      	orrs	r2, r1
 80022bc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	@ 0x80
 80022c4:	01db      	lsls	r3, r3, #7
 80022c6:	4013      	ands	r3, r2
 80022c8:	d015      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022ca:	4b42      	ldr	r3, [pc, #264]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	0899      	lsrs	r1, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	4b3f      	ldr	r3, [pc, #252]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	05db      	lsls	r3, r3, #23
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d106      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022e8:	4b3a      	ldr	r3, [pc, #232]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4b39      	ldr	r3, [pc, #228]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ee:	2180      	movs	r1, #128	@ 0x80
 80022f0:	0249      	lsls	r1, r1, #9
 80022f2:	430a      	orrs	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	031b      	lsls	r3, r3, #12
 80022fe:	4013      	ands	r3, r2
 8002300:	d009      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002302:	4b34      	ldr	r3, [pc, #208]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002306:	2240      	movs	r2, #64	@ 0x40
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002310:	4b30      	ldr	r3, [pc, #192]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002312:	430a      	orrs	r2, r1
 8002314:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	2380      	movs	r3, #128	@ 0x80
 800231c:	039b      	lsls	r3, r3, #14
 800231e:	4013      	ands	r3, r2
 8002320:	d016      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002322:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002326:	4a35      	ldr	r2, [pc, #212]	@ (80023fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002330:	4b28      	ldr	r3, [pc, #160]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002332:	430a      	orrs	r2, r1
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	03db      	lsls	r3, r3, #15
 800233e:	429a      	cmp	r2, r3
 8002340:	d106      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002342:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002348:	2180      	movs	r1, #128	@ 0x80
 800234a:	0449      	lsls	r1, r1, #17
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	@ 0x80
 8002356:	03db      	lsls	r3, r3, #15
 8002358:	4013      	ands	r3, r2
 800235a:	d016      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800235c:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002360:	4a27      	ldr	r2, [pc, #156]	@ (8002400 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800236a:	4b1a      	ldr	r3, [pc, #104]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236c:	430a      	orrs	r2, r1
 800236e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002374:	2380      	movs	r3, #128	@ 0x80
 8002376:	045b      	lsls	r3, r3, #17
 8002378:	429a      	cmp	r2, r3
 800237a:	d106      	bne.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800237c:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002382:	2180      	movs	r1, #128	@ 0x80
 8002384:	0449      	lsls	r1, r1, #17
 8002386:	430a      	orrs	r2, r1
 8002388:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4013      	ands	r3, r2
 8002394:	d016      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002396:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800239a:	4a1a      	ldr	r2, [pc, #104]	@ (8002404 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800239c:	4013      	ands	r3, r2
 800239e:	0019      	movs	r1, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	4b0b      	ldr	r3, [pc, #44]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a6:	430a      	orrs	r2, r1
 80023a8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695a      	ldr	r2, [r3, #20]
 80023ae:	2380      	movs	r3, #128	@ 0x80
 80023b0:	01db      	lsls	r3, r3, #7
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d106      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80023b6:	4b07      	ldr	r3, [pc, #28]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023bc:	2180      	movs	r1, #128	@ 0x80
 80023be:	0249      	lsls	r1, r1, #9
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80023c4:	2312      	movs	r3, #18
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	781b      	ldrb	r3, [r3, #0]
}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b006      	add	sp, #24
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40007000 	.word	0x40007000
 80023dc:	fffffcff 	.word	0xfffffcff
 80023e0:	fffeffff 	.word	0xfffeffff
 80023e4:	00001388 	.word	0x00001388
 80023e8:	efffffff 	.word	0xefffffff
 80023ec:	fffff3ff 	.word	0xfffff3ff
 80023f0:	fff3ffff 	.word	0xfff3ffff
 80023f4:	ffcfffff 	.word	0xffcfffff
 80023f8:	ffffcfff 	.word	0xffffcfff
 80023fc:	ffbfffff 	.word	0xffbfffff
 8002400:	feffffff 	.word	0xfeffffff
 8002404:	ffff3fff 	.word	0xffff3fff

08002408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e04a      	b.n	80024b0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	223d      	movs	r2, #61	@ 0x3d
 800241e:	5c9b      	ldrb	r3, [r3, r2]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	223c      	movs	r2, #60	@ 0x3c
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0018      	movs	r0, r3
 8002432:	f7fe fd4d 	bl	8000ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	223d      	movs	r2, #61	@ 0x3d
 800243a:	2102      	movs	r1, #2
 800243c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	0019      	movs	r1, r3
 8002448:	0010      	movs	r0, r2
 800244a:	f000 f95f 	bl	800270c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2248      	movs	r2, #72	@ 0x48
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	223e      	movs	r2, #62	@ 0x3e
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	223f      	movs	r2, #63	@ 0x3f
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2240      	movs	r2, #64	@ 0x40
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2241      	movs	r2, #65	@ 0x41
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2242      	movs	r2, #66	@ 0x42
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2243      	movs	r2, #67	@ 0x43
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2244      	movs	r2, #68	@ 0x44
 800248a:	2101      	movs	r1, #1
 800248c:	5499      	strb	r1, [r3, r2]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2245      	movs	r2, #69	@ 0x45
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2246      	movs	r2, #70	@ 0x46
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2247      	movs	r2, #71	@ 0x47
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	223d      	movs	r2, #61	@ 0x3d
 80024aa:	2101      	movs	r1, #1
 80024ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	0018      	movs	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b002      	add	sp, #8
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	223d      	movs	r2, #61	@ 0x3d
 80024c4:	5c9b      	ldrb	r3, [r3, r2]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d001      	beq.n	80024d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e03a      	b.n	8002546 <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	223d      	movs	r2, #61	@ 0x3d
 80024d4:	2102      	movs	r1, #2
 80024d6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002550 <HAL_TIM_Base_Start+0x98>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00f      	beq.n	8002502 <HAL_TIM_Base_Start+0x4a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	@ 0x80
 80024e8:	05db      	lsls	r3, r3, #23
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d009      	beq.n	8002502 <HAL_TIM_Base_Start+0x4a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a18      	ldr	r2, [pc, #96]	@ (8002554 <HAL_TIM_Base_Start+0x9c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_TIM_Base_Start+0x4a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a16      	ldr	r2, [pc, #88]	@ (8002558 <HAL_TIM_Base_Start+0xa0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d116      	bne.n	8002530 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4a14      	ldr	r2, [pc, #80]	@ (800255c <HAL_TIM_Base_Start+0xa4>)
 800250a:	4013      	ands	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b06      	cmp	r3, #6
 8002512:	d016      	beq.n	8002542 <HAL_TIM_Base_Start+0x8a>
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	025b      	lsls	r3, r3, #9
 800251a:	429a      	cmp	r2, r3
 800251c:	d011      	beq.n	8002542 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800252e:	e008      	b.n	8002542 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2101      	movs	r1, #1
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e000      	b.n	8002544 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b004      	add	sp, #16
 800254c:	bd80      	pop	{r7, pc}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400
 8002558:	40014000 	.word	0x40014000
 800255c:	00010007 	.word	0x00010007

08002560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	230f      	movs	r3, #15
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223c      	movs	r2, #60	@ 0x3c
 8002576:	5c9b      	ldrb	r3, [r3, r2]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_TIM_ConfigClockSource+0x20>
 800257c:	2302      	movs	r3, #2
 800257e:	e0bc      	b.n	80026fa <HAL_TIM_ConfigClockSource+0x19a>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	223c      	movs	r2, #60	@ 0x3c
 8002584:	2101      	movs	r1, #1
 8002586:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	223d      	movs	r2, #61	@ 0x3d
 800258c:	2102      	movs	r1, #2
 800258e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4a5a      	ldr	r2, [pc, #360]	@ (8002704 <HAL_TIM_ConfigClockSource+0x1a4>)
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4a59      	ldr	r2, [pc, #356]	@ (8002708 <HAL_TIM_ConfigClockSource+0x1a8>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2280      	movs	r2, #128	@ 0x80
 80025b6:	0192      	lsls	r2, r2, #6
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d040      	beq.n	800263e <HAL_TIM_ConfigClockSource+0xde>
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	0192      	lsls	r2, r2, #6
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d900      	bls.n	80025c6 <HAL_TIM_ConfigClockSource+0x66>
 80025c4:	e088      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x178>
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	0152      	lsls	r2, r2, #5
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d100      	bne.n	80025d0 <HAL_TIM_ConfigClockSource+0x70>
 80025ce:	e088      	b.n	80026e2 <HAL_TIM_ConfigClockSource+0x182>
 80025d0:	2280      	movs	r2, #128	@ 0x80
 80025d2:	0152      	lsls	r2, r2, #5
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d900      	bls.n	80025da <HAL_TIM_ConfigClockSource+0x7a>
 80025d8:	e07e      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x178>
 80025da:	2b70      	cmp	r3, #112	@ 0x70
 80025dc:	d018      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0xb0>
 80025de:	d900      	bls.n	80025e2 <HAL_TIM_ConfigClockSource+0x82>
 80025e0:	e07a      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x178>
 80025e2:	2b60      	cmp	r3, #96	@ 0x60
 80025e4:	d04f      	beq.n	8002686 <HAL_TIM_ConfigClockSource+0x126>
 80025e6:	d900      	bls.n	80025ea <HAL_TIM_ConfigClockSource+0x8a>
 80025e8:	e076      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x178>
 80025ea:	2b50      	cmp	r3, #80	@ 0x50
 80025ec:	d03b      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x106>
 80025ee:	d900      	bls.n	80025f2 <HAL_TIM_ConfigClockSource+0x92>
 80025f0:	e072      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x178>
 80025f2:	2b40      	cmp	r3, #64	@ 0x40
 80025f4:	d057      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0x146>
 80025f6:	d900      	bls.n	80025fa <HAL_TIM_ConfigClockSource+0x9a>
 80025f8:	e06e      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x178>
 80025fa:	2b30      	cmp	r3, #48	@ 0x30
 80025fc:	d063      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x166>
 80025fe:	d86b      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x178>
 8002600:	2b20      	cmp	r3, #32
 8002602:	d060      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x166>
 8002604:	d868      	bhi.n	80026d8 <HAL_TIM_ConfigClockSource+0x178>
 8002606:	2b00      	cmp	r3, #0
 8002608:	d05d      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x166>
 800260a:	2b10      	cmp	r3, #16
 800260c:	d05b      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0x166>
 800260e:	e063      	b.n	80026d8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002620:	f000 f97e 	bl	8002920 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2277      	movs	r2, #119	@ 0x77
 8002630:	4313      	orrs	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	609a      	str	r2, [r3, #8]
      break;
 800263c:	e052      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	f000 f967 	bl	8002920 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2180      	movs	r1, #128	@ 0x80
 800265e:	01c9      	lsls	r1, r1, #7
 8002660:	430a      	orrs	r2, r1
 8002662:	609a      	str	r2, [r3, #8]
      break;
 8002664:	e03e      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002672:	001a      	movs	r2, r3
 8002674:	f000 f8d8 	bl	8002828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2150      	movs	r1, #80	@ 0x50
 800267e:	0018      	movs	r0, r3
 8002680:	f000 f932 	bl	80028e8 <TIM_ITRx_SetConfig>
      break;
 8002684:	e02e      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002692:	001a      	movs	r2, r3
 8002694:	f000 f8f6 	bl	8002884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2160      	movs	r1, #96	@ 0x60
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 f922 	bl	80028e8 <TIM_ITRx_SetConfig>
      break;
 80026a4:	e01e      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b2:	001a      	movs	r2, r3
 80026b4:	f000 f8b8 	bl	8002828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2140      	movs	r1, #64	@ 0x40
 80026be:	0018      	movs	r0, r3
 80026c0:	f000 f912 	bl	80028e8 <TIM_ITRx_SetConfig>
      break;
 80026c4:	e00e      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	0019      	movs	r1, r3
 80026d0:	0010      	movs	r0, r2
 80026d2:	f000 f909 	bl	80028e8 <TIM_ITRx_SetConfig>
      break;
 80026d6:	e005      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80026d8:	230f      	movs	r3, #15
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
      break;
 80026e0:	e000      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80026e2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	223d      	movs	r2, #61	@ 0x3d
 80026e8:	2101      	movs	r1, #1
 80026ea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	223c      	movs	r2, #60	@ 0x3c
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]

  return status;
 80026f4:	230f      	movs	r3, #15
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	781b      	ldrb	r3, [r3, #0]
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b004      	add	sp, #16
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	ffceff88 	.word	0xffceff88
 8002708:	ffff00ff 	.word	0xffff00ff

0800270c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3b      	ldr	r2, [pc, #236]	@ (800280c <TIM_Base_SetConfig+0x100>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d008      	beq.n	8002736 <TIM_Base_SetConfig+0x2a>
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	05db      	lsls	r3, r3, #23
 800272a:	429a      	cmp	r2, r3
 800272c:	d003      	beq.n	8002736 <TIM_Base_SetConfig+0x2a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a37      	ldr	r2, [pc, #220]	@ (8002810 <TIM_Base_SetConfig+0x104>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d108      	bne.n	8002748 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2270      	movs	r2, #112	@ 0x70
 800273a:	4393      	bics	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a30      	ldr	r2, [pc, #192]	@ (800280c <TIM_Base_SetConfig+0x100>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d018      	beq.n	8002782 <TIM_Base_SetConfig+0x76>
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	05db      	lsls	r3, r3, #23
 8002756:	429a      	cmp	r2, r3
 8002758:	d013      	beq.n	8002782 <TIM_Base_SetConfig+0x76>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a2c      	ldr	r2, [pc, #176]	@ (8002810 <TIM_Base_SetConfig+0x104>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00f      	beq.n	8002782 <TIM_Base_SetConfig+0x76>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a2b      	ldr	r2, [pc, #172]	@ (8002814 <TIM_Base_SetConfig+0x108>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00b      	beq.n	8002782 <TIM_Base_SetConfig+0x76>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a2a      	ldr	r2, [pc, #168]	@ (8002818 <TIM_Base_SetConfig+0x10c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <TIM_Base_SetConfig+0x76>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a29      	ldr	r2, [pc, #164]	@ (800281c <TIM_Base_SetConfig+0x110>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <TIM_Base_SetConfig+0x76>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a28      	ldr	r2, [pc, #160]	@ (8002820 <TIM_Base_SetConfig+0x114>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d108      	bne.n	8002794 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	4a27      	ldr	r2, [pc, #156]	@ (8002824 <TIM_Base_SetConfig+0x118>)
 8002786:	4013      	ands	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2280      	movs	r2, #128	@ 0x80
 8002798:	4393      	bics	r3, r2
 800279a:	001a      	movs	r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a13      	ldr	r2, [pc, #76]	@ (800280c <TIM_Base_SetConfig+0x100>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00b      	beq.n	80027da <TIM_Base_SetConfig+0xce>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a14      	ldr	r2, [pc, #80]	@ (8002818 <TIM_Base_SetConfig+0x10c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d007      	beq.n	80027da <TIM_Base_SetConfig+0xce>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a13      	ldr	r2, [pc, #76]	@ (800281c <TIM_Base_SetConfig+0x110>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d003      	beq.n	80027da <TIM_Base_SetConfig+0xce>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a12      	ldr	r2, [pc, #72]	@ (8002820 <TIM_Base_SetConfig+0x114>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d103      	bne.n	80027e2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2201      	movs	r2, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2201      	movs	r2, #1
 80027fa:	4393      	bics	r3, r2
 80027fc:	001a      	movs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	611a      	str	r2, [r3, #16]
  }
}
 8002802:	46c0      	nop			@ (mov r8, r8)
 8002804:	46bd      	mov	sp, r7
 8002806:	b004      	add	sp, #16
 8002808:	bd80      	pop	{r7, pc}
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	40012c00 	.word	0x40012c00
 8002810:	40000400 	.word	0x40000400
 8002814:	40002000 	.word	0x40002000
 8002818:	40014000 	.word	0x40014000
 800281c:	40014400 	.word	0x40014400
 8002820:	40014800 	.word	0x40014800
 8002824:	fffffcff 	.word	0xfffffcff

08002828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	2201      	movs	r2, #1
 8002840:	4393      	bics	r3, r2
 8002842:	001a      	movs	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	22f0      	movs	r2, #240	@ 0xf0
 8002852:	4393      	bics	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	220a      	movs	r2, #10
 8002864:	4393      	bics	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	621a      	str	r2, [r3, #32]
}
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b006      	add	sp, #24
 8002882:	bd80      	pop	{r7, pc}

08002884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	2210      	movs	r2, #16
 800289c:	4393      	bics	r3, r2
 800289e:	001a      	movs	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4a0d      	ldr	r2, [pc, #52]	@ (80028e4 <TIM_TI2_ConfigInputStage+0x60>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	031b      	lsls	r3, r3, #12
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	22a0      	movs	r2, #160	@ 0xa0
 80028c0:	4393      	bics	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	621a      	str	r2, [r3, #32]
}
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	46bd      	mov	sp, r7
 80028de:	b006      	add	sp, #24
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	ffff0fff 	.word	0xffff0fff

080028e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a08      	ldr	r2, [pc, #32]	@ (800291c <TIM_ITRx_SetConfig+0x34>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	2207      	movs	r2, #7
 8002908:	4313      	orrs	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b004      	add	sp, #16
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	ffcfff8f 	.word	0xffcfff8f

08002920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	4a09      	ldr	r2, [pc, #36]	@ (800295c <TIM_ETR_SetConfig+0x3c>)
 8002938:	4013      	ands	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	021a      	lsls	r2, r3, #8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	431a      	orrs	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4313      	orrs	r3, r2
 800294c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	609a      	str	r2, [r3, #8]
}
 8002954:	46c0      	nop			@ (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b006      	add	sp, #24
 800295a:	bd80      	pop	{r7, pc}
 800295c:	ffff00ff 	.word	0xffff00ff

08002960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	223c      	movs	r2, #60	@ 0x3c
 800296e:	5c9b      	ldrb	r3, [r3, r2]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002974:	2302      	movs	r3, #2
 8002976:	e055      	b.n	8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	223c      	movs	r2, #60	@ 0x3c
 800297c:	2101      	movs	r1, #1
 800297e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	223d      	movs	r2, #61	@ 0x3d
 8002984:	2102      	movs	r1, #2
 8002986:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a23      	ldr	r2, [pc, #140]	@ (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d108      	bne.n	80029b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a22      	ldr	r2, [pc, #136]	@ (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2270      	movs	r2, #112	@ 0x70
 80029b8:	4393      	bics	r3, r2
 80029ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a16      	ldr	r2, [pc, #88]	@ (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d00f      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	05db      	lsls	r3, r3, #23
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d009      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a12      	ldr	r2, [pc, #72]	@ (8002a34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d10c      	bne.n	8002a12 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2280      	movs	r2, #128	@ 0x80
 80029fc:	4393      	bics	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	223d      	movs	r2, #61	@ 0x3d
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	223c      	movs	r2, #60	@ 0x3c
 8002a1e:	2100      	movs	r1, #0
 8002a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	0018      	movs	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b004      	add	sp, #16
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	ff0fffff 	.word	0xff0fffff
 8002a34:	40000400 	.word	0x40000400
 8002a38:	40014000 	.word	0x40014000

08002a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e046      	b.n	8002adc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2288      	movs	r2, #136	@ 0x88
 8002a52:	589b      	ldr	r3, [r3, r2]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d107      	bne.n	8002a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2284      	movs	r2, #132	@ 0x84
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7fe fa6a 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2288      	movs	r2, #136	@ 0x88
 8002a6c:	2124      	movs	r1, #36	@ 0x24
 8002a6e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	438a      	bics	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 faea 	bl	8003064 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 f828 	bl	8002ae8 <UART_SetConfig>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e01c      	b.n	8002adc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	490d      	ldr	r1, [pc, #52]	@ (8002ae4 <HAL_UART_Init+0xa8>)
 8002aae:	400a      	ands	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	212a      	movs	r1, #42	@ 0x2a
 8002abe:	438a      	bics	r2, r1
 8002ac0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2101      	movs	r1, #1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 fb79 	bl	80031cc <UART_CheckIdleState>
 8002ada:	0003      	movs	r3, r0
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b002      	add	sp, #8
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	ffffb7ff 	.word	0xffffb7ff

08002ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae8:	b5b0      	push	{r4, r5, r7, lr}
 8002aea:	b090      	sub	sp, #64	@ 0x40
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002af0:	231a      	movs	r3, #26
 8002af2:	2220      	movs	r2, #32
 8002af4:	189b      	adds	r3, r3, r2
 8002af6:	19db      	adds	r3, r3, r7
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4aaf      	ldr	r2, [pc, #700]	@ (8002dd8 <UART_SetConfig+0x2f0>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b26:	430b      	orrs	r3, r1
 8002b28:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4aaa      	ldr	r2, [pc, #680]	@ (8002ddc <UART_SetConfig+0x2f4>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	0018      	movs	r0, r3
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	68d9      	ldr	r1, [r3, #12]
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	0003      	movs	r3, r0
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4aa4      	ldr	r2, [pc, #656]	@ (8002de0 <UART_SetConfig+0x2f8>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d004      	beq.n	8002b5e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a9f      	ldr	r2, [pc, #636]	@ (8002de4 <UART_SetConfig+0x2fc>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	0019      	movs	r1, r3
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7a:	220f      	movs	r2, #15
 8002b7c:	4393      	bics	r3, r2
 8002b7e:	0018      	movs	r0, r3
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	0003      	movs	r3, r0
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a95      	ldr	r2, [pc, #596]	@ (8002de8 <UART_SetConfig+0x300>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d131      	bne.n	8002bfc <UART_SetConfig+0x114>
 8002b98:	4b94      	ldr	r3, [pc, #592]	@ (8002dec <UART_SetConfig+0x304>)
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d01d      	beq.n	8002be0 <UART_SetConfig+0xf8>
 8002ba4:	d823      	bhi.n	8002bee <UART_SetConfig+0x106>
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d00c      	beq.n	8002bc4 <UART_SetConfig+0xdc>
 8002baa:	d820      	bhi.n	8002bee <UART_SetConfig+0x106>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <UART_SetConfig+0xce>
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d00e      	beq.n	8002bd2 <UART_SetConfig+0xea>
 8002bb4:	e01b      	b.n	8002bee <UART_SetConfig+0x106>
 8002bb6:	231b      	movs	r3, #27
 8002bb8:	2220      	movs	r2, #32
 8002bba:	189b      	adds	r3, r3, r2
 8002bbc:	19db      	adds	r3, r3, r7
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e0b4      	b.n	8002d2e <UART_SetConfig+0x246>
 8002bc4:	231b      	movs	r3, #27
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	189b      	adds	r3, r3, r2
 8002bca:	19db      	adds	r3, r3, r7
 8002bcc:	2202      	movs	r2, #2
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e0ad      	b.n	8002d2e <UART_SetConfig+0x246>
 8002bd2:	231b      	movs	r3, #27
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	189b      	adds	r3, r3, r2
 8002bd8:	19db      	adds	r3, r3, r7
 8002bda:	2204      	movs	r2, #4
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e0a6      	b.n	8002d2e <UART_SetConfig+0x246>
 8002be0:	231b      	movs	r3, #27
 8002be2:	2220      	movs	r2, #32
 8002be4:	189b      	adds	r3, r3, r2
 8002be6:	19db      	adds	r3, r3, r7
 8002be8:	2208      	movs	r2, #8
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e09f      	b.n	8002d2e <UART_SetConfig+0x246>
 8002bee:	231b      	movs	r3, #27
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	189b      	adds	r3, r3, r2
 8002bf4:	19db      	adds	r3, r3, r7
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	e098      	b.n	8002d2e <UART_SetConfig+0x246>
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a7b      	ldr	r2, [pc, #492]	@ (8002df0 <UART_SetConfig+0x308>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d131      	bne.n	8002c6a <UART_SetConfig+0x182>
 8002c06:	4b79      	ldr	r3, [pc, #484]	@ (8002dec <UART_SetConfig+0x304>)
 8002c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d01d      	beq.n	8002c4e <UART_SetConfig+0x166>
 8002c12:	d823      	bhi.n	8002c5c <UART_SetConfig+0x174>
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d00c      	beq.n	8002c32 <UART_SetConfig+0x14a>
 8002c18:	d820      	bhi.n	8002c5c <UART_SetConfig+0x174>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <UART_SetConfig+0x13c>
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d00e      	beq.n	8002c40 <UART_SetConfig+0x158>
 8002c22:	e01b      	b.n	8002c5c <UART_SetConfig+0x174>
 8002c24:	231b      	movs	r3, #27
 8002c26:	2220      	movs	r2, #32
 8002c28:	189b      	adds	r3, r3, r2
 8002c2a:	19db      	adds	r3, r3, r7
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e07d      	b.n	8002d2e <UART_SetConfig+0x246>
 8002c32:	231b      	movs	r3, #27
 8002c34:	2220      	movs	r2, #32
 8002c36:	189b      	adds	r3, r3, r2
 8002c38:	19db      	adds	r3, r3, r7
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e076      	b.n	8002d2e <UART_SetConfig+0x246>
 8002c40:	231b      	movs	r3, #27
 8002c42:	2220      	movs	r2, #32
 8002c44:	189b      	adds	r3, r3, r2
 8002c46:	19db      	adds	r3, r3, r7
 8002c48:	2204      	movs	r2, #4
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	e06f      	b.n	8002d2e <UART_SetConfig+0x246>
 8002c4e:	231b      	movs	r3, #27
 8002c50:	2220      	movs	r2, #32
 8002c52:	189b      	adds	r3, r3, r2
 8002c54:	19db      	adds	r3, r3, r7
 8002c56:	2208      	movs	r2, #8
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e068      	b.n	8002d2e <UART_SetConfig+0x246>
 8002c5c:	231b      	movs	r3, #27
 8002c5e:	2220      	movs	r2, #32
 8002c60:	189b      	adds	r3, r3, r2
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	2210      	movs	r2, #16
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e061      	b.n	8002d2e <UART_SetConfig+0x246>
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a61      	ldr	r2, [pc, #388]	@ (8002df4 <UART_SetConfig+0x30c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d106      	bne.n	8002c82 <UART_SetConfig+0x19a>
 8002c74:	231b      	movs	r3, #27
 8002c76:	2220      	movs	r2, #32
 8002c78:	189b      	adds	r3, r3, r2
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e055      	b.n	8002d2e <UART_SetConfig+0x246>
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a5c      	ldr	r2, [pc, #368]	@ (8002df8 <UART_SetConfig+0x310>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d106      	bne.n	8002c9a <UART_SetConfig+0x1b2>
 8002c8c:	231b      	movs	r3, #27
 8002c8e:	2220      	movs	r2, #32
 8002c90:	189b      	adds	r3, r3, r2
 8002c92:	19db      	adds	r3, r3, r7
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
 8002c98:	e049      	b.n	8002d2e <UART_SetConfig+0x246>
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a50      	ldr	r2, [pc, #320]	@ (8002de0 <UART_SetConfig+0x2f8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d13e      	bne.n	8002d22 <UART_SetConfig+0x23a>
 8002ca4:	4b51      	ldr	r3, [pc, #324]	@ (8002dec <UART_SetConfig+0x304>)
 8002ca6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ca8:	23c0      	movs	r3, #192	@ 0xc0
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	22c0      	movs	r2, #192	@ 0xc0
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d027      	beq.n	8002d06 <UART_SetConfig+0x21e>
 8002cb6:	22c0      	movs	r2, #192	@ 0xc0
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d82a      	bhi.n	8002d14 <UART_SetConfig+0x22c>
 8002cbe:	2280      	movs	r2, #128	@ 0x80
 8002cc0:	0112      	lsls	r2, r2, #4
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d011      	beq.n	8002cea <UART_SetConfig+0x202>
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d822      	bhi.n	8002d14 <UART_SetConfig+0x22c>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <UART_SetConfig+0x1f4>
 8002cd2:	2280      	movs	r2, #128	@ 0x80
 8002cd4:	00d2      	lsls	r2, r2, #3
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <UART_SetConfig+0x210>
 8002cda:	e01b      	b.n	8002d14 <UART_SetConfig+0x22c>
 8002cdc:	231b      	movs	r3, #27
 8002cde:	2220      	movs	r2, #32
 8002ce0:	189b      	adds	r3, r3, r2
 8002ce2:	19db      	adds	r3, r3, r7
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e021      	b.n	8002d2e <UART_SetConfig+0x246>
 8002cea:	231b      	movs	r3, #27
 8002cec:	2220      	movs	r2, #32
 8002cee:	189b      	adds	r3, r3, r2
 8002cf0:	19db      	adds	r3, r3, r7
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e01a      	b.n	8002d2e <UART_SetConfig+0x246>
 8002cf8:	231b      	movs	r3, #27
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	19db      	adds	r3, r3, r7
 8002d00:	2204      	movs	r2, #4
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e013      	b.n	8002d2e <UART_SetConfig+0x246>
 8002d06:	231b      	movs	r3, #27
 8002d08:	2220      	movs	r2, #32
 8002d0a:	189b      	adds	r3, r3, r2
 8002d0c:	19db      	adds	r3, r3, r7
 8002d0e:	2208      	movs	r2, #8
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e00c      	b.n	8002d2e <UART_SetConfig+0x246>
 8002d14:	231b      	movs	r3, #27
 8002d16:	2220      	movs	r2, #32
 8002d18:	189b      	adds	r3, r3, r2
 8002d1a:	19db      	adds	r3, r3, r7
 8002d1c:	2210      	movs	r2, #16
 8002d1e:	701a      	strb	r2, [r3, #0]
 8002d20:	e005      	b.n	8002d2e <UART_SetConfig+0x246>
 8002d22:	231b      	movs	r3, #27
 8002d24:	2220      	movs	r2, #32
 8002d26:	189b      	adds	r3, r3, r2
 8002d28:	19db      	adds	r3, r3, r7
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2b      	ldr	r2, [pc, #172]	@ (8002de0 <UART_SetConfig+0x2f8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d000      	beq.n	8002d3a <UART_SetConfig+0x252>
 8002d38:	e0a9      	b.n	8002e8e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d3a:	231b      	movs	r3, #27
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	189b      	adds	r3, r3, r2
 8002d40:	19db      	adds	r3, r3, r7
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d015      	beq.n	8002d74 <UART_SetConfig+0x28c>
 8002d48:	dc18      	bgt.n	8002d7c <UART_SetConfig+0x294>
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d00d      	beq.n	8002d6a <UART_SetConfig+0x282>
 8002d4e:	dc15      	bgt.n	8002d7c <UART_SetConfig+0x294>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <UART_SetConfig+0x272>
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d005      	beq.n	8002d64 <UART_SetConfig+0x27c>
 8002d58:	e010      	b.n	8002d7c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d5a:	f7ff f987 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d62:	e014      	b.n	8002d8e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d64:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <UART_SetConfig+0x314>)
 8002d66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d68:	e011      	b.n	8002d8e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d6a:	f7ff f8f3 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d72:	e00c      	b.n	8002d8e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d74:	2380      	movs	r3, #128	@ 0x80
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002d7a:	e008      	b.n	8002d8e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002d80:	231a      	movs	r3, #26
 8002d82:	2220      	movs	r2, #32
 8002d84:	189b      	adds	r3, r3, r2
 8002d86:	19db      	adds	r3, r3, r7
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
        break;
 8002d8c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d100      	bne.n	8002d96 <UART_SetConfig+0x2ae>
 8002d94:	e14b      	b.n	800302e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d9a:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <UART_SetConfig+0x318>)
 8002d9c:	0052      	lsls	r2, r2, #1
 8002d9e:	5ad3      	ldrh	r3, [r2, r3]
 8002da0:	0019      	movs	r1, r3
 8002da2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002da4:	f7fd f9ae 	bl	8000104 <__udivsi3>
 8002da8:	0003      	movs	r3, r0
 8002daa:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	0013      	movs	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	189b      	adds	r3, r3, r2
 8002db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d305      	bcc.n	8002dc8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d91d      	bls.n	8002e04 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002dc8:	231a      	movs	r3, #26
 8002dca:	2220      	movs	r2, #32
 8002dcc:	189b      	adds	r3, r3, r2
 8002dce:	19db      	adds	r3, r3, r7
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e12b      	b.n	800302e <UART_SetConfig+0x546>
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	cfff69f3 	.word	0xcfff69f3
 8002ddc:	ffffcfff 	.word	0xffffcfff
 8002de0:	40008000 	.word	0x40008000
 8002de4:	11fff4ff 	.word	0x11fff4ff
 8002de8:	40013800 	.word	0x40013800
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40004400 	.word	0x40004400
 8002df4:	40004800 	.word	0x40004800
 8002df8:	40004c00 	.word	0x40004c00
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	08003bf8 	.word	0x08003bf8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e10:	4b92      	ldr	r3, [pc, #584]	@ (800305c <UART_SetConfig+0x574>)
 8002e12:	0052      	lsls	r2, r2, #1
 8002e14:	5ad3      	ldrh	r3, [r2, r3]
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	69b8      	ldr	r0, [r7, #24]
 8002e22:	69f9      	ldr	r1, [r7, #28]
 8002e24:	f7fd fae4 	bl	80003f0 <__aeabi_uldivmod>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	000b      	movs	r3, r1
 8002e2c:	0e11      	lsrs	r1, r2, #24
 8002e2e:	021d      	lsls	r5, r3, #8
 8002e30:	430d      	orrs	r5, r1
 8002e32:	0214      	lsls	r4, r2, #8
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68b8      	ldr	r0, [r7, #8]
 8002e42:	68f9      	ldr	r1, [r7, #12]
 8002e44:	1900      	adds	r0, r0, r4
 8002e46:	4169      	adcs	r1, r5
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f7fd facb 	bl	80003f0 <__aeabi_uldivmod>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	000b      	movs	r3, r1
 8002e5e:	0013      	movs	r3, r2
 8002e60:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e64:	23c0      	movs	r3, #192	@ 0xc0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d309      	bcc.n	8002e80 <UART_SetConfig+0x398>
 8002e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e6e:	2380      	movs	r3, #128	@ 0x80
 8002e70:	035b      	lsls	r3, r3, #13
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d204      	bcs.n	8002e80 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	e0d6      	b.n	800302e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002e80:	231a      	movs	r3, #26
 8002e82:	2220      	movs	r2, #32
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	19db      	adds	r3, r3, r7
 8002e88:	2201      	movs	r2, #1
 8002e8a:	701a      	strb	r2, [r3, #0]
 8002e8c:	e0cf      	b.n	800302e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e90:	69da      	ldr	r2, [r3, #28]
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d000      	beq.n	8002e9c <UART_SetConfig+0x3b4>
 8002e9a:	e070      	b.n	8002f7e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002e9c:	231b      	movs	r3, #27
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	189b      	adds	r3, r3, r2
 8002ea2:	19db      	adds	r3, r3, r7
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d015      	beq.n	8002ed6 <UART_SetConfig+0x3ee>
 8002eaa:	dc18      	bgt.n	8002ede <UART_SetConfig+0x3f6>
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d00d      	beq.n	8002ecc <UART_SetConfig+0x3e4>
 8002eb0:	dc15      	bgt.n	8002ede <UART_SetConfig+0x3f6>
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <UART_SetConfig+0x3d4>
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d005      	beq.n	8002ec6 <UART_SetConfig+0x3de>
 8002eba:	e010      	b.n	8002ede <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f7ff f8d6 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ec4:	e014      	b.n	8002ef0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ec6:	4b66      	ldr	r3, [pc, #408]	@ (8003060 <UART_SetConfig+0x578>)
 8002ec8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002eca:	e011      	b.n	8002ef0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ecc:	f7ff f842 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002ed4:	e00c      	b.n	8002ef0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002edc:	e008      	b.n	8002ef0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002ee2:	231a      	movs	r3, #26
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	19db      	adds	r3, r3, r7
 8002eea:	2201      	movs	r2, #1
 8002eec:	701a      	strb	r2, [r3, #0]
        break;
 8002eee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d100      	bne.n	8002ef8 <UART_SetConfig+0x410>
 8002ef6:	e09a      	b.n	800302e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002efc:	4b57      	ldr	r3, [pc, #348]	@ (800305c <UART_SetConfig+0x574>)
 8002efe:	0052      	lsls	r2, r2, #1
 8002f00:	5ad3      	ldrh	r3, [r2, r3]
 8002f02:	0019      	movs	r1, r3
 8002f04:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002f06:	f7fd f8fd 	bl	8000104 <__udivsi3>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	005a      	lsls	r2, r3, #1
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	18d2      	adds	r2, r2, r3
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f7fd f8f1 	bl	8000104 <__udivsi3>
 8002f22:	0003      	movs	r3, r0
 8002f24:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d921      	bls.n	8002f70 <UART_SetConfig+0x488>
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2e:	2380      	movs	r3, #128	@ 0x80
 8002f30:	025b      	lsls	r3, r3, #9
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d21c      	bcs.n	8002f70 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	200e      	movs	r0, #14
 8002f3c:	2420      	movs	r4, #32
 8002f3e:	1903      	adds	r3, r0, r4
 8002f40:	19db      	adds	r3, r3, r7
 8002f42:	210f      	movs	r1, #15
 8002f44:	438a      	bics	r2, r1
 8002f46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2207      	movs	r2, #7
 8002f50:	4013      	ands	r3, r2
 8002f52:	b299      	uxth	r1, r3
 8002f54:	1903      	adds	r3, r0, r4
 8002f56:	19db      	adds	r3, r3, r7
 8002f58:	1902      	adds	r2, r0, r4
 8002f5a:	19d2      	adds	r2, r2, r7
 8002f5c:	8812      	ldrh	r2, [r2, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	1902      	adds	r2, r0, r4
 8002f68:	19d2      	adds	r2, r2, r7
 8002f6a:	8812      	ldrh	r2, [r2, #0]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	e05e      	b.n	800302e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002f70:	231a      	movs	r3, #26
 8002f72:	2220      	movs	r2, #32
 8002f74:	189b      	adds	r3, r3, r2
 8002f76:	19db      	adds	r3, r3, r7
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f7e:	231b      	movs	r3, #27
 8002f80:	2220      	movs	r2, #32
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	19db      	adds	r3, r3, r7
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d015      	beq.n	8002fb8 <UART_SetConfig+0x4d0>
 8002f8c:	dc18      	bgt.n	8002fc0 <UART_SetConfig+0x4d8>
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d00d      	beq.n	8002fae <UART_SetConfig+0x4c6>
 8002f92:	dc15      	bgt.n	8002fc0 <UART_SetConfig+0x4d8>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <UART_SetConfig+0x4b6>
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d005      	beq.n	8002fa8 <UART_SetConfig+0x4c0>
 8002f9c:	e010      	b.n	8002fc0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f9e:	f7ff f865 	bl	800206c <HAL_RCC_GetPCLK1Freq>
 8002fa2:	0003      	movs	r3, r0
 8002fa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002fa6:	e014      	b.n	8002fd2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8003060 <UART_SetConfig+0x578>)
 8002faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002fac:	e011      	b.n	8002fd2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fae:	f7fe ffd1 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002fb6:	e00c      	b.n	8002fd2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fb8:	2380      	movs	r3, #128	@ 0x80
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002fbe:	e008      	b.n	8002fd2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8002fc4:	231a      	movs	r3, #26
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	189b      	adds	r3, r3, r2
 8002fca:	19db      	adds	r3, r3, r7
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
        break;
 8002fd0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02a      	beq.n	800302e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800305c <UART_SetConfig+0x574>)
 8002fde:	0052      	lsls	r2, r2, #1
 8002fe0:	5ad3      	ldrh	r3, [r2, r3]
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002fe6:	f7fd f88d 	bl	8000104 <__udivsi3>
 8002fea:	0003      	movs	r3, r0
 8002fec:	001a      	movs	r2, r3
 8002fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	18d2      	adds	r2, r2, r3
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	0010      	movs	r0, r2
 8002ffe:	f7fd f881 	bl	8000104 <__udivsi3>
 8003002:	0003      	movs	r3, r0
 8003004:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	2b0f      	cmp	r3, #15
 800300a:	d90a      	bls.n	8003022 <UART_SetConfig+0x53a>
 800300c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	025b      	lsls	r3, r3, #9
 8003012:	429a      	cmp	r2, r3
 8003014:	d205      	bcs.n	8003022 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003018:	b29a      	uxth	r2, r3
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	e005      	b.n	800302e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003022:	231a      	movs	r3, #26
 8003024:	2220      	movs	r2, #32
 8003026:	189b      	adds	r3, r3, r2
 8003028:	19db      	adds	r3, r3, r7
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	226a      	movs	r2, #106	@ 0x6a
 8003032:	2101      	movs	r1, #1
 8003034:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	2268      	movs	r2, #104	@ 0x68
 800303a:	2101      	movs	r1, #1
 800303c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	2200      	movs	r2, #0
 8003042:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003046:	2200      	movs	r2, #0
 8003048:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800304a:	231a      	movs	r3, #26
 800304c:	2220      	movs	r2, #32
 800304e:	189b      	adds	r3, r3, r2
 8003050:	19db      	adds	r3, r3, r7
 8003052:	781b      	ldrb	r3, [r3, #0]
}
 8003054:	0018      	movs	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	b010      	add	sp, #64	@ 0x40
 800305a:	bdb0      	pop	{r4, r5, r7, pc}
 800305c:	08003bf8 	.word	0x08003bf8
 8003060:	00f42400 	.word	0x00f42400

08003064 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	2208      	movs	r2, #8
 8003072:	4013      	ands	r3, r2
 8003074:	d00b      	beq.n	800308e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a4a      	ldr	r2, [pc, #296]	@ (80031a8 <UART_AdvFeatureConfig+0x144>)
 800307e:	4013      	ands	r3, r2
 8003080:	0019      	movs	r1, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003092:	2201      	movs	r2, #1
 8003094:	4013      	ands	r3, r2
 8003096:	d00b      	beq.n	80030b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a43      	ldr	r2, [pc, #268]	@ (80031ac <UART_AdvFeatureConfig+0x148>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4a3b      	ldr	r2, [pc, #236]	@ (80031b0 <UART_AdvFeatureConfig+0x14c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	2204      	movs	r2, #4
 80030d8:	4013      	ands	r3, r2
 80030da:	d00b      	beq.n	80030f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a34      	ldr	r2, [pc, #208]	@ (80031b4 <UART_AdvFeatureConfig+0x150>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	2210      	movs	r2, #16
 80030fa:	4013      	ands	r3, r2
 80030fc:	d00b      	beq.n	8003116 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a2c      	ldr	r2, [pc, #176]	@ (80031b8 <UART_AdvFeatureConfig+0x154>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311a:	2220      	movs	r2, #32
 800311c:	4013      	ands	r3, r2
 800311e:	d00b      	beq.n	8003138 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	4a25      	ldr	r2, [pc, #148]	@ (80031bc <UART_AdvFeatureConfig+0x158>)
 8003128:	4013      	ands	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313c:	2240      	movs	r2, #64	@ 0x40
 800313e:	4013      	ands	r3, r2
 8003140:	d01d      	beq.n	800317e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a1d      	ldr	r2, [pc, #116]	@ (80031c0 <UART_AdvFeatureConfig+0x15c>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800315e:	2380      	movs	r3, #128	@ 0x80
 8003160:	035b      	lsls	r3, r3, #13
 8003162:	429a      	cmp	r2, r3
 8003164:	d10b      	bne.n	800317e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a15      	ldr	r2, [pc, #84]	@ (80031c4 <UART_AdvFeatureConfig+0x160>)
 800316e:	4013      	ands	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	2280      	movs	r2, #128	@ 0x80
 8003184:	4013      	ands	r3, r2
 8003186:	d00b      	beq.n	80031a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a0e      	ldr	r2, [pc, #56]	@ (80031c8 <UART_AdvFeatureConfig+0x164>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	ffff7fff 	.word	0xffff7fff
 80031ac:	fffdffff 	.word	0xfffdffff
 80031b0:	fffeffff 	.word	0xfffeffff
 80031b4:	fffbffff 	.word	0xfffbffff
 80031b8:	ffffefff 	.word	0xffffefff
 80031bc:	ffffdfff 	.word	0xffffdfff
 80031c0:	ffefffff 	.word	0xffefffff
 80031c4:	ff9fffff 	.word	0xff9fffff
 80031c8:	fff7ffff 	.word	0xfff7ffff

080031cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b092      	sub	sp, #72	@ 0x48
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2290      	movs	r2, #144	@ 0x90
 80031d8:	2100      	movs	r1, #0
 80031da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031dc:	f7fd ffd2 	bl	8001184 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2208      	movs	r2, #8
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d12d      	bne.n	800324e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f4:	2280      	movs	r2, #128	@ 0x80
 80031f6:	0391      	lsls	r1, r2, #14
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4a47      	ldr	r2, [pc, #284]	@ (8003318 <UART_CheckIdleState+0x14c>)
 80031fc:	9200      	str	r2, [sp, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	f000 f88e 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d022      	beq.n	800324e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003208:	f3ef 8310 	mrs	r3, PRIMASK
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003212:	2301      	movs	r3, #1
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			@ (mov r8, r8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2180      	movs	r1, #128	@ 0x80
 800322a:	438a      	bics	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003234:	f383 8810 	msr	PRIMASK, r3
}
 8003238:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2288      	movs	r2, #136	@ 0x88
 800323e:	2120      	movs	r1, #32
 8003240:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2284      	movs	r2, #132	@ 0x84
 8003246:	2100      	movs	r1, #0
 8003248:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e060      	b.n	8003310 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2204      	movs	r2, #4
 8003256:	4013      	ands	r3, r2
 8003258:	2b04      	cmp	r3, #4
 800325a:	d146      	bne.n	80032ea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800325c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800325e:	2280      	movs	r2, #128	@ 0x80
 8003260:	03d1      	lsls	r1, r2, #15
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4a2c      	ldr	r2, [pc, #176]	@ (8003318 <UART_CheckIdleState+0x14c>)
 8003266:	9200      	str	r2, [sp, #0]
 8003268:	2200      	movs	r2, #0
 800326a:	f000 f859 	bl	8003320 <UART_WaitOnFlagUntilTimeout>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d03b      	beq.n	80032ea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003272:	f3ef 8310 	mrs	r3, PRIMASK
 8003276:	60fb      	str	r3, [r7, #12]
  return(result);
 8003278:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800327a:	637b      	str	r3, [r7, #52]	@ 0x34
 800327c:	2301      	movs	r3, #1
 800327e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f383 8810 	msr	PRIMASK, r3
}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4922      	ldr	r1, [pc, #136]	@ (800331c <UART_CheckIdleState+0x150>)
 8003294:	400a      	ands	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f383 8810 	msr	PRIMASK, r3
}
 80032a2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80032aa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ae:	2301      	movs	r3, #1
 80032b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f383 8810 	msr	PRIMASK, r3
}
 80032b8:	46c0      	nop			@ (mov r8, r8)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	438a      	bics	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	f383 8810 	msr	PRIMASK, r3
}
 80032d4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	228c      	movs	r2, #140	@ 0x8c
 80032da:	2120      	movs	r1, #32
 80032dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2284      	movs	r2, #132	@ 0x84
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e012      	b.n	8003310 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2288      	movs	r2, #136	@ 0x88
 80032ee:	2120      	movs	r1, #32
 80032f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	228c      	movs	r2, #140	@ 0x8c
 80032f6:	2120      	movs	r1, #32
 80032f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2284      	movs	r2, #132	@ 0x84
 800330a:	2100      	movs	r1, #0
 800330c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	0018      	movs	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	b010      	add	sp, #64	@ 0x40
 8003316:	bd80      	pop	{r7, pc}
 8003318:	01ffffff 	.word	0x01ffffff
 800331c:	fffffedf 	.word	0xfffffedf

08003320 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	1dfb      	adds	r3, r7, #7
 800332e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003330:	e051      	b.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	3301      	adds	r3, #1
 8003336:	d04e      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003338:	f7fd ff24 	bl	8001184 <HAL_GetTick>
 800333c:	0002      	movs	r2, r0
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	429a      	cmp	r2, r3
 8003346:	d302      	bcc.n	800334e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e051      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2204      	movs	r2, #4
 800335a:	4013      	ands	r3, r2
 800335c:	d03b      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b80      	cmp	r3, #128	@ 0x80
 8003362:	d038      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b40      	cmp	r3, #64	@ 0x40
 8003368:	d035      	beq.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2208      	movs	r2, #8
 8003372:	4013      	ands	r3, r2
 8003374:	2b08      	cmp	r3, #8
 8003376:	d111      	bne.n	800339c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2208      	movs	r2, #8
 800337e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f83c 	bl	8003400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2290      	movs	r2, #144	@ 0x90
 800338c:	2108      	movs	r1, #8
 800338e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2284      	movs	r2, #132	@ 0x84
 8003394:	2100      	movs	r1, #0
 8003396:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e02c      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	2380      	movs	r3, #128	@ 0x80
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	401a      	ands	r2, r3
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d112      	bne.n	80033d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2280      	movs	r2, #128	@ 0x80
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	0018      	movs	r0, r3
 80033be:	f000 f81f 	bl	8003400 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2290      	movs	r2, #144	@ 0x90
 80033c6:	2120      	movs	r1, #32
 80033c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2284      	movs	r2, #132	@ 0x84
 80033ce:	2100      	movs	r1, #0
 80033d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e00f      	b.n	80033f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	4013      	ands	r3, r2
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	425a      	negs	r2, r3
 80033e6:	4153      	adcs	r3, r2
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	001a      	movs	r2, r3
 80033ec:	1dfb      	adds	r3, r7, #7
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d09e      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	0018      	movs	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b004      	add	sp, #16
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08e      	sub	sp, #56	@ 0x38
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003408:	f3ef 8310 	mrs	r3, PRIMASK
 800340c:	617b      	str	r3, [r7, #20]
  return(result);
 800340e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003410:	637b      	str	r3, [r7, #52]	@ 0x34
 8003412:	2301      	movs	r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f383 8810 	msr	PRIMASK, r3
}
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4926      	ldr	r1, [pc, #152]	@ (80034c4 <UART_EndRxTransfer+0xc4>)
 800342a:	400a      	ands	r2, r1
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003430:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f383 8810 	msr	PRIMASK, r3
}
 8003438:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343a:	f3ef 8310 	mrs	r3, PRIMASK
 800343e:	623b      	str	r3, [r7, #32]
  return(result);
 8003440:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003442:	633b      	str	r3, [r7, #48]	@ 0x30
 8003444:	2301      	movs	r3, #1
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	f383 8810 	msr	PRIMASK, r3
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	491b      	ldr	r1, [pc, #108]	@ (80034c8 <UART_EndRxTransfer+0xc8>)
 800345c:	400a      	ands	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
 8003460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003462:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003466:	f383 8810 	msr	PRIMASK, r3
}
 800346a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d118      	bne.n	80034a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003474:	f3ef 8310 	mrs	r3, PRIMASK
 8003478:	60bb      	str	r3, [r7, #8]
  return(result);
 800347a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800347e:	2301      	movs	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	46c0      	nop			@ (mov r8, r8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2110      	movs	r1, #16
 8003496:	438a      	bics	r2, r1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f383 8810 	msr	PRIMASK, r3
}
 80034a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	228c      	movs	r2, #140	@ 0x8c
 80034aa:	2120      	movs	r1, #32
 80034ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	46bd      	mov	sp, r7
 80034be:	b00e      	add	sp, #56	@ 0x38
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	fffffedf 	.word	0xfffffedf
 80034c8:	effffffe 	.word	0xeffffffe

080034cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2284      	movs	r2, #132	@ 0x84
 80034d8:	5c9b      	ldrb	r3, [r3, r2]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80034de:	2302      	movs	r3, #2
 80034e0:	e027      	b.n	8003532 <HAL_UARTEx_DisableFifoMode+0x66>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2284      	movs	r2, #132	@ 0x84
 80034e6:	2101      	movs	r1, #1
 80034e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2288      	movs	r2, #136	@ 0x88
 80034ee:	2124      	movs	r1, #36	@ 0x24
 80034f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2101      	movs	r1, #1
 8003506:	438a      	bics	r2, r1
 8003508:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a0b      	ldr	r2, [pc, #44]	@ (800353c <HAL_UARTEx_DisableFifoMode+0x70>)
 800350e:	4013      	ands	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2288      	movs	r2, #136	@ 0x88
 8003524:	2120      	movs	r1, #32
 8003526:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2284      	movs	r2, #132	@ 0x84
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	dfffffff 	.word	0xdfffffff

08003540 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2284      	movs	r2, #132	@ 0x84
 800354e:	5c9b      	ldrb	r3, [r3, r2]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d101      	bne.n	8003558 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003554:	2302      	movs	r3, #2
 8003556:	e02e      	b.n	80035b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2284      	movs	r2, #132	@ 0x84
 800355c:	2101      	movs	r1, #1
 800355e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2288      	movs	r2, #136	@ 0x88
 8003564:	2124      	movs	r1, #36	@ 0x24
 8003566:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	438a      	bics	r2, r1
 800357e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	08d9      	lsrs	r1, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	0018      	movs	r0, r3
 8003598:	f000 f854 	bl	8003644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2288      	movs	r2, #136	@ 0x88
 80035a8:	2120      	movs	r1, #32
 80035aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2284      	movs	r2, #132	@ 0x84
 80035b0:	2100      	movs	r1, #0
 80035b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2284      	movs	r2, #132	@ 0x84
 80035ce:	5c9b      	ldrb	r3, [r3, r2]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e02f      	b.n	8003638 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2284      	movs	r2, #132	@ 0x84
 80035dc:	2101      	movs	r1, #1
 80035de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2288      	movs	r2, #136	@ 0x88
 80035e4:	2124      	movs	r1, #36	@ 0x24
 80035e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	438a      	bics	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4a0e      	ldr	r2, [pc, #56]	@ (8003640 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003608:	4013      	ands	r3, r2
 800360a:	0019      	movs	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0018      	movs	r0, r3
 800361a:	f000 f813 	bl	8003644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2288      	movs	r2, #136	@ 0x88
 800362a:	2120      	movs	r1, #32
 800362c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2284      	movs	r2, #132	@ 0x84
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b004      	add	sp, #16
 800363e:	bd80      	pop	{r7, pc}
 8003640:	f1ffffff 	.word	0xf1ffffff

08003644 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003650:	2b00      	cmp	r3, #0
 8003652:	d108      	bne.n	8003666 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	226a      	movs	r2, #106	@ 0x6a
 8003658:	2101      	movs	r1, #1
 800365a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2268      	movs	r2, #104	@ 0x68
 8003660:	2101      	movs	r1, #1
 8003662:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003664:	e043      	b.n	80036ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003666:	260f      	movs	r6, #15
 8003668:	19bb      	adds	r3, r7, r6
 800366a:	2208      	movs	r2, #8
 800366c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800366e:	200e      	movs	r0, #14
 8003670:	183b      	adds	r3, r7, r0
 8003672:	2208      	movs	r2, #8
 8003674:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	0e5b      	lsrs	r3, r3, #25
 800367e:	b2da      	uxtb	r2, r3
 8003680:	240d      	movs	r4, #13
 8003682:	193b      	adds	r3, r7, r4
 8003684:	2107      	movs	r1, #7
 8003686:	400a      	ands	r2, r1
 8003688:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	0f5b      	lsrs	r3, r3, #29
 8003692:	b2da      	uxtb	r2, r3
 8003694:	250c      	movs	r5, #12
 8003696:	197b      	adds	r3, r7, r5
 8003698:	2107      	movs	r1, #7
 800369a:	400a      	ands	r2, r1
 800369c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800369e:	183b      	adds	r3, r7, r0
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	197a      	adds	r2, r7, r5
 80036a4:	7812      	ldrb	r2, [r2, #0]
 80036a6:	4914      	ldr	r1, [pc, #80]	@ (80036f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80036a8:	5c8a      	ldrb	r2, [r1, r2]
 80036aa:	435a      	muls	r2, r3
 80036ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80036ae:	197b      	adds	r3, r7, r5
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	4a12      	ldr	r2, [pc, #72]	@ (80036fc <UARTEx_SetNbDataToProcess+0xb8>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036b6:	0019      	movs	r1, r3
 80036b8:	f7fc fdae 	bl	8000218 <__divsi3>
 80036bc:	0003      	movs	r3, r0
 80036be:	b299      	uxth	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	226a      	movs	r2, #106	@ 0x6a
 80036c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036c6:	19bb      	adds	r3, r7, r6
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	193a      	adds	r2, r7, r4
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	490a      	ldr	r1, [pc, #40]	@ (80036f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80036d0:	5c8a      	ldrb	r2, [r1, r2]
 80036d2:	435a      	muls	r2, r3
 80036d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80036d6:	193b      	adds	r3, r7, r4
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	4a08      	ldr	r2, [pc, #32]	@ (80036fc <UARTEx_SetNbDataToProcess+0xb8>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036de:	0019      	movs	r1, r3
 80036e0:	f7fc fd9a 	bl	8000218 <__divsi3>
 80036e4:	0003      	movs	r3, r0
 80036e6:	b299      	uxth	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2268      	movs	r2, #104	@ 0x68
 80036ec:	5299      	strh	r1, [r3, r2]
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b005      	add	sp, #20
 80036f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	08003c10 	.word	0x08003c10
 80036fc:	08003c18 	.word	0x08003c18

08003700 <memset>:
 8003700:	0003      	movs	r3, r0
 8003702:	1882      	adds	r2, r0, r2
 8003704:	4293      	cmp	r3, r2
 8003706:	d100      	bne.n	800370a <memset+0xa>
 8003708:	4770      	bx	lr
 800370a:	7019      	strb	r1, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	e7f9      	b.n	8003704 <memset+0x4>

08003710 <__libc_init_array>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	2600      	movs	r6, #0
 8003714:	4c0c      	ldr	r4, [pc, #48]	@ (8003748 <__libc_init_array+0x38>)
 8003716:	4d0d      	ldr	r5, [pc, #52]	@ (800374c <__libc_init_array+0x3c>)
 8003718:	1b64      	subs	r4, r4, r5
 800371a:	10a4      	asrs	r4, r4, #2
 800371c:	42a6      	cmp	r6, r4
 800371e:	d109      	bne.n	8003734 <__libc_init_array+0x24>
 8003720:	2600      	movs	r6, #0
 8003722:	f000 f819 	bl	8003758 <_init>
 8003726:	4c0a      	ldr	r4, [pc, #40]	@ (8003750 <__libc_init_array+0x40>)
 8003728:	4d0a      	ldr	r5, [pc, #40]	@ (8003754 <__libc_init_array+0x44>)
 800372a:	1b64      	subs	r4, r4, r5
 800372c:	10a4      	asrs	r4, r4, #2
 800372e:	42a6      	cmp	r6, r4
 8003730:	d105      	bne.n	800373e <__libc_init_array+0x2e>
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	00b3      	lsls	r3, r6, #2
 8003736:	58eb      	ldr	r3, [r5, r3]
 8003738:	4798      	blx	r3
 800373a:	3601      	adds	r6, #1
 800373c:	e7ee      	b.n	800371c <__libc_init_array+0xc>
 800373e:	00b3      	lsls	r3, r6, #2
 8003740:	58eb      	ldr	r3, [r5, r3]
 8003742:	4798      	blx	r3
 8003744:	3601      	adds	r6, #1
 8003746:	e7f2      	b.n	800372e <__libc_init_array+0x1e>
 8003748:	08003c28 	.word	0x08003c28
 800374c:	08003c28 	.word	0x08003c28
 8003750:	08003c2c 	.word	0x08003c2c
 8003754:	08003c28 	.word	0x08003c28

08003758 <_init>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr

08003764 <_fini>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376a:	bc08      	pop	{r3}
 800376c:	469e      	mov	lr, r3
 800376e:	4770      	bx	lr
